From af30f83636a22941a86f2575df26eb5e09735783 Mon Sep 17 00:00:00 2001
From: Alex Sartan <asartan@pivotal.io>
Date: Thu, 17 May 2018 14:27:51 -0600
Subject: [PATCH 4/5] Add security

---
 .../AllocationsServer/AllocationsServer.csproj     |  1 +
 Applications/AllocationsServer/Startup.cs          | 31 ++++++++++++++++++--
 Applications/BacklogServer/BacklogServer.csproj    |  1 +
 Applications/BacklogServer/Startup.cs              | 32 ++++++++++++++++++--
 .../RegistrationServer/RegistrationServer.csproj   |  1 +
 Applications/RegistrationServer/Startup.cs         | 23 ++++++++++++++-
 Applications/TimesheetsServer/Startup.cs           | 34 ++++++++++++++++++++--
 .../TimesheetsServer/TimesheetsServer.csproj       |  1 +
 Components/Accounts/AccountController.cs           |  1 +
 Components/Accounts/RegistrationController.cs      |  3 +-
 Components/Allocations/AllocationController.cs     |  1 +
 Components/Allocations/ProjectClient.cs            | 12 ++++++--
 Components/Backlog/ProjectClient.cs                | 12 ++++++--
 Components/Backlog/StoryController.cs              |  1 +
 Components/DefaultRoute/DefaultController.cs       |  3 +-
 Components/Projects/ProjectController.cs           |  1 +
 Components/Timesheets/ProjectClient.cs             | 12 ++++++--
 Components/Timesheets/TimeEntryController.cs       |  1 +
 Components/Users/UserController.cs                 |  3 +-
 IntegrationTest/FlowTest.cs                        |  4 +++
 PalTracker.sln                                     |  2 +-
 manifest-allocations.yml                           |  5 +++-
 manifest-backlog.yml                               |  5 +++-
 manifest-registration.yml                          |  5 +++-
 manifest-timesheets.yml                            |  5 +++-
 start-server.sh                                    |  1 +
 26 files changed, 178 insertions(+), 23 deletions(-)

diff --git a/Applications/AllocationsServer/AllocationsServer.csproj b/Applications/AllocationsServer/AllocationsServer.csproj
index e4fbc6b..6bcdd94 100755
--- a/Applications/AllocationsServer/AllocationsServer.csproj
+++ b/Applications/AllocationsServer/AllocationsServer.csproj
@@ -11,6 +11,7 @@
     <PackageReference Include="Steeltoe.CloudFoundry.Connector.EFCore" Version="2.0.0" />
     <PackageReference Include="Pivotal.Discovery.ClientCore" Version="2.0.0" />
     <PackageReference Include="Steeltoe.Extensions.Configuration.CloudFoundryCore" Version="2.0.0" />
+    <PackageReference Include="Steeltoe.Security.Authentication.CloudFoundryCore" Version="2.0.0" />
   </ItemGroup>
   <ItemGroup>
     <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
diff --git a/Applications/AllocationsServer/Startup.cs b/Applications/AllocationsServer/Startup.cs
index d3cec56..2497fe1 100755
--- a/Applications/AllocationsServer/Startup.cs
+++ b/Applications/AllocationsServer/Startup.cs
@@ -1,8 +1,13 @@
 ﻿using System;
 using System.Net.Http;
 using Allocations;
+using Microsoft.AspNetCore.Authentication;
+using Microsoft.AspNetCore.Authentication.JwtBearer;
+using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Builder;
 using Microsoft.AspNetCore.Hosting;
+using Microsoft.AspNetCore.Http;
+using Microsoft.AspNetCore.Mvc.Authorization;
 using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.DependencyInjection;
 using Microsoft.Extensions.Logging;
@@ -10,6 +15,7 @@ using Pivotal.Discovery.Client;
 using Steeltoe.CircuitBreaker.Hystrix;
 using Steeltoe.CloudFoundry.Connector.MySql.EFCore;
 using Steeltoe.Common.Discovery;
+using Steeltoe.Security.Authentication.CloudFoundry;
 
 namespace AllocationsServer
 {
@@ -25,12 +31,24 @@ namespace AllocationsServer
         // This method gets called by the runtime. Use this method to add services to the container.
         public void ConfigureServices(IServiceCollection services)
         {
+            var authenticationScheme = JwtBearerDefaults.AuthenticationScheme;
             // Add framework services.
-            services.AddMvc();
-
+            services.AddMvc(mvcOptions =>
+            {
+                if (!Configuration.GetValue("DISABLE_AUTH", false))
+                {
+                    // Set Authorized as default policy
+                    var policy = new AuthorizationPolicyBuilder(authenticationScheme)
+                    .RequireAuthenticatedUser()
+                    .RequireClaim("scope", "uaa.resource")
+                    .Build();
+                    mvcOptions.Filters.Add(new AuthorizeFilter(policy));
+                }
+            });
             services.AddDbContext<AllocationContext>(options => options.UseMySql(Configuration));
             services.AddScoped<IAllocationDataGateway, AllocationDataGateway>();
 
+            services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();
             services.AddSingleton<IProjectClient>(sp =>
             {
                 var handler = new DiscoveryHttpClientHandler(sp.GetService<IDiscoveryClient>());
@@ -40,10 +58,17 @@ namespace AllocationsServer
                 };
 
                 var logger = sp.GetService<ILogger<ProjectClient>>();
+                var contextAccessor = sp.GetService<IHttpContextAccessor>();
 
-                return new ProjectClient(httpClient, logger);
+                return new ProjectClient(
+                    httpClient, logger,
+                    () => contextAccessor.HttpContext.GetTokenAsync("access_token")
+                );
             });
 
+            services.AddAuthentication(authenticationScheme)
+                .AddCloudFoundryJwtBearer(Configuration);
+
             services.AddDiscoveryClient(Configuration);
             services.AddHystrixMetricsStream(Configuration);
         }
diff --git a/Applications/BacklogServer/BacklogServer.csproj b/Applications/BacklogServer/BacklogServer.csproj
index 99d6279..80bdf7d 100755
--- a/Applications/BacklogServer/BacklogServer.csproj
+++ b/Applications/BacklogServer/BacklogServer.csproj
@@ -11,6 +11,7 @@
     <PackageReference Include="Steeltoe.CloudFoundry.Connector.EFCore" Version="2.0.0" />
     <PackageReference Include="Pivotal.Discovery.ClientCore" Version="2.0.0" />
     <PackageReference Include="Steeltoe.Extensions.Configuration.CloudFoundryCore" Version="2.0.0" />
+    <PackageReference Include="Steeltoe.Security.Authentication.CloudFoundryCore" Version="2.0.0" />
   </ItemGroup>
   <ItemGroup>
     <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
diff --git a/Applications/BacklogServer/Startup.cs b/Applications/BacklogServer/Startup.cs
index 0f0fd80..cf91ccf 100755
--- a/Applications/BacklogServer/Startup.cs
+++ b/Applications/BacklogServer/Startup.cs
@@ -1,8 +1,13 @@
 ﻿using System;
 using System.Net.Http;
 using Backlog;
+using Microsoft.AspNetCore.Authentication;
+using Microsoft.AspNetCore.Authentication.JwtBearer;
+using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Builder;
 using Microsoft.AspNetCore.Hosting;
+using Microsoft.AspNetCore.Http;
+using Microsoft.AspNetCore.Mvc.Authorization;
 using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.DependencyInjection;
 using Microsoft.Extensions.Logging;
@@ -10,6 +15,7 @@ using Pivotal.Discovery.Client;
 using Steeltoe.CircuitBreaker.Hystrix;
 using Steeltoe.CloudFoundry.Connector.MySql.EFCore;
 using Steeltoe.Common.Discovery;
+using Steeltoe.Security.Authentication.CloudFoundry;
 
 namespace BacklogServer
 {
@@ -25,12 +31,25 @@ namespace BacklogServer
         // This method gets called by the runtime. Use this method to add services to the container.
         public void ConfigureServices(IServiceCollection services)
         {
+            var authenticationScheme = JwtBearerDefaults.AuthenticationScheme;
             // Add framework services.
-            services.AddMvc();
+            services.AddMvc(mvcOptions =>
+            {
+                if (!Configuration.GetValue("DISABLE_AUTH", false))
+                {
+                    // Set Authorized as default policy
+                    var policy = new AuthorizationPolicyBuilder(authenticationScheme)
+                    .RequireAuthenticatedUser()
+                    .RequireClaim("scope", "uaa.resource")
+                    .Build();
+                    mvcOptions.Filters.Add(new AuthorizeFilter(policy));
+                }
+            });
 
             services.AddDbContext<StoryContext>(options => options.UseMySql(Configuration));
             services.AddScoped<IStoryDataGateway, StoryDataGateway>();
 
+            services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();
             services.AddSingleton<IProjectClient>(sp =>
             {
                 var handler = new DiscoveryHttpClientHandler(sp.GetService<IDiscoveryClient>());
@@ -40,10 +59,19 @@ namespace BacklogServer
                 };
 
                 var logger = sp.GetService<ILogger<ProjectClient>>();
+                var contextAccessor = sp.GetService<IHttpContextAccessor>();
 
-                return new ProjectClient(httpClient, logger);
+                return new ProjectClient(
+                    httpClient, logger,
+                    () => contextAccessor.HttpContext.GetTokenAsync("access_token")
+                );
             });
 
+            services.AddAuthentication(authenticationScheme)
+                .AddCloudFoundryJwtBearer(Configuration);
+
+
+
             services.AddDiscoveryClient(Configuration);
             services.AddHystrixMetricsStream(Configuration);
         }
diff --git a/Applications/RegistrationServer/RegistrationServer.csproj b/Applications/RegistrationServer/RegistrationServer.csproj
index 401b5e6..87648bf 100755
--- a/Applications/RegistrationServer/RegistrationServer.csproj
+++ b/Applications/RegistrationServer/RegistrationServer.csproj
@@ -13,6 +13,7 @@
     <PackageReference Include="Steeltoe.CloudFoundry.Connector.EFCore" Version="2.0.0" />
     <PackageReference Include="Pivotal.Discovery.ClientCore" Version="2.0.0" />
     <PackageReference Include="Steeltoe.Extensions.Configuration.CloudFoundryCore" Version="2.0.0" />
+    <PackageReference Include="Steeltoe.Security.Authentication.CloudFoundryCore" Version="2.0.0" />
   </ItemGroup>
   <ItemGroup>
     <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
diff --git a/Applications/RegistrationServer/Startup.cs b/Applications/RegistrationServer/Startup.cs
index a494849..11fb144 100755
--- a/Applications/RegistrationServer/Startup.cs
+++ b/Applications/RegistrationServer/Startup.cs
@@ -1,12 +1,16 @@
 ﻿using Accounts;
+using Microsoft.AspNetCore.Authentication.JwtBearer;
+using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Builder;
 using Microsoft.AspNetCore.Hosting;
+using Microsoft.AspNetCore.Mvc.Authorization;
 using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.DependencyInjection;
 using Microsoft.Extensions.Logging;
 using Pivotal.Discovery.Client;
 using Projects;
 using Steeltoe.CloudFoundry.Connector.MySql.EFCore;
+using Steeltoe.Security.Authentication.CloudFoundry;
 using Users;
 
 namespace RegistrationServer
@@ -23,8 +27,20 @@ namespace RegistrationServer
         // This method gets called by the runtime. Use this method to add services to the container.
         public void ConfigureServices(IServiceCollection services)
         {
+            var authenticationScheme = JwtBearerDefaults.AuthenticationScheme;
             // Add framework services.
-            services.AddMvc();
+            services.AddMvc(mvcOptions =>
+            {
+                if (!Configuration.GetValue("DISABLE_AUTH", false))
+                {
+                    // Set Authorized as default policy
+                    var policy = new AuthorizationPolicyBuilder(authenticationScheme)
+                    .RequireAuthenticatedUser()
+                    .RequireClaim("scope", "uaa.resource")
+                    .Build();
+                    mvcOptions.Filters.Add(new AuthorizeFilter(policy));
+                }
+            });
 
             services.AddDbContext<AccountContext>(options => options.UseMySql(Configuration));
             services.AddDbContext<ProjectContext>(options => options.UseMySql(Configuration));
@@ -36,6 +52,11 @@ namespace RegistrationServer
             services.AddScoped<IRegistrationService, RegistrationService>();
 
             services.AddDiscoveryClient(Configuration);
+
+            services.AddAuthentication(authenticationScheme)
+                .AddCloudFoundryJwtBearer(Configuration);
+
+
         }
 
         // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
diff --git a/Applications/TimesheetsServer/Startup.cs b/Applications/TimesheetsServer/Startup.cs
index fa15337..9440dc9 100755
--- a/Applications/TimesheetsServer/Startup.cs
+++ b/Applications/TimesheetsServer/Startup.cs
@@ -1,7 +1,12 @@
 ﻿using System;
 using System.Net.Http;
+using Microsoft.AspNetCore.Authentication;
+using Microsoft.AspNetCore.Authentication.JwtBearer;
+using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Builder;
 using Microsoft.AspNetCore.Hosting;
+using Microsoft.AspNetCore.Http;
+using Microsoft.AspNetCore.Mvc.Authorization;
 using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.DependencyInjection;
 using Microsoft.Extensions.Logging;
@@ -9,6 +14,7 @@ using Pivotal.Discovery.Client;
 using Steeltoe.CircuitBreaker.Hystrix;
 using Steeltoe.CloudFoundry.Connector.MySql.EFCore;
 using Steeltoe.Common.Discovery;
+using Steeltoe.Security.Authentication.CloudFoundry;
 using Timesheets;
 
 namespace TimesheetsServer
@@ -25,12 +31,25 @@ namespace TimesheetsServer
         // This method gets called by the runtime. Use this method to add services to the container.
         public void ConfigureServices(IServiceCollection services)
         {
+            var authenticationScheme = JwtBearerDefaults.AuthenticationScheme;
             // Add framework services.
-            services.AddMvc();
+            services.AddMvc(mvcOptions =>
+            {
+                if (!Configuration.GetValue("DISABLE_AUTH", false))
+                {
+                    // Set Authorized as default policy
+                    var policy = new AuthorizationPolicyBuilder(authenticationScheme)
+                    .RequireAuthenticatedUser()
+                    .RequireClaim("scope", "uaa.resource")
+                    .Build();
+                    mvcOptions.Filters.Add(new AuthorizeFilter(policy));
+                }
+            });
 
             services.AddDbContext<TimeEntryContext>(options => options.UseMySql(Configuration));
             services.AddScoped<ITimeEntryDataGateway, TimeEntryDataGateway>();
-            
+
+            services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();
             services.AddSingleton<IProjectClient>(sp =>
             {
                 var handler = new DiscoveryHttpClientHandler(sp.GetService<IDiscoveryClient>());
@@ -40,10 +59,19 @@ namespace TimesheetsServer
                 };
 
                 var logger = sp.GetService<ILogger<ProjectClient>>();
+                var contextAccessor = sp.GetService<IHttpContextAccessor>();
 
-                return new ProjectClient(httpClient, logger);
+                return new ProjectClient(
+                    httpClient, logger,
+                    () => contextAccessor.HttpContext.GetTokenAsync("access_token")
+                );
             });
 
+            services.AddAuthentication(authenticationScheme)
+                .AddCloudFoundryJwtBearer(Configuration);
+
+
+
             services.AddDiscoveryClient(Configuration);
             services.AddHystrixMetricsStream(Configuration);
         }
diff --git a/Applications/TimesheetsServer/TimesheetsServer.csproj b/Applications/TimesheetsServer/TimesheetsServer.csproj
index ce7f910..0ca4ae3 100755
--- a/Applications/TimesheetsServer/TimesheetsServer.csproj
+++ b/Applications/TimesheetsServer/TimesheetsServer.csproj
@@ -11,6 +11,7 @@
     <PackageReference Include="Steeltoe.CloudFoundry.Connector.EFCore" Version="2.0.0" />
     <PackageReference Include="Pivotal.Discovery.ClientCore" Version="2.0.0" />
     <PackageReference Include="Steeltoe.Extensions.Configuration.CloudFoundryCore" Version="2.0.0" />
+    <PackageReference Include="Steeltoe.Security.Authentication.CloudFoundryCore" Version="2.0.0" />
   </ItemGroup>
   <ItemGroup>
     <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
diff --git a/Components/Accounts/AccountController.cs b/Components/Accounts/AccountController.cs
index e19ed13..fe8ac66 100644
--- a/Components/Accounts/AccountController.cs
+++ b/Components/Accounts/AccountController.cs
@@ -1,4 +1,5 @@
 ﻿using System.Linq;
+using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
 
 namespace Accounts
diff --git a/Components/Accounts/RegistrationController.cs b/Components/Accounts/RegistrationController.cs
index 36b88de..a30e7ce 100644
--- a/Components/Accounts/RegistrationController.cs
+++ b/Components/Accounts/RegistrationController.cs
@@ -1,4 +1,5 @@
-﻿using Microsoft.AspNetCore.Mvc;
+﻿using Microsoft.AspNetCore.Authorization;
+using Microsoft.AspNetCore.Mvc;
 using Users;
 
 namespace Accounts
diff --git a/Components/Allocations/AllocationController.cs b/Components/Allocations/AllocationController.cs
index 06384d7..5853e91 100755
--- a/Components/Allocations/AllocationController.cs
+++ b/Components/Allocations/AllocationController.cs
@@ -1,4 +1,5 @@
 ﻿using System.Linq;
+using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
 
 namespace Allocations
diff --git a/Components/Allocations/ProjectClient.cs b/Components/Allocations/ProjectClient.cs
index f2c4ac1..dc6bfd7 100644
--- a/Components/Allocations/ProjectClient.cs
+++ b/Components/Allocations/ProjectClient.cs
@@ -1,5 +1,7 @@
-﻿using System.Collections.Generic;
+﻿using System;
+using System.Collections.Generic;
 using System.Net.Http;
+using System.Net.Http.Headers;
 using System.Runtime.Serialization.Json;
 using System.Threading.Tasks;
 using Microsoft.Extensions.Logging;
@@ -10,12 +12,14 @@ namespace Allocations
     {
         private readonly HttpClient _client;
         private readonly ILogger<ProjectClient> _logger;
+        private readonly Func<Task<string>> _accessTokenFn;
         private readonly IDictionary<long, ProjectInfo> _projectCache = new Dictionary<long, ProjectInfo>();
 
-        public ProjectClient(HttpClient client, ILogger<ProjectClient> logger)
+        public ProjectClient(HttpClient client, ILogger<ProjectClient> logger, Func<Task<string>> accessTokenFn)
         {
             _client = client;
             _logger = logger;
+            _accessTokenFn = accessTokenFn;
         }
 
         public async Task<ProjectInfo> Get(long projectId) =>
@@ -23,7 +27,11 @@ namespace Allocations
 
         private async Task<ProjectInfo> DoGet(long projectId)
         {
+            var token = await _accessTokenFn();
+
             _client.DefaultRequestHeaders.Accept.Clear();
+            _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
+
             var streamTask = _client.GetStreamAsync($"project?projectId={projectId}");
 
             _logger.LogInformation($"Attempting to fetch projectId: {projectId}");
diff --git a/Components/Backlog/ProjectClient.cs b/Components/Backlog/ProjectClient.cs
index 5f23836..7b6a866 100644
--- a/Components/Backlog/ProjectClient.cs
+++ b/Components/Backlog/ProjectClient.cs
@@ -1,5 +1,7 @@
-﻿using System.Collections.Generic;
+﻿using System;
+using System.Collections.Generic;
 using System.Net.Http;
+using System.Net.Http.Headers;
 using System.Runtime.Serialization.Json;
 using System.Threading.Tasks;
 using Microsoft.Extensions.Logging;
@@ -10,12 +12,14 @@ namespace Backlog
     {
         private readonly HttpClient _client;
         private readonly ILogger<ProjectClient> _logger;
+        private readonly Func<Task<string>> _accessTokenFn;
         private readonly IDictionary<long, ProjectInfo> _projectCache = new Dictionary<long, ProjectInfo>();
 
-        public ProjectClient(HttpClient client, ILogger<ProjectClient> logger)
+        public ProjectClient(HttpClient client, ILogger<ProjectClient> logger, Func<Task<string>> accessTokenFn)
         {
             _client = client;
             _logger = logger;
+            _accessTokenFn = accessTokenFn;
         }
 
         public async Task<ProjectInfo> Get(long projectId) =>
@@ -23,7 +27,11 @@ namespace Backlog
 
         private async Task<ProjectInfo> DoGet(long projectId)
         {
+            var token = await _accessTokenFn();
+
             _client.DefaultRequestHeaders.Accept.Clear();
+            _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
+
             var streamTask = _client.GetStreamAsync($"project?projectId={projectId}");
 
             _logger.LogInformation($"Attempting to fetch projectId: {projectId}");
diff --git a/Components/Backlog/StoryController.cs b/Components/Backlog/StoryController.cs
index 844ddc9..c2e9460 100755
--- a/Components/Backlog/StoryController.cs
+++ b/Components/Backlog/StoryController.cs
@@ -1,4 +1,5 @@
 ﻿using System.Linq;
+using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
 
 namespace Backlog
diff --git a/Components/DefaultRoute/DefaultController.cs b/Components/DefaultRoute/DefaultController.cs
index 38750fd..fb507c4 100755
--- a/Components/DefaultRoute/DefaultController.cs
+++ b/Components/DefaultRoute/DefaultController.cs
@@ -1,4 +1,5 @@
-﻿using Microsoft.AspNetCore.Mvc;
+﻿using Microsoft.AspNetCore.Authorization;
+using Microsoft.AspNetCore.Mvc;
 
 namespace DefaultRoute
 {
diff --git a/Components/Projects/ProjectController.cs b/Components/Projects/ProjectController.cs
index 0f97cd2..04df48d 100644
--- a/Components/Projects/ProjectController.cs
+++ b/Components/Projects/ProjectController.cs
@@ -1,4 +1,5 @@
 ﻿using System.Linq;
+using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
 
 namespace Projects
diff --git a/Components/Timesheets/ProjectClient.cs b/Components/Timesheets/ProjectClient.cs
index 6752b50..8ae6783 100644
--- a/Components/Timesheets/ProjectClient.cs
+++ b/Components/Timesheets/ProjectClient.cs
@@ -1,5 +1,7 @@
-﻿using System.Collections.Generic;
+﻿using System;
+using System.Collections.Generic;
 using System.Net.Http;
+using System.Net.Http.Headers;
 using System.Runtime.Serialization.Json;
 using System.Threading.Tasks;
 using Microsoft.Extensions.Logging;
@@ -10,12 +12,14 @@ namespace Timesheets
     {
         private readonly HttpClient _client;
         private readonly ILogger<ProjectClient> _logger;
+        private readonly Func<Task<string>> _accessTokenFn;
         private readonly IDictionary<long, ProjectInfo> _projectCache = new Dictionary<long, ProjectInfo>();
 
-        public ProjectClient(HttpClient client, ILogger<ProjectClient> logger)
+        public ProjectClient(HttpClient client, ILogger<ProjectClient> logger, Func<Task<string>> accessTokenFn)
         {
             _client = client;
             _logger = logger;
+            _accessTokenFn = accessTokenFn;
         }
 
         public async Task<ProjectInfo> Get(long projectId) =>
@@ -23,7 +27,11 @@ namespace Timesheets
 
         private async Task<ProjectInfo> DoGet(long projectId)
         {
+            var token = await _accessTokenFn();
+
             _client.DefaultRequestHeaders.Accept.Clear();
+            _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
+
             var streamTask = _client.GetStreamAsync($"project?projectId={projectId}");
 
             _logger.LogInformation($"Attempting to fetch projectId: {projectId}");
diff --git a/Components/Timesheets/TimeEntryController.cs b/Components/Timesheets/TimeEntryController.cs
index e0da580..d8c6cb5 100755
--- a/Components/Timesheets/TimeEntryController.cs
+++ b/Components/Timesheets/TimeEntryController.cs
@@ -1,4 +1,5 @@
 ﻿using System.Linq;
+using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
 
 namespace Timesheets
diff --git a/Components/Users/UserController.cs b/Components/Users/UserController.cs
index f4dd924..09d982f 100644
--- a/Components/Users/UserController.cs
+++ b/Components/Users/UserController.cs
@@ -1,4 +1,5 @@
-﻿using Microsoft.AspNetCore.Mvc;
+﻿using Microsoft.AspNetCore.Authorization;
+using Microsoft.AspNetCore.Mvc;
 
 namespace Users
 {
diff --git a/IntegrationTest/FlowTest.cs b/IntegrationTest/FlowTest.cs
index d091b2b..cc4aa0a 100644
--- a/IntegrationTest/FlowTest.cs
+++ b/IntegrationTest/FlowTest.cs
@@ -25,6 +25,7 @@ namespace IntegrationTest
                 .AppName("RegistrationServer")
                 .Port(8883)
                 .Database("tracker_registration_dotnet_test")
+                .SetEnvironmentVariable("DISABLE_AUTH", "true")
                 .Build();
 
             _allocationsServer = TestAppServerBuilder()
@@ -32,6 +33,7 @@ namespace IntegrationTest
                 .Port(8881)
                 .Database("tracker_allocations_dotnet_test")
                 .SetEnvironmentVariable("REGISTRATION_SERVER_ENDPOINT", _registrationServer.Url())
+                .SetEnvironmentVariable("DISABLE_AUTH", "true")
                 .Build();
 
             _backlogServer = TestAppServerBuilder()
@@ -39,6 +41,7 @@ namespace IntegrationTest
                 .Port(8882)
                 .Database("tracker_backlog_dotnet_test")
                 .SetEnvironmentVariable("REGISTRATION_SERVER_ENDPOINT", _registrationServer.Url())
+                .SetEnvironmentVariable("DISABLE_AUTH", "true")
                 .Build();
 
             _timesheetsServer = TestAppServerBuilder()
@@ -46,6 +49,7 @@ namespace IntegrationTest
                 .Port(8884)
                 .Database("tracker_timesheets_dotnet_test")
                 .SetEnvironmentVariable("REGISTRATION_SERVER_ENDPOINT", _registrationServer.Url())
+                .SetEnvironmentVariable("DISABLE_AUTH", "true")
                 .Build();
         }
 
diff --git a/PalTracker.sln b/PalTracker.sln
index 250fdc3..0cf1a74 100644
--- a/PalTracker.sln
+++ b/PalTracker.sln
@@ -1,4 +1,4 @@
-﻿
+
 Microsoft Visual Studio Solution File, Format Version 12.00
 # Visual Studio 15
 VisualStudioVersion = 15.0.26124.0
diff --git a/manifest-allocations.yml b/manifest-allocations.yml
index 427d27b..109b6d9 100644
--- a/manifest-allocations.yml
+++ b/manifest-allocations.yml
@@ -5,8 +5,11 @@ applications:
   memory: 256M
   host: allocations-pal-INITIALS
   path: Applications/AllocationsServer/bin/Release/netcoreapp2.0/publish
+  env:
+    GRANT_TYPE: client_credentials
   services:
   - tracker-allocations-database
   - tracker-service-registry
   - tracker-circuit-breaker-dashboard
-  - tracker-amqp
\ No newline at end of file
+  - tracker-amqp
+  - tracker-sso
\ No newline at end of file
diff --git a/manifest-backlog.yml b/manifest-backlog.yml
index 38800da..dac3f1a 100644
--- a/manifest-backlog.yml
+++ b/manifest-backlog.yml
@@ -5,8 +5,11 @@ applications:
   memory: 256M
   host: backlog-pal-INITIALS
   path: Applications/BacklogServer/bin/Release/netcoreapp2.0/publish
+  env:
+    GRANT_TYPE: client_credentials
   services:
   - tracker-backlog-database
   - tracker-service-registry
   - tracker-circuit-breaker-dashboard
-  - tracker-amqp
\ No newline at end of file
+  - tracker-amqp
+  - tracker-sso
\ No newline at end of file
diff --git a/manifest-registration.yml b/manifest-registration.yml
index 3449e19..3349d68 100644
--- a/manifest-registration.yml
+++ b/manifest-registration.yml
@@ -5,6 +5,9 @@ applications:
   memory: 256M
   host: registration-pal-INITIALS
   path: Applications/RegistrationServer/bin/Release/netcoreapp2.0/publish
+  env:
+    GRANT_TYPE: client_credentials
   services:
   - tracker-registration-database
-  - tracker-service-registry
\ No newline at end of file
+  - tracker-service-registry
+  - tracker-sso
\ No newline at end of file
diff --git a/manifest-timesheets.yml b/manifest-timesheets.yml
index 4cdde80..58d9fbe 100644
--- a/manifest-timesheets.yml
+++ b/manifest-timesheets.yml
@@ -5,8 +5,11 @@ applications:
   memory: 256M
   host: timesheets-pal-INITIALS
   path: Applications/TimesheetsServer/bin/Release/netcoreapp2.0/publish
+  env:
+    GRANT_TYPE: client_credentials
   services:
   - tracker-timesheets-database
   - tracker-service-registry
   - tracker-circuit-breaker-dashboard
-  - tracker-amqp
\ No newline at end of file
+  - tracker-amqp
+  - tracker-sso
\ No newline at end of file
diff --git a/start-server.sh b/start-server.sh
index 63e14b6..af80430 100755
--- a/start-server.sh
+++ b/start-server.sh
@@ -19,6 +19,7 @@ function join_by {
 }
 
 function start_server() {
+    export DISABLE_AUTH=true
     dotnet run --project "Applications/${1}Server/${1}Server.csproj" --urls "http://*:${2}"
 }
 
-- 
2.12.3

