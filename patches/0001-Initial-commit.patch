From c76704a7775fe0e35134a06c6070bfa23ae1cffa Mon Sep 17 00:00:00 2001
From: Alex Sartan <asartan@pivotal.io>
Date: Tue, 6 Feb 2018 11:12:02 -0700
Subject: [PATCH 1/5] Initial commit

---
 .gitignore                                         |  32 ++
 .../AllocationsServer/AllocationsServer.csproj     |  19 ++
 Applications/AllocationsServer/Program.cs          |  23 ++
 Applications/AllocationsServer/Startup.cs          |  52 ++++
 .../AllocationsServer/appsettings.Development.json |  10 +
 Applications/AllocationsServer/appsettings.json    |   8 +
 Applications/BacklogServer/BacklogServer.csproj    |  19 ++
 Applications/BacklogServer/Program.cs              |  23 ++
 Applications/BacklogServer/Startup.cs              |  52 ++++
 .../BacklogServer/appsettings.Development.json     |  10 +
 Applications/BacklogServer/appsettings.json        |   8 +
 Applications/RegistrationServer/Program.cs         |  23 ++
 .../RegistrationServer/RegistrationServer.csproj   |  21 ++
 Applications/RegistrationServer/Startup.cs         |  45 +++
 .../appsettings.Development.json                   |  10 +
 Applications/RegistrationServer/appsettings.json   |   8 +
 Applications/TimesheetsServer/Program.cs           |  23 ++
 Applications/TimesheetsServer/Startup.cs           |  52 ++++
 .../TimesheetsServer/TimesheetsServer.csproj       |  19 ++
 .../TimesheetsServer/appsettings.Development.json  |  10 +
 Applications/TimesheetsServer/appsettings.json     |   8 +
 CI/build.yml                                       |  62 ++++
 CI/pipeline.yml                                    | 130 ++++++++
 CI/variables.example.yml                           |  12 +
 Components/Accounts/AccountController.cs           |  26 ++
 Components/Accounts/AccountDataGateway.cs          |  38 +++
 Components/Accounts/AccountInfo.cs                 |  18 ++
 Components/Accounts/AccountRecord.cs               |  16 +
 Components/Accounts/Accounts.csproj                |  15 +
 Components/Accounts/IAccountDataGateway.cs         |  11 +
 Components/Accounts/IRegistrationService.cs        |   9 +
 Components/Accounts/RegistrationController.cs      |  24 ++
 Components/Accounts/RegistrationService.cs         |  24 ++
 Components/AccountsTest/AccountControllerTest.cs   |  44 +++
 Components/AccountsTest/AccountDataGatewayTest.cs  |  55 ++++
 Components/AccountsTest/AccountsTest.csproj        |  17 ++
 .../AccountsTest/RegistrationControllerTest.cs     |  39 +++
 Components/AccountsTest/RegistrationServiceTest.cs |  30 ++
 Components/Allocations/AllocationController.cs     |  45 +++
 Components/Allocations/AllocationDataGateway.cs    |  43 +++
 Components/Allocations/AllocationInfo.cs           |  25 ++
 Components/Allocations/AllocationRecord.cs         |  23 ++
 Components/Allocations/Allocations.csproj          |  15 +
 Components/Allocations/IAllocationDataGateway.cs   |  12 +
 Components/Allocations/IProjectClient.cs           |   9 +
 Components/Allocations/ProjectClient.cs            |  25 ++
 Components/Allocations/ProjectInfo.cs              |  16 +
 .../AllocationsTest/AllocationsControllerTest.cs   |  62 ++++
 .../AllocationsTest/AllocationsDataGatewayTest.cs  |  51 ++++
 Components/AllocationsTest/AllocationsTest.csproj  |  16 +
 Components/Backlog/Backlog.csproj                  |  15 +
 Components/Backlog/IProjectClient.cs               |   9 +
 Components/Backlog/IStoryDataGateway.cs            |  11 +
 Components/Backlog/ProjectClient.cs                |  25 ++
 Components/Backlog/ProjectInfo.cs                  |  16 +
 Components/Backlog/StoryController.cs              |  43 +++
 Components/Backlog/StoryDataGateway.cs             |  38 +++
 Components/Backlog/StoryInfo.cs                    |  19 ++
 Components/Backlog/StoryRecord.cs                  |  17 ++
 Components/BacklogTest/BacklogTest.csproj          |  16 +
 Components/BacklogTest/StoryControllerTest.cs      |  58 ++++
 Components/BacklogTest/StoryDataGatewayTest.cs     |  49 ++++
 Components/DatabaseSupport/DataSourceConfig.cs     |  30 ++
 Components/DatabaseSupport/DatabaseSupport.csproj  |  10 +
 Components/DatabaseSupport/DatabaseTemplate.cs     | 115 ++++++++
 Components/DatabaseSupport/IDataSourceConfig.cs    |   9 +
 Components/DatabaseSupport/IDatabaseTemplate.cs    |  15 +
 .../DatabaseSupportTest/DataSourceConfigTest.cs    |  31 ++
 .../DatabaseSupportTest/DatabaseSupportTest.csproj |  13 +
 Components/DefaultRoute/DefaultController.cs       |  11 +
 Components/DefaultRoute/DefaultRoute.csproj        |  10 +
 Components/Projects/IProjectDataGateway.cs         |  13 +
 Components/Projects/ProjectController.cs           |  48 +++
 Components/Projects/ProjectDataGateway.cs          |  56 ++++
 Components/Projects/ProjectInfo.cs                 |  21 ++
 Components/Projects/ProjectRecord.cs               |  19 ++
 Components/Projects/Projects.csproj                |  16 +
 Components/ProjectsTest/ProjectControllerTest.cs   |  76 +++++
 Components/ProjectsTest/ProjectDataGatewayTest.cs  |  76 +++++
 Components/ProjectsTest/ProjectsTest.csproj        |  18 ++
 Components/TestSupport/IntegrationTestServer.cs    |  26 ++
 Components/TestSupport/TestDatabaseSupport.cs      |  62 ++++
 Components/TestSupport/TestEnvSupport.cs           |  33 +++
 Components/TestSupport/TestServerResponder.cs      |  30 ++
 Components/TestSupport/TestServers.cs              |  10 +
 Components/TestSupport/TestSupport.csproj          |  18 ++
 Components/Timesheets/IProjectClient.cs            |   9 +
 Components/Timesheets/ITimeEntryDataGateway.cs     |  12 +
 Components/Timesheets/ProjectClient.cs             |  25 ++
 Components/Timesheets/ProjectInfo.cs               |  16 +
 Components/Timesheets/TimeEntryController.cs       |  45 +++
 Components/Timesheets/TimeEntryDataGateway.cs      |  43 +++
 Components/Timesheets/TimeEntryInfo.cs             |  25 ++
 Components/Timesheets/TimeEntryRecord.cs           |  23 ++
 Components/Timesheets/Timesheets.csproj            |  17 ++
 .../TimesheetsTest/TimeEntryControllerTest.cs      |  61 ++++
 .../TimesheetsTest/TimeEntryDataGatewayTest.cs     |  51 ++++
 Components/TimesheetsTest/TimesheetsTest.csproj    |  16 +
 Components/Users/IUserDataGateway.cs               |   9 +
 Components/Users/UserController.cs                 |  28 ++
 Components/Users/UserDataGateway.cs                |  36 +++
 Components/Users/UserInfo.cs                       |  16 +
 Components/Users/UserRecord.cs                     |  14 +
 Components/Users/Users.csproj                      |  14 +
 Components/UsersTest/UserControllerTest.cs         |  33 +++
 Components/UsersTest/UserDataGatewayTest.cs        |  48 +++
 Components/UsersTest/UsersTest.csproj              |  16 +
 .../migrations/V1__initial_schema.sql              |  11 +
 .../migrations/V1__initial_schema.sql              |   9 +
 Databases/create_databases.sql                     |  22 ++
 .../migrations/V1__initial_schema.sql              |  34 +++
 .../migrations/V1__initial_schema.sql              |  11 +
 PalTracker.sln                                     | 326 +++++++++++++++++++++
 PlatformServices/ConfigServer/build.gradle         |   3 +
 .../io/pivotal/pal/tracker/configserver/App.java   |  14 +
 .../src/main/resources/application.properties      |   3 +
 PlatformServices/EurekaServer/build.gradle         |   4 +
 .../io/pivotal/pal/tracker/eurekaserver/App.java   |  14 +
 .../src/main/resources/application.properties      |   3 +
 PlatformServices/HystrixDashboard/build.gradle     |   4 +
 .../pivotal/pal/tracker/hystrixdashboard/App.java  |  14 +
 .../src/main/resources/application.properties      |   2 +
 PlatformServices/OAuthServer/build.gradle          |   5 +
 .../io/pivotal/pal/tracker/oauthserver/App.java    |  33 +++
 .../src/main/resources/application.properties      |   2 +
 PlatformServices/build.gradle                      |  31 ++
 PlatformServices/gradle/wrapper/gradle-wrapper.jar | Bin 0 -> 54208 bytes
 .../gradle/wrapper/gradle-wrapper.properties       |   6 +
 PlatformServices/gradlew                           | 172 +++++++++++
 PlatformServices/gradlew.bat                       |  84 ++++++
 PlatformServices/settings.gradle                   |   6 +
 grh-config.json                                    |  21 ++
 manifest-allocations.yml                           |  12 +
 manifest-backlog.yml                               |  12 +
 manifest-registration.yml                          |  10 +
 manifest-timesheets.yml                            |  12 +
 migrate-cf.sh                                      |  55 ++++
 migrate-local.sh                                   |  23 ++
 references.sh                                      |  13 +
 start-server.sh                                    |  51 ++++
 test.sh                                            |   8 +
 vcap_services.json                                 |  22 ++
 142 files changed, 4078 insertions(+)
 create mode 100644 .gitignore
 create mode 100755 Applications/AllocationsServer/AllocationsServer.csproj
 create mode 100755 Applications/AllocationsServer/Program.cs
 create mode 100755 Applications/AllocationsServer/Startup.cs
 create mode 100755 Applications/AllocationsServer/appsettings.Development.json
 create mode 100755 Applications/AllocationsServer/appsettings.json
 create mode 100755 Applications/BacklogServer/BacklogServer.csproj
 create mode 100755 Applications/BacklogServer/Program.cs
 create mode 100755 Applications/BacklogServer/Startup.cs
 create mode 100755 Applications/BacklogServer/appsettings.Development.json
 create mode 100755 Applications/BacklogServer/appsettings.json
 create mode 100755 Applications/RegistrationServer/Program.cs
 create mode 100755 Applications/RegistrationServer/RegistrationServer.csproj
 create mode 100755 Applications/RegistrationServer/Startup.cs
 create mode 100755 Applications/RegistrationServer/appsettings.Development.json
 create mode 100755 Applications/RegistrationServer/appsettings.json
 create mode 100755 Applications/TimesheetsServer/Program.cs
 create mode 100755 Applications/TimesheetsServer/Startup.cs
 create mode 100755 Applications/TimesheetsServer/TimesheetsServer.csproj
 create mode 100755 Applications/TimesheetsServer/appsettings.Development.json
 create mode 100755 Applications/TimesheetsServer/appsettings.json
 create mode 100644 CI/build.yml
 create mode 100644 CI/pipeline.yml
 create mode 100644 CI/variables.example.yml
 create mode 100644 Components/Accounts/AccountController.cs
 create mode 100644 Components/Accounts/AccountDataGateway.cs
 create mode 100755 Components/Accounts/AccountInfo.cs
 create mode 100644 Components/Accounts/AccountRecord.cs
 create mode 100755 Components/Accounts/Accounts.csproj
 create mode 100644 Components/Accounts/IAccountDataGateway.cs
 create mode 100644 Components/Accounts/IRegistrationService.cs
 create mode 100644 Components/Accounts/RegistrationController.cs
 create mode 100644 Components/Accounts/RegistrationService.cs
 create mode 100755 Components/AccountsTest/AccountControllerTest.cs
 create mode 100755 Components/AccountsTest/AccountDataGatewayTest.cs
 create mode 100755 Components/AccountsTest/AccountsTest.csproj
 create mode 100755 Components/AccountsTest/RegistrationControllerTest.cs
 create mode 100755 Components/AccountsTest/RegistrationServiceTest.cs
 create mode 100755 Components/Allocations/AllocationController.cs
 create mode 100644 Components/Allocations/AllocationDataGateway.cs
 create mode 100755 Components/Allocations/AllocationInfo.cs
 create mode 100644 Components/Allocations/AllocationRecord.cs
 create mode 100755 Components/Allocations/Allocations.csproj
 create mode 100644 Components/Allocations/IAllocationDataGateway.cs
 create mode 100644 Components/Allocations/IProjectClient.cs
 create mode 100644 Components/Allocations/ProjectClient.cs
 create mode 100644 Components/Allocations/ProjectInfo.cs
 create mode 100644 Components/AllocationsTest/AllocationsControllerTest.cs
 create mode 100755 Components/AllocationsTest/AllocationsDataGatewayTest.cs
 create mode 100755 Components/AllocationsTest/AllocationsTest.csproj
 create mode 100755 Components/Backlog/Backlog.csproj
 create mode 100644 Components/Backlog/IProjectClient.cs
 create mode 100755 Components/Backlog/IStoryDataGateway.cs
 create mode 100644 Components/Backlog/ProjectClient.cs
 create mode 100644 Components/Backlog/ProjectInfo.cs
 create mode 100755 Components/Backlog/StoryController.cs
 create mode 100755 Components/Backlog/StoryDataGateway.cs
 create mode 100755 Components/Backlog/StoryInfo.cs
 create mode 100755 Components/Backlog/StoryRecord.cs
 create mode 100755 Components/BacklogTest/BacklogTest.csproj
 create mode 100755 Components/BacklogTest/StoryControllerTest.cs
 create mode 100755 Components/BacklogTest/StoryDataGatewayTest.cs
 create mode 100755 Components/DatabaseSupport/DataSourceConfig.cs
 create mode 100755 Components/DatabaseSupport/DatabaseSupport.csproj
 create mode 100644 Components/DatabaseSupport/DatabaseTemplate.cs
 create mode 100644 Components/DatabaseSupport/IDataSourceConfig.cs
 create mode 100644 Components/DatabaseSupport/IDatabaseTemplate.cs
 create mode 100755 Components/DatabaseSupportTest/DataSourceConfigTest.cs
 create mode 100755 Components/DatabaseSupportTest/DatabaseSupportTest.csproj
 create mode 100755 Components/DefaultRoute/DefaultController.cs
 create mode 100755 Components/DefaultRoute/DefaultRoute.csproj
 create mode 100644 Components/Projects/IProjectDataGateway.cs
 create mode 100644 Components/Projects/ProjectController.cs
 create mode 100644 Components/Projects/ProjectDataGateway.cs
 create mode 100644 Components/Projects/ProjectInfo.cs
 create mode 100644 Components/Projects/ProjectRecord.cs
 create mode 100755 Components/Projects/Projects.csproj
 create mode 100755 Components/ProjectsTest/ProjectControllerTest.cs
 create mode 100755 Components/ProjectsTest/ProjectDataGatewayTest.cs
 create mode 100755 Components/ProjectsTest/ProjectsTest.csproj
 create mode 100644 Components/TestSupport/IntegrationTestServer.cs
 create mode 100644 Components/TestSupport/TestDatabaseSupport.cs
 create mode 100644 Components/TestSupport/TestEnvSupport.cs
 create mode 100644 Components/TestSupport/TestServerResponder.cs
 create mode 100644 Components/TestSupport/TestServers.cs
 create mode 100755 Components/TestSupport/TestSupport.csproj
 create mode 100644 Components/Timesheets/IProjectClient.cs
 create mode 100755 Components/Timesheets/ITimeEntryDataGateway.cs
 create mode 100644 Components/Timesheets/ProjectClient.cs
 create mode 100644 Components/Timesheets/ProjectInfo.cs
 create mode 100755 Components/Timesheets/TimeEntryController.cs
 create mode 100755 Components/Timesheets/TimeEntryDataGateway.cs
 create mode 100755 Components/Timesheets/TimeEntryInfo.cs
 create mode 100755 Components/Timesheets/TimeEntryRecord.cs
 create mode 100755 Components/Timesheets/Timesheets.csproj
 create mode 100755 Components/TimesheetsTest/TimeEntryControllerTest.cs
 create mode 100755 Components/TimesheetsTest/TimeEntryDataGatewayTest.cs
 create mode 100755 Components/TimesheetsTest/TimesheetsTest.csproj
 create mode 100644 Components/Users/IUserDataGateway.cs
 create mode 100644 Components/Users/UserController.cs
 create mode 100644 Components/Users/UserDataGateway.cs
 create mode 100644 Components/Users/UserInfo.cs
 create mode 100755 Components/Users/UserRecord.cs
 create mode 100755 Components/Users/Users.csproj
 create mode 100644 Components/UsersTest/UserControllerTest.cs
 create mode 100755 Components/UsersTest/UserDataGatewayTest.cs
 create mode 100755 Components/UsersTest/UsersTest.csproj
 create mode 100644 Databases/allocations-database/migrations/V1__initial_schema.sql
 create mode 100644 Databases/backlog-database/migrations/V1__initial_schema.sql
 create mode 100644 Databases/create_databases.sql
 create mode 100644 Databases/registration-database/migrations/V1__initial_schema.sql
 create mode 100644 Databases/timesheets-database/migrations/V1__initial_schema.sql
 create mode 100644 PalTracker.sln
 create mode 100644 PlatformServices/ConfigServer/build.gradle
 create mode 100644 PlatformServices/ConfigServer/src/main/java/io/pivotal/pal/tracker/configserver/App.java
 create mode 100644 PlatformServices/ConfigServer/src/main/resources/application.properties
 create mode 100644 PlatformServices/EurekaServer/build.gradle
 create mode 100644 PlatformServices/EurekaServer/src/main/java/io/pivotal/pal/tracker/eurekaserver/App.java
 create mode 100644 PlatformServices/EurekaServer/src/main/resources/application.properties
 create mode 100644 PlatformServices/HystrixDashboard/build.gradle
 create mode 100644 PlatformServices/HystrixDashboard/src/main/java/io/pivotal/pal/tracker/hystrixdashboard/App.java
 create mode 100644 PlatformServices/HystrixDashboard/src/main/resources/application.properties
 create mode 100644 PlatformServices/OAuthServer/build.gradle
 create mode 100644 PlatformServices/OAuthServer/src/main/java/io/pivotal/pal/tracker/oauthserver/App.java
 create mode 100644 PlatformServices/OAuthServer/src/main/resources/application.properties
 create mode 100644 PlatformServices/build.gradle
 create mode 100644 PlatformServices/gradle/wrapper/gradle-wrapper.jar
 create mode 100644 PlatformServices/gradle/wrapper/gradle-wrapper.properties
 create mode 100755 PlatformServices/gradlew
 create mode 100644 PlatformServices/gradlew.bat
 create mode 100644 PlatformServices/settings.gradle
 create mode 100644 grh-config.json
 create mode 100644 manifest-allocations.yml
 create mode 100644 manifest-backlog.yml
 create mode 100644 manifest-registration.yml
 create mode 100644 manifest-timesheets.yml
 create mode 100755 migrate-cf.sh
 create mode 100755 migrate-local.sh
 create mode 100755 references.sh
 create mode 100755 start-server.sh
 create mode 100755 test.sh
 create mode 100644 vcap_services.json

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..00ea66f
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,32 @@
+*.swp
+*.*~
+project.lock.json
+.DS_Store
+*.pyc
+
+# User-specific files
+*.suo
+*.user
+*.userosscache
+*.sln.docstates
+
+# Build results
+[Dd]ebug/
+[Dd]ebugPublic/
+[Rr]elease/
+[Rr]eleases/
+x64/
+x86/
+build/
+bld/
+[Bb]in/
+[Oo]bj
+msbuild.log
+msbuild.err
+msbuild.wrn
+
+.idea
+*.iml
+.vscode
+.gradle
+CI/variables.yml
diff --git a/Applications/AllocationsServer/AllocationsServer.csproj b/Applications/AllocationsServer/AllocationsServer.csproj
new file mode 100755
index 0000000..192f32d
--- /dev/null
+++ b/Applications/AllocationsServer/AllocationsServer.csproj
@@ -0,0 +1,19 @@
+﻿<Project Sdk="Microsoft.NET.Sdk.Web">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <Folder Include="wwwroot\" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="../../Components/Allocations/Allocations.csproj" />
+    <ProjectReference Include="../../Components/DatabaseSupport/DatabaseSupport.csproj" />
+    <ProjectReference Include="../../Components/DefaultRoute/DefaultRoute.csproj" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="Microsoft.Extensions.Configuration.CommandLine" Version="2.0.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Applications/AllocationsServer/Program.cs b/Applications/AllocationsServer/Program.cs
new file mode 100755
index 0000000..3c51fee
--- /dev/null
+++ b/Applications/AllocationsServer/Program.cs
@@ -0,0 +1,23 @@
+﻿using Microsoft.AspNetCore;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.Configuration;
+
+namespace AllocationsServer
+{
+    public class Program
+    {
+        public static void Main(string[] args)
+        {
+            BuildWebHost(args).Run();
+        }
+
+        public static IWebHost BuildWebHost(string[] args) =>
+            WebHostBuilder(args).Build();
+
+        public static IWebHostBuilder WebHostBuilder(string[] args) =>
+            WebHost.CreateDefaultBuilder(args)
+                // https://github.com/aspnet/KestrelHttpServer/issues/1998#issuecomment-322922164
+                .UseConfiguration(new ConfigurationBuilder().AddCommandLine(args).Build())
+                .UseStartup<Startup>();
+    }
+}
\ No newline at end of file
diff --git a/Applications/AllocationsServer/Startup.cs b/Applications/AllocationsServer/Startup.cs
new file mode 100755
index 0000000..ac81eb9
--- /dev/null
+++ b/Applications/AllocationsServer/Startup.cs
@@ -0,0 +1,52 @@
+﻿using System;
+using System.Net.Http;
+using Allocations;
+using DatabaseSupport;
+using Microsoft.AspNetCore.Builder;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.Configuration;
+using Microsoft.Extensions.DependencyInjection;
+using Microsoft.Extensions.Logging;
+
+namespace AllocationsServer
+{
+    public class Startup
+    {
+        public Startup(IConfiguration configuration)
+        {
+            Configuration = configuration;
+        }
+
+        public IConfiguration Configuration { get; }
+
+        // This method gets called by the runtime. Use this method to add services to the container.
+        public void ConfigureServices(IServiceCollection services)
+        {
+            // Add framework services.
+            services.AddMvc();
+
+            services.AddSingleton<IDataSourceConfig, DataSourceConfig>();
+            services.AddSingleton<IDatabaseTemplate, DatabaseTemplate>();
+            services.AddSingleton<IAllocationDataGateway, AllocationDataGateway>();
+
+            services.AddSingleton<IProjectClient>(sp =>
+            {
+                var httpClient = new HttpClient
+                {
+                    BaseAddress = new Uri(Configuration.GetValue<string>("REGISTRATION_SERVER_ENDPOINT"))
+                };
+
+                return new ProjectClient(httpClient);
+            });
+        }
+
+        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
+        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
+        {
+            loggerFactory.AddConsole(Configuration.GetSection("Logging"));
+            loggerFactory.AddDebug();
+
+            app.UseMvc();
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/AllocationsServer/appsettings.Development.json b/Applications/AllocationsServer/appsettings.Development.json
new file mode 100755
index 0000000..c7038dd
--- /dev/null
+++ b/Applications/AllocationsServer/appsettings.Development.json
@@ -0,0 +1,10 @@
+﻿{
+    "Logging": {
+        "IncludeScopes": false,
+        "LogLevel": {
+            "Default": "Debug",
+            "System": "Information",
+            "Microsoft": "Information"
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/AllocationsServer/appsettings.json b/Applications/AllocationsServer/appsettings.json
new file mode 100755
index 0000000..2929763
--- /dev/null
+++ b/Applications/AllocationsServer/appsettings.json
@@ -0,0 +1,8 @@
+﻿{
+    "Logging": {
+        "IncludeScopes": false,
+        "LogLevel": {
+            "Default": "Warning"
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/BacklogServer/BacklogServer.csproj b/Applications/BacklogServer/BacklogServer.csproj
new file mode 100755
index 0000000..28987a2
--- /dev/null
+++ b/Applications/BacklogServer/BacklogServer.csproj
@@ -0,0 +1,19 @@
+﻿<Project Sdk="Microsoft.NET.Sdk.Web">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <Folder Include="wwwroot\" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="../../Components/Backlog/Backlog.csproj" />
+    <ProjectReference Include="../../Components/DatabaseSupport/DatabaseSupport.csproj" />
+    <ProjectReference Include="../../Components/DefaultRoute/DefaultRoute.csproj" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="Microsoft.Extensions.Configuration.CommandLine" Version="2.0.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Applications/BacklogServer/Program.cs b/Applications/BacklogServer/Program.cs
new file mode 100755
index 0000000..aeb9712
--- /dev/null
+++ b/Applications/BacklogServer/Program.cs
@@ -0,0 +1,23 @@
+﻿using Microsoft.AspNetCore;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.Configuration;
+
+namespace BacklogServer
+{
+    public class Program
+    {
+        public static void Main(string[] args)
+        {
+            BuildWebHost(args).Run();
+        }
+
+        public static IWebHost BuildWebHost(string[] args) =>
+            WebHostBuilder(args).Build();
+
+        public static IWebHostBuilder WebHostBuilder(string[] args) =>
+            WebHost.CreateDefaultBuilder(args)
+                // https://github.com/aspnet/KestrelHttpServer/issues/1998#issuecomment-322922164
+                .UseConfiguration(new ConfigurationBuilder().AddCommandLine(args).Build())
+                .UseStartup<Startup>();
+    }
+}
\ No newline at end of file
diff --git a/Applications/BacklogServer/Startup.cs b/Applications/BacklogServer/Startup.cs
new file mode 100755
index 0000000..d174a76
--- /dev/null
+++ b/Applications/BacklogServer/Startup.cs
@@ -0,0 +1,52 @@
+﻿using System;
+using System.Net.Http;
+using Backlog;
+using DatabaseSupport;
+using Microsoft.AspNetCore.Builder;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.Configuration;
+using Microsoft.Extensions.DependencyInjection;
+using Microsoft.Extensions.Logging;
+
+namespace BacklogServer
+{
+    public class Startup
+    {
+        public Startup(IConfiguration configuration)
+        {
+            Configuration = configuration;
+        }
+
+        public IConfiguration Configuration { get; }
+
+        // This method gets called by the runtime. Use this method to add services to the container.
+        public void ConfigureServices(IServiceCollection services)
+        {
+            // Add framework services.
+            services.AddMvc();
+            
+            services.AddSingleton<IDataSourceConfig, DataSourceConfig>();
+            services.AddSingleton<IDatabaseTemplate, DatabaseTemplate>();
+            services.AddSingleton<IStoryDataGateway, StoryDataGateway>();
+            
+            services.AddSingleton<IProjectClient>(sp =>
+            {
+                var httpClient = new HttpClient
+                {
+                    BaseAddress = new Uri(Configuration.GetValue<string>("REGISTRATION_SERVER_ENDPOINT"))
+                };
+
+                return new ProjectClient(httpClient);
+            });
+        }
+
+        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
+        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
+        {
+            loggerFactory.AddConsole(Configuration.GetSection("Logging"));
+            loggerFactory.AddDebug();
+
+            app.UseMvc();
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/BacklogServer/appsettings.Development.json b/Applications/BacklogServer/appsettings.Development.json
new file mode 100755
index 0000000..c7038dd
--- /dev/null
+++ b/Applications/BacklogServer/appsettings.Development.json
@@ -0,0 +1,10 @@
+﻿{
+    "Logging": {
+        "IncludeScopes": false,
+        "LogLevel": {
+            "Default": "Debug",
+            "System": "Information",
+            "Microsoft": "Information"
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/BacklogServer/appsettings.json b/Applications/BacklogServer/appsettings.json
new file mode 100755
index 0000000..2929763
--- /dev/null
+++ b/Applications/BacklogServer/appsettings.json
@@ -0,0 +1,8 @@
+﻿{
+    "Logging": {
+        "IncludeScopes": false,
+        "LogLevel": {
+            "Default": "Warning"
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/RegistrationServer/Program.cs b/Applications/RegistrationServer/Program.cs
new file mode 100755
index 0000000..34ddd73
--- /dev/null
+++ b/Applications/RegistrationServer/Program.cs
@@ -0,0 +1,23 @@
+﻿using Microsoft.AspNetCore;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.Configuration;
+
+namespace RegistrationServer
+{
+    public class Program
+    {
+        public static void Main(string[] args)
+        {
+            BuildWebHost(args).Run();
+        }
+
+        public static IWebHost BuildWebHost(string[] args) =>
+            WebHostBuilder(args).Build();
+
+        public static IWebHostBuilder WebHostBuilder(string[] args) =>
+            WebHost.CreateDefaultBuilder(args)
+                // https://github.com/aspnet/KestrelHttpServer/issues/1998#issuecomment-322922164
+                .UseConfiguration(new ConfigurationBuilder().AddCommandLine(args).Build())
+                .UseStartup<Startup>();
+    }
+}
\ No newline at end of file
diff --git a/Applications/RegistrationServer/RegistrationServer.csproj b/Applications/RegistrationServer/RegistrationServer.csproj
new file mode 100755
index 0000000..1faa3b5
--- /dev/null
+++ b/Applications/RegistrationServer/RegistrationServer.csproj
@@ -0,0 +1,21 @@
+﻿<Project Sdk="Microsoft.NET.Sdk.Web">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <Folder Include="wwwroot\" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="../../Components/Accounts/Accounts.csproj" />
+    <ProjectReference Include="../../Components/Projects/Projects.csproj" />
+    <ProjectReference Include="../../Components/Users/Users.csproj" />
+    <ProjectReference Include="../../Components/DatabaseSupport/DatabaseSupport.csproj" />
+    <ProjectReference Include="../../Components/DefaultRoute/DefaultRoute.csproj" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="Microsoft.Extensions.Configuration.CommandLine" Version="2.0.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Applications/RegistrationServer/Startup.cs b/Applications/RegistrationServer/Startup.cs
new file mode 100755
index 0000000..9549a8c
--- /dev/null
+++ b/Applications/RegistrationServer/Startup.cs
@@ -0,0 +1,45 @@
+﻿using Accounts;
+using DatabaseSupport;
+using Microsoft.AspNetCore.Builder;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.Configuration;
+using Microsoft.Extensions.DependencyInjection;
+using Microsoft.Extensions.Logging;
+using Projects;
+using Users;
+
+namespace RegistrationServer
+{
+    public class Startup
+    {
+        public Startup(IConfiguration configuration)
+        {
+            Configuration = configuration;
+        }
+
+        public IConfiguration Configuration { get; }
+
+        // This method gets called by the runtime. Use this method to add services to the container.
+        public void ConfigureServices(IServiceCollection services)
+        {
+            // Add framework services.
+            services.AddMvc();
+
+            services.AddSingleton<IDataSourceConfig, DataSourceConfig>();
+            services.AddSingleton<IDatabaseTemplate, DatabaseTemplate>();
+            services.AddSingleton<IAccountDataGateway, AccountDataGateway>();
+            services.AddSingleton<IProjectDataGateway, ProjectDataGateway>();
+            services.AddSingleton<IUserDataGateway, UserDataGateway>();
+            services.AddSingleton<IRegistrationService, RegistrationService>();
+        }
+
+        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
+        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
+        {
+            loggerFactory.AddConsole(Configuration.GetSection("Logging"));
+            loggerFactory.AddDebug();
+
+            app.UseMvc();
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/RegistrationServer/appsettings.Development.json b/Applications/RegistrationServer/appsettings.Development.json
new file mode 100755
index 0000000..c7038dd
--- /dev/null
+++ b/Applications/RegistrationServer/appsettings.Development.json
@@ -0,0 +1,10 @@
+﻿{
+    "Logging": {
+        "IncludeScopes": false,
+        "LogLevel": {
+            "Default": "Debug",
+            "System": "Information",
+            "Microsoft": "Information"
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/RegistrationServer/appsettings.json b/Applications/RegistrationServer/appsettings.json
new file mode 100755
index 0000000..2929763
--- /dev/null
+++ b/Applications/RegistrationServer/appsettings.json
@@ -0,0 +1,8 @@
+﻿{
+    "Logging": {
+        "IncludeScopes": false,
+        "LogLevel": {
+            "Default": "Warning"
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/TimesheetsServer/Program.cs b/Applications/TimesheetsServer/Program.cs
new file mode 100755
index 0000000..085cd4f
--- /dev/null
+++ b/Applications/TimesheetsServer/Program.cs
@@ -0,0 +1,23 @@
+﻿using Microsoft.AspNetCore;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.Configuration;
+
+namespace TimesheetsServer
+{
+    public class Program
+    {
+        public static void Main(string[] args)
+        {
+            BuildWebHost(args).Run();
+        }
+
+        public static IWebHost BuildWebHost(string[] args) =>
+            WebHostBuilder(args).Build();
+
+        public static IWebHostBuilder WebHostBuilder(string[] args) =>
+            WebHost.CreateDefaultBuilder(args)
+                // https://github.com/aspnet/KestrelHttpServer/issues/1998#issuecomment-322922164
+                .UseConfiguration(new ConfigurationBuilder().AddCommandLine(args).Build())
+                .UseStartup<Startup>();
+    }
+}
\ No newline at end of file
diff --git a/Applications/TimesheetsServer/Startup.cs b/Applications/TimesheetsServer/Startup.cs
new file mode 100755
index 0000000..8fa885a
--- /dev/null
+++ b/Applications/TimesheetsServer/Startup.cs
@@ -0,0 +1,52 @@
+﻿using System;
+using System.Net.Http;
+using DatabaseSupport;
+using Microsoft.AspNetCore.Builder;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.Configuration;
+using Microsoft.Extensions.DependencyInjection;
+using Microsoft.Extensions.Logging;
+using Timesheets;
+
+namespace TimesheetsServer
+{
+    public class Startup
+    {
+        public Startup(IConfiguration configuration)
+        {
+            Configuration = configuration;
+        }
+
+        public IConfiguration Configuration { get; }
+
+        // This method gets called by the runtime. Use this method to add services to the container.
+        public void ConfigureServices(IServiceCollection services)
+        {
+            // Add framework services.
+            services.AddMvc();
+
+            services.AddSingleton<IDataSourceConfig, DataSourceConfig>();
+            services.AddSingleton<IDatabaseTemplate, DatabaseTemplate>();
+            services.AddSingleton<ITimeEntryDataGateway, TimeEntryDataGateway>();
+            
+            services.AddSingleton<IProjectClient>(sp =>
+            {
+                var httpClient = new HttpClient
+                {
+                    BaseAddress = new Uri(Configuration.GetValue<string>("REGISTRATION_SERVER_ENDPOINT"))
+                };
+
+                return new ProjectClient(httpClient);
+            });
+        }
+
+        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
+        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
+        {
+            loggerFactory.AddConsole(Configuration.GetSection("Logging"));
+            loggerFactory.AddDebug();
+
+            app.UseMvc();
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/TimesheetsServer/TimesheetsServer.csproj b/Applications/TimesheetsServer/TimesheetsServer.csproj
new file mode 100755
index 0000000..df92a0d
--- /dev/null
+++ b/Applications/TimesheetsServer/TimesheetsServer.csproj
@@ -0,0 +1,19 @@
+﻿<Project Sdk="Microsoft.NET.Sdk.Web">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <Folder Include="wwwroot\" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="../../Components/Timesheets/Timesheets.csproj" />
+    <ProjectReference Include="../../Components/DatabaseSupport/DatabaseSupport.csproj" />
+    <ProjectReference Include="../../Components/DefaultRoute/DefaultRoute.csproj" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="Microsoft.Extensions.Configuration.CommandLine" Version="2.0.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Applications/TimesheetsServer/appsettings.Development.json b/Applications/TimesheetsServer/appsettings.Development.json
new file mode 100755
index 0000000..c7038dd
--- /dev/null
+++ b/Applications/TimesheetsServer/appsettings.Development.json
@@ -0,0 +1,10 @@
+﻿{
+    "Logging": {
+        "IncludeScopes": false,
+        "LogLevel": {
+            "Default": "Debug",
+            "System": "Information",
+            "Microsoft": "Information"
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/TimesheetsServer/appsettings.json b/Applications/TimesheetsServer/appsettings.json
new file mode 100755
index 0000000..2929763
--- /dev/null
+++ b/Applications/TimesheetsServer/appsettings.json
@@ -0,0 +1,8 @@
+﻿{
+    "Logging": {
+        "IncludeScopes": false,
+        "LogLevel": {
+            "Default": "Warning"
+        }
+    }
+}
\ No newline at end of file
diff --git a/CI/build.yml b/CI/build.yml
new file mode 100644
index 0000000..5ea4851
--- /dev/null
+++ b/CI/build.yml
@@ -0,0 +1,62 @@
+platform: linux
+
+image_resource:
+  type: docker-image
+  source:
+    repository: microsoft/dotnet
+    tag: '2-sdk'
+    
+inputs:
+  - name: pal-tracker
+  - name: version
+
+outputs:
+  - name: build-output
+
+run:
+  path: bash
+  args:
+  - -exc
+  - |
+  
+    set -e
+  
+    export DEBIAN_FRONTEND="noninteractive"
+    export OUTPUT_DIR=$(realpath .)/build-output
+    export VERSION=$(cat version/number)
+
+    # install and start mysql
+    apt-get update
+    apt-get -y install mysql-server
+    service mysql start
+    
+    # install flyway
+    curl https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/4.2.0/flyway-commandline-4.2.0-linux-x64.tar.gz | tar xvz
+    PATH=$PATH:$(realpath flyway-*)
+        
+    cd pal-tracker
+    
+    # migrate test dbs and run tests
+    mysql -uroot < Databases/create_databases.sql
+    ./migrate-local.sh test 
+    ./test.sh
+        
+    # compile apps 
+    (cd Applications/AllocationsServer && dotnet publish --output $OUTPUT_DIR/allocations/Applications/AllocationsServer/bin/Release/netcoreapp2.0/publish)
+    (cd Applications/BacklogServer && dotnet publish --output $OUTPUT_DIR/backlog/Applications/BacklogServer/bin/Release/netcoreapp2.0/publish)
+    (cd Applications/RegistrationServer && dotnet publish --output $OUTPUT_DIR/registration/Applications/RegistrationServer/bin/Release/netcoreapp2.0/publish)
+    (cd Applications/TimesheetsServer && dotnet publish --output $OUTPUT_DIR/timesheets/Applications/TimesheetsServer/bin/Release/netcoreapp2.0/publish)
+
+    # bundle cf manifest with app
+    cp manifest-allocations.yml $OUTPUT_DIR/allocations/
+    cp manifest-backlog.yml $OUTPUT_DIR/backlog/
+    cp manifest-registration.yml $OUTPUT_DIR/registration/
+    cp manifest-timesheets.yml $OUTPUT_DIR/timesheets/
+
+    # build artifacts
+    tar -cvzf $OUTPUT_DIR/allocations-server-$VERSION.tgz --directory=$OUTPUT_DIR/allocations --remove-files . 
+    tar -cvzf $OUTPUT_DIR/backlog-server-$VERSION.tgz --directory=$OUTPUT_DIR/backlog --remove-files .
+    tar -cvzf $OUTPUT_DIR/registration-server-$VERSION.tgz --directory=$OUTPUT_DIR/registration --remove-files .
+    tar -cvzf $OUTPUT_DIR/timesheets-server-$VERSION.tgz --directory=$OUTPUT_DIR/timesheets --remove-files .
+
+    service mysql stop
\ No newline at end of file
diff --git a/CI/pipeline.yml b/CI/pipeline.yml
new file mode 100644
index 0000000..659b081
--- /dev/null
+++ b/CI/pipeline.yml
@@ -0,0 +1,130 @@
+---
+resources:
+- name: pal-tracker
+  type: git
+  source:
+    uri: {{github-repository}}
+    branch: my-work
+    private_key: {{github-private-key}}
+
+- name: version
+  type: semver
+  source:
+    bucket: {{aws-bucket}}
+    key: pal-tracker/version
+    access_key_id: {{aws-access-key-id}}
+    secret_access_key: {{aws-secret-access-key}}
+
+- name: allocations-artifacts
+  type: s3
+  source:
+    bucket: {{aws-bucket}}
+    regexp: pal-tracker/allocations-server-(.*).tgz
+    access_key_id: {{aws-access-key-id}}
+    secret_access_key: {{aws-secret-access-key}}
+
+- name: backlog-artifacts
+  type: s3
+  source:
+    bucket: {{aws-bucket}}
+    regexp: pal-tracker/backlog-server-(.*).tgz
+    access_key_id: {{aws-access-key-id}}
+    secret_access_key: {{aws-secret-access-key}}
+
+- name: registration-artifacts
+  type: s3
+  source:
+    bucket: {{aws-bucket}}
+    regexp: pal-tracker/registration-server-(.*).tgz
+    access_key_id: {{aws-access-key-id}}
+    secret_access_key: {{aws-secret-access-key}}
+
+- name: timesheets-artifacts
+  type: s3
+  source:
+    bucket: {{aws-bucket}}
+    regexp: pal-tracker/timesheets-server-(.*).tgz
+    access_key_id: {{aws-access-key-id}}
+    secret_access_key: {{aws-secret-access-key}}
+
+- name: cf
+  type: cf
+  source:
+    api: {{cf-api-url}}
+    username: {{cf-username}}
+    password: {{cf-password}}
+    organization: {{cf-org}}
+    space: sandbox
+
+jobs:
+- name: build
+  plan:
+  - get: pal-tracker
+    trigger: true
+  - get: version
+    params: {bump: patch}
+  - task: build and test
+    file: pal-tracker/CI/build.yml
+  - put: allocations-artifacts
+    params:
+      file: build-output/allocations-server-*.tgz
+  - put: backlog-artifacts
+    params:
+      file: build-output/backlog-server-*.tgz
+  - put: registration-artifacts
+    params:
+      file: build-output/registration-server-*.tgz
+  - put: timesheets-artifacts
+    params:
+      file: build-output/timesheets-server-*.tgz
+  - put: version
+    params:
+      file: version/number
+
+- name: deploy-allocations
+  plan:
+  - get: allocations-artifacts
+    params: {unpack: true}
+    trigger: true
+    passed: [build]
+  - put: cf
+    params:
+      manifest: allocations-artifacts/manifest-allocations.yml
+      path: allocations-artifacts
+      current_app_name: tracker-allocations
+
+- name: deploy-backlog
+  plan:
+  - get: backlog-artifacts
+    params: {unpack: true}
+    trigger: true
+    passed: [build]
+  - put: cf
+    params:
+      manifest: backlog-artifacts/manifest-backlog.yml
+      path: backlog-artifacts
+      current_app_name: tracker-backlog
+
+- name: deploy-registration
+  plan:
+  - get: registration-artifacts
+    params: {unpack: true}
+    trigger: true
+    passed: [build]
+  - put: cf
+    params:
+      manifest: registration-artifacts/manifest-registration.yml
+      path: registration-artifacts
+      current_app_name: tracker-registration
+
+- name: deploy-timesheets
+  plan:
+  - get: timesheets-artifacts
+    params: {unpack: true}
+    trigger: true
+    passed: [build]
+  - put: cf
+    params:
+      manifest: timesheets-artifacts/manifest-timesheets.yml
+      path: timesheets-artifacts
+      current_app_name: tracker-timesheets
diff --git a/CI/variables.example.yml b/CI/variables.example.yml
new file mode 100644
index 0000000..ccff6b1
--- /dev/null
+++ b/CI/variables.example.yml
@@ -0,0 +1,12 @@
+cf-api-url: CF_API_URL
+cf-username: CF_USERNAME
+cf-password: CF_PASSWORD
+cf-org: CF_ORG
+aws-access-key-id: AWS_ACCESS_KEY
+aws-secret-access-key: AWS_SECRET_KEY
+aws-bucket: AWS_S3_BUCKET
+github-repository: git@github.com:GITHUB_USERNAME/pal-tracker-distributed-dotnet.git
+github-private-key: |
+  -----BEGIN RSA PRIVATE KEY-----
+  REPLACE WITH YOUR PRIVATE KEY HERE
+  -----END RSA PRIVATE KEY-----
diff --git a/Components/Accounts/AccountController.cs b/Components/Accounts/AccountController.cs
new file mode 100644
index 0000000..e19ed13
--- /dev/null
+++ b/Components/Accounts/AccountController.cs
@@ -0,0 +1,26 @@
+﻿using System.Linq;
+using Microsoft.AspNetCore.Mvc;
+
+namespace Accounts
+{
+    [Route("accounts"), Produces("application/json")]
+    public class AccountController : Controller
+    {
+        private readonly IAccountDataGateway _gateway;
+
+        public AccountController(IAccountDataGateway gateway)
+        {
+            _gateway = gateway;
+        }
+
+        [HttpGet]
+        public IActionResult Get([FromQuery] int ownerId)
+        {
+            var list = _gateway.FindBy(ownerId).Select(record => new AccountInfo(record.Id, record.OwnerId, record.Name,
+                    "account info"))
+                .ToList();
+
+            return Ok(list);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Accounts/AccountDataGateway.cs b/Components/Accounts/AccountDataGateway.cs
new file mode 100644
index 0000000..4b6ac0b
--- /dev/null
+++ b/Components/Accounts/AccountDataGateway.cs
@@ -0,0 +1,38 @@
+﻿using System.Collections.Generic;
+using System.Linq;
+using DatabaseSupport;
+
+namespace Accounts
+{
+    public class AccountDataGateway : IAccountDataGateway
+    {
+        private readonly IDatabaseTemplate _template;
+
+        public AccountDataGateway(IDatabaseTemplate template)
+        {
+            _template = template;
+        }
+
+        public AccountRecord Create(long ownerId, string name)
+        {
+            var sql = "insert into accounts (owner_id, name) values (@ownerId, @name)";
+
+            return _template.Create(sql, id => new AccountRecord(id, ownerId, name),
+                new KeyValuePair<string, object>("@ownerId", ownerId),
+                new KeyValuePair<string, object>("@name", name));
+        }
+
+        public List<AccountRecord> FindBy(long ownerId)
+        {
+            var sql = "select id, owner_id, name from accounts where owner_id = @ownerId";
+
+            var records = _template.FindBy(sql, reader => new AccountRecord(
+                reader.GetInt64(0),
+                reader.GetInt64(1),
+                reader.GetString(2)
+            ), "@ownerId", ownerId);
+            
+            return records;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Accounts/AccountInfo.cs b/Components/Accounts/AccountInfo.cs
new file mode 100755
index 0000000..7c576d7
--- /dev/null
+++ b/Components/Accounts/AccountInfo.cs
@@ -0,0 +1,18 @@
+﻿namespace Accounts
+{
+    public class AccountInfo
+    {
+        public long Id { get; }
+        public long OwnerId { get; }
+        public string Name { get; }
+        public string Info { get; }
+
+        public AccountInfo(long id, long ownerId, string name, string info)
+        {
+            Id = id;
+            OwnerId = ownerId;
+            Name = name;
+            Info = info;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Accounts/AccountRecord.cs b/Components/Accounts/AccountRecord.cs
new file mode 100644
index 0000000..34e927e
--- /dev/null
+++ b/Components/Accounts/AccountRecord.cs
@@ -0,0 +1,16 @@
+﻿namespace Accounts
+{
+    public class AccountRecord
+    {
+        public long Id { get; }
+        public long OwnerId { get; }
+        public string Name { get; }
+
+        public AccountRecord(long id, long ownerId, string name)
+        {
+            Id = id;
+            OwnerId = ownerId;
+            Name = name;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Accounts/Accounts.csproj b/Components/Accounts/Accounts.csproj
new file mode 100755
index 0000000..2daa9c4
--- /dev/null
+++ b/Components/Accounts/Accounts.csproj
@@ -0,0 +1,15 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj" />
+    <ProjectReference Include="../Users/Users.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/Accounts/IAccountDataGateway.cs b/Components/Accounts/IAccountDataGateway.cs
new file mode 100644
index 0000000..64882e2
--- /dev/null
+++ b/Components/Accounts/IAccountDataGateway.cs
@@ -0,0 +1,11 @@
+﻿using System.Collections.Generic;
+
+namespace Accounts
+{
+    public interface IAccountDataGateway
+    {
+        AccountRecord Create(long ownerId, string name);
+
+        List<AccountRecord> FindBy(long ownerId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Accounts/IRegistrationService.cs b/Components/Accounts/IRegistrationService.cs
new file mode 100644
index 0000000..ed0b6f9
--- /dev/null
+++ b/Components/Accounts/IRegistrationService.cs
@@ -0,0 +1,9 @@
+﻿using Users;
+
+namespace Accounts
+{
+    public interface IRegistrationService
+    {
+        UserRecord CreateUserWithAccount(string name);
+    }
+}
\ No newline at end of file
diff --git a/Components/Accounts/RegistrationController.cs b/Components/Accounts/RegistrationController.cs
new file mode 100644
index 0000000..36b88de
--- /dev/null
+++ b/Components/Accounts/RegistrationController.cs
@@ -0,0 +1,24 @@
+﻿using Microsoft.AspNetCore.Mvc;
+using Users;
+
+namespace Accounts
+{
+    [Route("registration"), Produces("application/json")]
+    public class RegisationController : Controller
+    {
+        private readonly IRegistrationService _service;
+
+        public RegisationController(IRegistrationService service)
+        {
+            _service = service;
+        }
+
+        [HttpPost]
+        public IActionResult Post([FromBody] UserInfo info)
+        {
+            var record = _service.CreateUserWithAccount(info.Name);
+            var value = new UserInfo(record.Id, record.Name, "registration info");
+            return Created($"registration/{value.Id}", value);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Accounts/RegistrationService.cs b/Components/Accounts/RegistrationService.cs
new file mode 100644
index 0000000..496a971
--- /dev/null
+++ b/Components/Accounts/RegistrationService.cs
@@ -0,0 +1,24 @@
+﻿using Users;
+
+namespace Accounts
+{
+    public class RegistrationService : IRegistrationService
+    {
+        private readonly IUserDataGateway _userDataGateway;
+        private readonly IAccountDataGateway _accountDataGateway;
+
+        public RegistrationService(IUserDataGateway userDataGateway, IAccountDataGateway accountDataGateway)
+        {
+            _userDataGateway = userDataGateway;
+            _accountDataGateway = accountDataGateway;
+        }
+
+        public UserRecord CreateUserWithAccount(string name)
+        {
+            // todo - make transactional
+            var user = _userDataGateway.Create(name);
+            _accountDataGateway.Create(user.Id, $"{name}'s account");
+            return user;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/AccountsTest/AccountControllerTest.cs b/Components/AccountsTest/AccountControllerTest.cs
new file mode 100755
index 0000000..cc11310
--- /dev/null
+++ b/Components/AccountsTest/AccountControllerTest.cs
@@ -0,0 +1,44 @@
+using System.Collections.Generic;
+using Accounts;
+using DatabaseSupport;
+using Microsoft.AspNetCore.Mvc;
+using TestSupport;
+using Xunit;
+
+namespace AccountsTest
+{
+    [Collection("Accounts")]
+    public class AccountControllerTest
+    {
+        private readonly DataSourceConfig _dataSourceConfig = new DataSourceConfig();
+        private readonly TestDatabaseSupport _support = new TestDatabaseSupport();
+
+        static AccountControllerTest() => TestEnvSupport.SetRegistrationVcap();
+        public AccountControllerTest() => _support.TruncateAllTables();
+
+        [Fact]
+        public void TestGet()
+        {
+            _support.ExecSql("insert into users (id, name) values (4765, 'Jack'), (4766, 'Fred');");
+            _support.ExecSql(@"insert into accounts (id, owner_id, name) 
+            values (1673, 4765, 'Jack''s account'), (1674, 4765, 'Jack''s other account'), 
+            (1675, 4766, 'Fred''s account');");
+
+            var controller =
+                new AccountController(new AccountDataGateway(new DatabaseTemplate(_dataSourceConfig)));
+            var result = controller.Get(4765);
+
+            var info = (List<AccountInfo>) ((ObjectResult) result).Value;
+
+            Assert.Equal(2, info.Count);
+            Assert.Equal(1673, info[0].Id);
+            Assert.Equal(4765, info[0].OwnerId);
+            Assert.Equal("Jack's account", info[0].Name);
+            Assert.Equal("account info", info[0].Info);
+            Assert.Equal(1674, info[1].Id);
+            Assert.Equal(4765, info[1].OwnerId);
+            Assert.Equal("Jack's other account", info[1].Name);
+            Assert.Equal("account info", info[1].Info);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/AccountsTest/AccountDataGatewayTest.cs b/Components/AccountsTest/AccountDataGatewayTest.cs
new file mode 100755
index 0000000..1f2597f
--- /dev/null
+++ b/Components/AccountsTest/AccountDataGatewayTest.cs
@@ -0,0 +1,55 @@
+using System.Collections.Generic;
+using System.Data.Common;
+using System.Linq;
+using Accounts;
+using DatabaseSupport;
+using TestSupport;
+using Xunit;
+
+namespace AccountsTest
+{
+    [Collection("Accounts")]
+    public class AccountDataGatewayTest
+    {
+        private readonly DataSourceConfig _dataSourceConfig = new DataSourceConfig();
+        private readonly TestDatabaseSupport _support = new TestDatabaseSupport();
+
+        static AccountDataGatewayTest() => TestEnvSupport.SetRegistrationVcap();
+        public AccountDataGatewayTest() => _support.TruncateAllTables();
+        
+        [Fact]
+        public void TestCreate()
+        {
+            _support.ExecSql("insert into users (id, name) values (12, 'Jack');");
+
+            var template = new DatabaseTemplate(_dataSourceConfig);
+            var gateway = new AccountDataGateway(template);
+            gateway.Create(12, "anAccount");
+
+            var names = template.Query("select name from accounts", reader => reader.GetString(0),
+                new List<DbParameter>());
+
+            Assert.Equal("anAccount", names.First());
+        }
+
+        [Fact]
+        public void TestFindBy()
+        {
+            _support.ExecSql(@"
+insert into users (id, name) values (12, 'Jack');
+insert into accounts (id, owner_id, name) values (1, 12, 'anAccount'), (2, 12, 'anotherAccount');
+");
+
+            var gateway = new AccountDataGateway(new DatabaseTemplate(_dataSourceConfig));
+
+            var actual = gateway.FindBy(12);
+
+            Assert.Equal(1, actual[0].Id);
+            Assert.Equal(12, actual[0].OwnerId);
+            Assert.Equal("anAccount", actual[0].Name);
+            Assert.Equal(2, actual[1].Id);
+            Assert.Equal(12, actual[1].OwnerId);
+            Assert.Equal("anotherAccount", actual[1].Name);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/AccountsTest/AccountsTest.csproj b/Components/AccountsTest/AccountsTest.csproj
new file mode 100755
index 0000000..302c3dc
--- /dev/null
+++ b/Components/AccountsTest/AccountsTest.csproj
@@ -0,0 +1,17 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <ProjectReference Include="../Accounts/Accounts.csproj" />
+    <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj" />
+    <ProjectReference Include="../TestSupport/TestSupport.csproj" />
+    <ProjectReference Include="../Users/Users.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.0.0" />
+    <PackageReference Include="xunit" Version="2.2.0" />
+    <PackageReference Include="xunit.runner.visualstudio" Version="2.2.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/AccountsTest/RegistrationControllerTest.cs b/Components/AccountsTest/RegistrationControllerTest.cs
new file mode 100755
index 0000000..3e00056
--- /dev/null
+++ b/Components/AccountsTest/RegistrationControllerTest.cs
@@ -0,0 +1,39 @@
+using Accounts;
+using DatabaseSupport;
+using Microsoft.AspNetCore.Mvc;
+using TestSupport;
+using Users;
+using Xunit;
+
+namespace AccountsTest
+{
+    [Collection("Accounts")]
+    public class RegistrationControllerTest
+    {
+        private readonly DataSourceConfig _dataSourceConfig = new DataSourceConfig();
+        private readonly TestDatabaseSupport _support = new TestDatabaseSupport();
+
+        static RegistrationControllerTest() => TestEnvSupport.SetRegistrationVcap();
+        public RegistrationControllerTest() => _support.TruncateAllTables(); 
+
+        [Fact]
+        public void TestPost()
+        {
+            _support.ExecSql("insert into users (id, name) values (4765, 'Jack'), (4766, 'Fred');");
+            _support.ExecSql(@"insert into accounts (id, owner_id, name) 
+            values (1673, 4765, 'Jack''s account'), (1674, 4766, 'Fred''s account');");
+
+            var userDataGateway = new UserDataGateway(new DatabaseTemplate(_dataSourceConfig));
+            var accountDataGateway = new AccountDataGateway(new DatabaseTemplate(_dataSourceConfig));
+            var service = new RegistrationService(userDataGateway, accountDataGateway);
+
+            var controller = new RegisationController(service);
+            var value = controller.Post(new UserInfo(-1, "aUser", ""));
+            var actual = (UserInfo) ((ObjectResult) value).Value;
+
+            Assert.True(actual.Id > 0);
+            Assert.Equal("aUser", actual.Name);
+            Assert.Equal("registration info", actual.Info);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/AccountsTest/RegistrationServiceTest.cs b/Components/AccountsTest/RegistrationServiceTest.cs
new file mode 100755
index 0000000..665ebb5
--- /dev/null
+++ b/Components/AccountsTest/RegistrationServiceTest.cs
@@ -0,0 +1,30 @@
+using Accounts;
+using DatabaseSupport;
+using TestSupport;
+using Users;
+using Xunit;
+
+namespace AccountsTest
+{
+    [Collection("Accounts")]
+    public class RegistrationServiceTest
+    {
+        private readonly DataSourceConfig _dataSourceConfig = new DataSourceConfig();
+        private readonly TestDatabaseSupport _support = new TestDatabaseSupport();
+
+        static RegistrationServiceTest() => TestEnvSupport.SetRegistrationVcap();
+        public RegistrationServiceTest() => _support.TruncateAllTables();
+
+        [Fact]
+        public void TestFindBy()
+        {
+            var userDataGateway = new UserDataGateway(new DatabaseTemplate(_dataSourceConfig));
+            var accountDataGateway = new AccountDataGateway(new DatabaseTemplate(_dataSourceConfig));
+            var service = new RegistrationService(userDataGateway, accountDataGateway);
+
+            var info = service.CreateUserWithAccount("aUser");
+
+            Assert.Equal("aUser", info.Name);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/AllocationController.cs b/Components/Allocations/AllocationController.cs
new file mode 100755
index 0000000..06384d7
--- /dev/null
+++ b/Components/Allocations/AllocationController.cs
@@ -0,0 +1,45 @@
+﻿using System.Linq;
+using Microsoft.AspNetCore.Mvc;
+
+namespace Allocations
+{
+    [Route("allocations"), Produces("application/json")]
+    public class AllocationController : Controller
+    {
+        private readonly IAllocationDataGateway _gateway;
+        private readonly IProjectClient _client;
+
+        public AllocationController(IAllocationDataGateway gateway, IProjectClient client)
+        {
+            _gateway = gateway;
+            _client = client;
+        }
+
+        [HttpGet]
+        public IActionResult Get([FromQuery] int projectId)
+        {
+            var records = _gateway.FindBy(projectId);
+            var list = records.Select(record => new AllocationInfo(record.Id, record.ProjectId, record.UserId,
+                    record.FirstDay, record.LastDay, "allocation info"))
+                .ToList();
+            return Ok(list);
+        }
+
+        [HttpPost]
+        public IActionResult Post([FromBody] AllocationInfo info)
+        {
+            if (!ProjectIsActive(info.ProjectId)) return new StatusCodeResult(304);
+
+            var record = _gateway.Create(info.ProjectId, info.UserId, info.FirstDay, info.LastDay);
+            var value = new AllocationInfo(record.Id, record.ProjectId, record.UserId, record.FirstDay, record.LastDay,
+                "allocation info");
+            return Created($"allocations/{value.Id}", value);
+        }
+
+        private bool ProjectIsActive(long projectId)
+        {
+            var info = _client.Get(projectId);
+            return info.Result?.Active ?? false;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/AllocationDataGateway.cs b/Components/Allocations/AllocationDataGateway.cs
new file mode 100644
index 0000000..1f5cfb0
--- /dev/null
+++ b/Components/Allocations/AllocationDataGateway.cs
@@ -0,0 +1,43 @@
+﻿using System;
+using System.Collections.Generic;
+using DatabaseSupport;
+
+namespace Allocations
+{
+    public class AllocationDataGateway : IAllocationDataGateway
+    {
+        private readonly IDatabaseTemplate _template;
+
+        public AllocationDataGateway(IDatabaseTemplate template)
+        {
+            _template = template;
+        }
+
+        public AllocationRecord Create(long projectId, long userId, DateTime firstDay, DateTime lastDay)
+        {
+            var sql = @"
+insert into allocations (project_id, user_id, first_day, last_day) values (@projectId, @userId, @firstDay, @lastDay)";
+
+            return _template.Create(sql, id => new AllocationRecord(id, projectId, userId, firstDay, lastDay),
+                new KeyValuePair<string, object>("@projectId", projectId),
+                new KeyValuePair<string, object>("@userId", userId),
+                new KeyValuePair<string, object>("@firstDay", firstDay),
+                new KeyValuePair<string, object>("@lastDay", lastDay)
+            );
+        }
+
+        public List<AllocationRecord> FindBy(long projectId)
+        {
+            const string sql = @"
+select id, project_id, user_id, first_day, last_day from allocations where project_id = @projectId order by first_day";
+
+            return _template.FindBy(sql, reader => new AllocationRecord(
+                reader.GetInt64(0),
+                reader.GetInt64(1),
+                reader.GetInt64(2),
+                reader.GetDateTime(3),
+                reader.GetDateTime(4)
+            ), "@projectId", projectId);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/AllocationInfo.cs b/Components/Allocations/AllocationInfo.cs
new file mode 100755
index 0000000..6d67091
--- /dev/null
+++ b/Components/Allocations/AllocationInfo.cs
@@ -0,0 +1,25 @@
+﻿using System;
+
+namespace Allocations
+{
+    public class AllocationInfo
+    {
+        public long Id { get; }
+        public long ProjectId { get; }
+        public long UserId { get; }
+        public DateTime FirstDay { get; }
+        public DateTime LastDay { get; }
+        public string Info { get; }
+
+
+        public AllocationInfo(long id, long projectId, long userId, DateTime firstDay, DateTime lastDay, string info)
+        {
+            Id = id;
+            ProjectId = projectId;
+            UserId = userId;
+            FirstDay = firstDay;
+            LastDay = lastDay;
+            Info = info;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/AllocationRecord.cs b/Components/Allocations/AllocationRecord.cs
new file mode 100644
index 0000000..0cc0a4b
--- /dev/null
+++ b/Components/Allocations/AllocationRecord.cs
@@ -0,0 +1,23 @@
+﻿using System;
+
+namespace Allocations
+{
+    public class AllocationRecord
+    {
+        public long Id { get; }
+        public long ProjectId { get; }
+        public long UserId { get; }
+        public DateTime FirstDay { get; }
+        public DateTime LastDay { get; }
+
+
+        public AllocationRecord(long id, long projectId, long userId, DateTime firstDay, DateTime lastDay)
+        {
+            Id = id;
+            ProjectId = projectId;
+            UserId = userId;
+            FirstDay = firstDay;
+            LastDay = lastDay;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/Allocations.csproj b/Components/Allocations/Allocations.csproj
new file mode 100755
index 0000000..e7dac9d
--- /dev/null
+++ b/Components/Allocations/Allocations.csproj
@@ -0,0 +1,15 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="System.Runtime.Serialization.Json" Version="4.3.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/Allocations/IAllocationDataGateway.cs b/Components/Allocations/IAllocationDataGateway.cs
new file mode 100644
index 0000000..bb20212
--- /dev/null
+++ b/Components/Allocations/IAllocationDataGateway.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+
+namespace Allocations
+{
+    public interface IAllocationDataGateway
+    {
+        AllocationRecord Create(long projectId, long userId, DateTime firstDay, DateTime lastDay);
+
+        List<AllocationRecord> FindBy(long projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/IProjectClient.cs b/Components/Allocations/IProjectClient.cs
new file mode 100644
index 0000000..dfccb9b
--- /dev/null
+++ b/Components/Allocations/IProjectClient.cs
@@ -0,0 +1,9 @@
+﻿using System.Threading.Tasks;
+
+namespace Allocations
+{
+    public interface IProjectClient
+    {
+        Task<ProjectInfo> Get(long projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/ProjectClient.cs b/Components/Allocations/ProjectClient.cs
new file mode 100644
index 0000000..3a141d7
--- /dev/null
+++ b/Components/Allocations/ProjectClient.cs
@@ -0,0 +1,25 @@
+﻿using System.Net.Http;
+using System.Runtime.Serialization.Json;
+using System.Threading.Tasks;
+
+namespace Allocations
+{
+    public class ProjectClient : IProjectClient
+    {
+        private readonly HttpClient _client;
+
+        public ProjectClient(HttpClient client)
+        {
+            _client = client;
+        }
+
+        public async Task<ProjectInfo> Get(long projectId)
+        {
+            _client.DefaultRequestHeaders.Accept.Clear();
+            var streamTask = _client.GetStreamAsync($"project?projectId={projectId}");
+
+            var serializer = new DataContractJsonSerializer(typeof(ProjectInfo));
+            return serializer.ReadObject(await streamTask) as ProjectInfo;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/ProjectInfo.cs b/Components/Allocations/ProjectInfo.cs
new file mode 100644
index 0000000..8b4ca90
--- /dev/null
+++ b/Components/Allocations/ProjectInfo.cs
@@ -0,0 +1,16 @@
+﻿using System.Runtime.Serialization;
+
+namespace Allocations
+{
+    [DataContract(Name="info")]
+    public class ProjectInfo
+    {
+        [DataMember(Name="active")]
+        public bool Active { get; set; }
+
+        public ProjectInfo(bool active)
+        {
+            Active = active;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/AllocationsTest/AllocationsControllerTest.cs b/Components/AllocationsTest/AllocationsControllerTest.cs
new file mode 100644
index 0000000..fe62485
--- /dev/null
+++ b/Components/AllocationsTest/AllocationsControllerTest.cs
@@ -0,0 +1,62 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Net.Http;
+using Allocations;
+using DatabaseSupport;
+using Microsoft.AspNetCore.Mvc;
+using TestSupport;
+using Xunit;
+using static TestSupport.TestServers;
+
+namespace AllocationsTest
+{
+    [Collection("Allocations")]
+    public class AllocationsControllerTest
+    {
+        private readonly DataSourceConfig _dataSourceConfig = new DataSourceConfig();
+        private readonly TestDatabaseSupport _support = new TestDatabaseSupport();
+
+        private readonly HttpClient _client = ActiveProjectServer.CreateClient();
+
+        static AllocationsControllerTest() => TestEnvSupport.SetAllocationsVcap();
+        public AllocationsControllerTest() => _support.TruncateAllTables();
+
+        [Fact]
+        public void TestPost()
+        {
+            _support.ExecSql(@"insert into allocations (id, project_id, user_id, first_day, last_day) values 
+                (754, 55432, 4765, '2015-05-17', '2015-05-18'), 
+                (755, 55432, 4766, '2015-05-17', '2015-05-18');");
+
+            var controller =
+                new AllocationController(new AllocationDataGateway(new DatabaseTemplate(_dataSourceConfig)),
+                    new ProjectClient(_client));
+
+            var value = controller.Post(new AllocationInfo(-1, 55432, 4765, DateTime.Parse("2014-05-16"),
+                DateTime.Parse("2014-05-26"), ""));
+            var actual = (AllocationInfo) ((ObjectResult) value).Value;
+
+            Assert.True(actual.Id > 0);
+            Assert.Equal(55432L, actual.ProjectId);
+            Assert.Equal(4765L, actual.UserId);
+            Assert.Equal(16, actual.FirstDay.Day);
+            Assert.Equal(26, actual.LastDay.Day);
+            Assert.Equal("allocation info", actual.Info);
+        }
+
+        [Fact]
+        public void TestGet()
+        {
+            _support.ExecSql(@"insert into allocations (id, project_id, user_id, first_day, last_day) values 
+                (754, 55432, 4765, '2015-05-17', '2015-05-18'), 
+                (755, 55432, 4766, '2015-05-17', '2015-05-18');");
+
+            var controller =
+                new AllocationController(new AllocationDataGateway(new DatabaseTemplate(_dataSourceConfig)), null);
+            var result = controller.Get(55432);
+
+            // todo...
+            Assert.Equal(2, ((List<AllocationInfo>) ((ObjectResult) result).Value).Count);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/AllocationsTest/AllocationsDataGatewayTest.cs b/Components/AllocationsTest/AllocationsDataGatewayTest.cs
new file mode 100755
index 0000000..4c5dd0d
--- /dev/null
+++ b/Components/AllocationsTest/AllocationsDataGatewayTest.cs
@@ -0,0 +1,51 @@
+using System;
+using System.Collections.Generic;
+using System.Data.Common;
+using System.Linq;
+using Allocations;
+using DatabaseSupport;
+using TestSupport;
+using Xunit;
+
+namespace AllocationsTest
+{
+    [Collection("Allocations")]
+    public class AllocationDataGatewayTest
+    {
+        private readonly DataSourceConfig _dataSourceConfig = new DataSourceConfig();
+        private readonly TestDatabaseSupport _support = new TestDatabaseSupport();
+
+        static AllocationDataGatewayTest() => TestEnvSupport.SetAllocationsVcap();
+        public AllocationDataGatewayTest() => _support.TruncateAllTables();
+
+        [Fact]
+        public void TestCreate()
+        {            
+            var gateway = new AllocationDataGateway(new DatabaseTemplate(_dataSourceConfig));
+            gateway.Create(22, 12, DateTime.Now, DateTime.Now);
+
+            // todo...
+            var template = new DatabaseTemplate(_dataSourceConfig);
+            var projectIds = template.Query("select project_id from allocations", reader => reader.GetInt64(0),
+                new List<DbParameter>());
+
+            Assert.Equal(22, projectIds.First());
+        }
+
+        [Fact]
+        public void TestFind()
+        {
+            _support.ExecSql(@"insert into allocations 
+(id, project_id, user_id, first_day, last_day) values (97336, 22, 12, now(), now());");
+
+            var gateway = new AllocationDataGateway(new DatabaseTemplate(_dataSourceConfig));
+            var list = gateway.FindBy(22);
+
+            // todo...
+            var actual = list.First();
+            Assert.Equal(97336, actual.Id);
+            Assert.Equal(22, actual.ProjectId);
+            Assert.Equal(12, actual.UserId);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/AllocationsTest/AllocationsTest.csproj b/Components/AllocationsTest/AllocationsTest.csproj
new file mode 100755
index 0000000..008e340
--- /dev/null
+++ b/Components/AllocationsTest/AllocationsTest.csproj
@@ -0,0 +1,16 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <ProjectReference Include="../Allocations/Allocations.csproj" />
+    <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj" />
+    <ProjectReference Include="../TestSupport/TestSupport.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.0.0" />
+    <PackageReference Include="xunit" Version="2.2.0" />
+    <PackageReference Include="xunit.runner.visualstudio" Version="2.2.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/Backlog/Backlog.csproj b/Components/Backlog/Backlog.csproj
new file mode 100755
index 0000000..e7dac9d
--- /dev/null
+++ b/Components/Backlog/Backlog.csproj
@@ -0,0 +1,15 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="System.Runtime.Serialization.Json" Version="4.3.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/Backlog/IProjectClient.cs b/Components/Backlog/IProjectClient.cs
new file mode 100644
index 0000000..5e0ae15
--- /dev/null
+++ b/Components/Backlog/IProjectClient.cs
@@ -0,0 +1,9 @@
+﻿using System.Threading.Tasks;
+
+namespace Backlog
+{
+    public interface IProjectClient
+    {
+        Task<ProjectInfo> Get(long projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/IStoryDataGateway.cs b/Components/Backlog/IStoryDataGateway.cs
new file mode 100755
index 0000000..ad5988c
--- /dev/null
+++ b/Components/Backlog/IStoryDataGateway.cs
@@ -0,0 +1,11 @@
+﻿using System.Collections.Generic;
+
+namespace Backlog
+{
+    public interface IStoryDataGateway
+    {
+        StoryRecord Create(long projectId, string name);
+
+        List<StoryRecord> FindBy(long projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/ProjectClient.cs b/Components/Backlog/ProjectClient.cs
new file mode 100644
index 0000000..1017b3a
--- /dev/null
+++ b/Components/Backlog/ProjectClient.cs
@@ -0,0 +1,25 @@
+﻿using System.Net.Http;
+using System.Runtime.Serialization.Json;
+using System.Threading.Tasks;
+
+namespace Backlog
+{
+    public class ProjectClient : IProjectClient
+    {
+        private readonly HttpClient _client;
+
+        public ProjectClient(HttpClient client)
+        {
+            _client = client;
+        }
+
+        public async Task<ProjectInfo> Get(long projectId)
+        {
+            _client.DefaultRequestHeaders.Accept.Clear();
+            var streamTask = _client.GetStreamAsync($"project?projectId={projectId}");
+
+            var serializer = new DataContractJsonSerializer(typeof(ProjectInfo));
+            return serializer.ReadObject(await streamTask) as ProjectInfo;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/ProjectInfo.cs b/Components/Backlog/ProjectInfo.cs
new file mode 100644
index 0000000..40f0fa7
--- /dev/null
+++ b/Components/Backlog/ProjectInfo.cs
@@ -0,0 +1,16 @@
+﻿using System.Runtime.Serialization;
+
+namespace Backlog
+{
+    [DataContract(Name="info")]
+    public class ProjectInfo
+    {
+        [DataMember(Name="active")]
+        public bool Active { get; set; }
+
+        public ProjectInfo(bool active)
+        {
+            Active = active;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/StoryController.cs b/Components/Backlog/StoryController.cs
new file mode 100755
index 0000000..844ddc9
--- /dev/null
+++ b/Components/Backlog/StoryController.cs
@@ -0,0 +1,43 @@
+﻿using System.Linq;
+using Microsoft.AspNetCore.Mvc;
+
+namespace Backlog
+{
+    [Route("stories"), Produces("application/json")]
+    public class StoryController : Controller
+    {
+        private readonly IStoryDataGateway _gateway;
+        private readonly IProjectClient _client;
+
+        public StoryController(IStoryDataGateway gateway, IProjectClient client)
+        {
+            _gateway = gateway;
+            _client = client;
+        }
+
+        [HttpGet]
+        public IActionResult Get([FromQuery] int projectId)
+        {
+            var records = _gateway.FindBy(projectId);
+            var list = records.Select(record => new StoryInfo(record.Id, record.ProjectId, record.Name, "story info"))
+                .ToList();
+            return Ok(list);
+        }
+
+        [HttpPost]
+        public IActionResult Post([FromBody] StoryInfo info)
+        {
+            if (!ProjectIsActive(info.ProjectId)) return new StatusCodeResult(304);
+
+            var record = _gateway.Create(info.ProjectId, info.Name);
+            var value = new StoryInfo(record.Id, record.ProjectId, record.Name, "story info");
+            return Created($"stories/{value.Id}", value);
+        }
+
+        private bool ProjectIsActive(long projectId)
+        {
+            var info = _client.Get(projectId);
+            return info.Result?.Active ?? false;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/StoryDataGateway.cs b/Components/Backlog/StoryDataGateway.cs
new file mode 100755
index 0000000..6727c74
--- /dev/null
+++ b/Components/Backlog/StoryDataGateway.cs
@@ -0,0 +1,38 @@
+﻿using System.Collections.Generic;
+using DatabaseSupport;
+
+namespace Backlog
+{
+    public class StoryDataGateway : IStoryDataGateway
+    {
+        private readonly IDatabaseTemplate _template;
+
+        public StoryDataGateway(IDatabaseTemplate template)
+        {
+            _template = template;
+        }
+
+        public StoryRecord Create(long projectId, string name)
+        {
+            var sql = @"
+insert into stories (project_id, name) values (@projectId, @name)";
+
+            return _template.Create(sql, id => new StoryRecord(id, projectId, name),
+                new KeyValuePair<string, object>("@projectId", projectId),
+                new KeyValuePair<string, object>("@name", name)
+            );
+        }
+
+        public List<StoryRecord> FindBy(long projectId)
+        {
+            const string sql = @"
+select id, project_id, name from stories where project_id = @projectId";
+
+            return _template.FindBy(sql, reader => new StoryRecord(
+                reader.GetInt64(0),
+                reader.GetInt64(1),
+                reader.GetString(2)
+            ), "@projectId", projectId);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/StoryInfo.cs b/Components/Backlog/StoryInfo.cs
new file mode 100755
index 0000000..fa9331c
--- /dev/null
+++ b/Components/Backlog/StoryInfo.cs
@@ -0,0 +1,19 @@
+﻿namespace Backlog
+{
+    public class StoryInfo
+    {
+        public long Id { get; }
+        public long ProjectId { get; }
+        public string Name { get; }
+        public string Info { get; }
+
+
+        public StoryInfo(long id, long projectId, string name, string info)
+        {
+            Id = id;
+            ProjectId = projectId;
+            Name = name;
+            Info = info;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/StoryRecord.cs b/Components/Backlog/StoryRecord.cs
new file mode 100755
index 0000000..98a8b6c
--- /dev/null
+++ b/Components/Backlog/StoryRecord.cs
@@ -0,0 +1,17 @@
+﻿namespace Backlog
+{
+    public class StoryRecord
+    {
+        public long Id { get; }
+        public long ProjectId { get; }
+        public string Name { get; }
+
+
+        public StoryRecord(long id, long projectId, string name)
+        {
+            Id = id;
+            ProjectId = projectId;
+            Name = name;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/BacklogTest/BacklogTest.csproj b/Components/BacklogTest/BacklogTest.csproj
new file mode 100755
index 0000000..b6b3501
--- /dev/null
+++ b/Components/BacklogTest/BacklogTest.csproj
@@ -0,0 +1,16 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <ProjectReference Include="../Backlog/Backlog.csproj" />
+    <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj" />
+    <ProjectReference Include="../TestSupport/TestSupport.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.0.0" />
+    <PackageReference Include="xunit" Version="2.2.0" />
+    <PackageReference Include="xunit.runner.visualstudio" Version="2.2.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/BacklogTest/StoryControllerTest.cs b/Components/BacklogTest/StoryControllerTest.cs
new file mode 100755
index 0000000..d027fad
--- /dev/null
+++ b/Components/BacklogTest/StoryControllerTest.cs
@@ -0,0 +1,58 @@
+using System.Collections.Generic;
+using System.Net.Http;
+using Backlog;
+using DatabaseSupport;
+using Microsoft.AspNetCore.Mvc;
+using TestSupport;
+using Xunit;
+using static TestSupport.TestServers;
+
+namespace BacklogTest
+{
+    [Collection("Backlog")]
+    public class StoryControllerTest
+    {
+        private readonly DataSourceConfig _dataSourceConfig = new DataSourceConfig();
+        private readonly TestDatabaseSupport _support = new TestDatabaseSupport();
+
+        private readonly HttpClient _client = ActiveProjectServer.CreateClient();
+
+        static StoryControllerTest() => TestEnvSupport.SetBacklogVcap();
+        public StoryControllerTest() => _support.TruncateAllTables();
+
+        private const string _sql = @"insert into stories (id, project_id, name) values (876, 55432, 'An epic story'), 
+            (877, 55432, 'Another epic story');";
+
+        [Fact]
+        public void TestPost()
+        {
+            _support.ExecSql(_sql);
+
+            var controller =
+                new StoryController(new StoryDataGateway(new DatabaseTemplate(_dataSourceConfig)),
+                    new ProjectClient(_client));
+
+            var value = controller.Post(new StoryInfo(-1, 55432, "An epic story", ""));
+            var actual = (StoryInfo) ((ObjectResult) value).Value;
+
+            Assert.True(actual.Id > 0);
+            Assert.Equal(55432, actual.ProjectId);
+            Assert.Equal("An epic story", actual.Name);
+            Assert.Equal("story info", actual.Info);
+        }
+
+        [Fact]
+        public void TestGet()
+        {
+            _support.ExecSql(_sql);
+
+            var controller =
+                new StoryController(new StoryDataGateway(new DatabaseTemplate(_dataSourceConfig)),
+                    new ProjectClient(_client));
+            var result = controller.Get(55432);
+
+            // todo...
+            Assert.Equal(2, ((List<StoryInfo>) ((ObjectResult) result).Value).Count);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/BacklogTest/StoryDataGatewayTest.cs b/Components/BacklogTest/StoryDataGatewayTest.cs
new file mode 100755
index 0000000..84b46c9
--- /dev/null
+++ b/Components/BacklogTest/StoryDataGatewayTest.cs
@@ -0,0 +1,49 @@
+using System.Collections.Generic;
+using System.Data.Common;
+using System.Linq;
+using Backlog;
+using DatabaseSupport;
+using TestSupport;
+using Xunit;
+
+namespace BacklogTest
+{
+    [Collection("Backlog")]
+    public class StoryDataGatewayTest
+    {
+        private readonly DataSourceConfig _dataSourceConfig = new DataSourceConfig();
+        private readonly TestDatabaseSupport _support = new TestDatabaseSupport();
+
+        static StoryDataGatewayTest() => TestEnvSupport.SetBacklogVcap();
+        public StoryDataGatewayTest() => _support.TruncateAllTables();
+
+        [Fact]
+        public void TestCreate()
+        {
+            var gateway = new StoryDataGateway(new DatabaseTemplate(_dataSourceConfig));
+            gateway.Create(22, "aStory");
+
+            // todo...
+            var template = new DatabaseTemplate(_dataSourceConfig);
+            var projectIds = template.Query("select project_id from stories", reader => reader.GetInt64(0),
+                new List<DbParameter>());
+
+            Assert.Equal(22, projectIds.First());
+        }
+
+        [Fact]
+        public void TestFind()
+        {
+            _support.ExecSql("insert into stories (id, project_id, name) values (1346, 22, 'aStory');");
+
+            var gateway = new StoryDataGateway(new DatabaseTemplate(_dataSourceConfig));
+            var list = gateway.FindBy(22);
+
+            // todo...
+            var actual = list.First();
+            Assert.Equal(1346, actual.Id);
+            Assert.Equal(22, actual.ProjectId);
+            Assert.Equal("aStory", actual.Name);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/DatabaseSupport/DataSourceConfig.cs b/Components/DatabaseSupport/DataSourceConfig.cs
new file mode 100755
index 0000000..a13cb3f
--- /dev/null
+++ b/Components/DatabaseSupport/DataSourceConfig.cs
@@ -0,0 +1,30 @@
+﻿using System;
+using System.Data.Common;
+using MySql.Data.MySqlClient;
+using Newtonsoft.Json.Linq;
+
+namespace DatabaseSupport
+{
+    public class DataSourceConfig : IDataSourceConfig
+    {
+        public DbConnection GetConnection()
+        {
+            var json = Environment.GetEnvironmentVariable("VCAP_SERVICES");
+            var connection = GetConnectionString(json);
+            return new MySqlConnection(connection); // todo - use db pool lib?
+        }
+
+        private static string GetConnectionString(string json)
+        {
+            var services = JObject.Parse(json);
+            var credentials = services["p-mysql"].First["credentials"];
+            var host = credentials["hostname"];
+            var port = credentials["port"];
+            var database = credentials["name"];
+            var user = credentials["username"];
+            var password = credentials["password"];
+
+            return $"Server={host};User id={user};password={password};Port={port};Database={database};";
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/DatabaseSupport/DatabaseSupport.csproj b/Components/DatabaseSupport/DatabaseSupport.csproj
new file mode 100755
index 0000000..fe25432
--- /dev/null
+++ b/Components/DatabaseSupport/DatabaseSupport.csproj
@@ -0,0 +1,10 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+    <PackageReference Include="Newtonsoft.Json" Version="9.0.1" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/DatabaseSupport/DatabaseTemplate.cs b/Components/DatabaseSupport/DatabaseTemplate.cs
new file mode 100644
index 0000000..c0ab70b
--- /dev/null
+++ b/Components/DatabaseSupport/DatabaseTemplate.cs
@@ -0,0 +1,115 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Data;
+using System.Data.Common;
+using MySql.Data.MySqlClient;
+
+namespace DatabaseSupport
+{
+    public class DatabaseTemplate : IDatabaseTemplate
+    {
+        private readonly IDataSourceConfig _dataSourceConfig;
+
+        public DatabaseTemplate(IDataSourceConfig dataSourceConfig)
+        {
+            _dataSourceConfig = dataSourceConfig;
+        }
+
+        public List<T> FindBy<T>(string sql, Func<DbDataReader, T> mapper, string name, long id)
+        {
+            return Query(sql, mapper,
+                new List<DbParameter>
+                {
+                    new MySqlParameter
+                    {
+                        ParameterName = name,
+                        DbType = DbType.Int32,
+                        Value = id,
+                    }
+                });
+        }
+
+        public List<T> Query<T>(string sql, Func<DbDataReader, T> mapper, List<DbParameter> parameters)
+        {
+            var list = new List<T>();
+
+            using (var connection = _dataSourceConfig.GetConnection())
+            {
+                connection.Open();
+
+                var command = connection.CreateCommand();
+
+                command.CommandText = sql;
+
+                foreach (var param in parameters)
+                {
+                    command.Parameters.Add(param);
+                }
+
+                using (var reader = command.ExecuteReader())
+                {
+                    while (reader.Read())
+                    {
+                        list.Add(mapper(reader));
+                    }
+                }
+            }
+            return list;
+        }
+
+
+        public T Create<T>(string sql, Func<long, T> mapper, params KeyValuePair<string, object>[] list)
+        {
+            using (var connection = _dataSourceConfig.GetConnection())
+            {
+                connection.Open();
+
+                var command = connection.CreateCommand() as MySqlCommand;
+
+                command.CommandText = sql;
+
+                foreach (var pair in list)
+                {
+                    switch (pair.Value.GetType().ToString())
+                    {
+                        case "System.String":
+                            command.Parameters.Add(new MySqlParameter
+                            {
+                                ParameterName = pair.Key,
+                                DbType = DbType.String,
+                                Value = pair.Value,
+                            });
+                            break;
+                        case "System.Int32":
+                            command.Parameters.Add(new MySqlParameter
+                            {
+                                ParameterName = pair.Key,
+                                DbType = DbType.Int32,
+                                Value = pair.Value,
+                            });
+                            break;
+                        case "System.Int64":
+                            command.Parameters.Add(new MySqlParameter
+                            {
+                                ParameterName = pair.Key,
+                                DbType = DbType.Int32,
+                                Value = pair.Value,
+                            });
+                            break;
+                        case "System.DateTime":
+                            command.Parameters.Add(new MySqlParameter
+                            {
+                                ParameterName = pair.Key,
+                                DbType = DbType.DateTime,
+                                Value = pair.Value,
+                            });
+                            break;
+                    }
+                }
+                command.ExecuteNonQuery();
+
+                return mapper(command.LastInsertedId);
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/DatabaseSupport/IDataSourceConfig.cs b/Components/DatabaseSupport/IDataSourceConfig.cs
new file mode 100644
index 0000000..01c452f
--- /dev/null
+++ b/Components/DatabaseSupport/IDataSourceConfig.cs
@@ -0,0 +1,9 @@
+﻿using System.Data.Common;
+
+namespace DatabaseSupport
+{
+    public interface IDataSourceConfig
+    {
+        DbConnection GetConnection();
+    }
+}
\ No newline at end of file
diff --git a/Components/DatabaseSupport/IDatabaseTemplate.cs b/Components/DatabaseSupport/IDatabaseTemplate.cs
new file mode 100644
index 0000000..dd22cb7
--- /dev/null
+++ b/Components/DatabaseSupport/IDatabaseTemplate.cs
@@ -0,0 +1,15 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Data.Common;
+
+namespace DatabaseSupport
+{
+    public interface IDatabaseTemplate
+    {
+        List<T> FindBy<T>(string sql, Func<DbDataReader, T> mapper, string name, long id);
+
+        List<T> Query<T>(string sql, Func<DbDataReader, T> mapper, List<DbParameter> parameters);
+
+        T Create<T>(string sql, Func<long, T> mapper, params KeyValuePair<string, object>[] list);
+    }
+}
\ No newline at end of file
diff --git a/Components/DatabaseSupportTest/DataSourceConfigTest.cs b/Components/DatabaseSupportTest/DataSourceConfigTest.cs
new file mode 100755
index 0000000..0d15730
--- /dev/null
+++ b/Components/DatabaseSupportTest/DataSourceConfigTest.cs
@@ -0,0 +1,31 @@
+using System;
+using DatabaseSupport;
+using Xunit;
+
+namespace DatabaseSupportTest
+{
+    public class DataSourceConfigTest
+    {
+        [Fact]
+        public void GetConnection()
+        {
+            Environment.SetEnvironmentVariable("VCAP_SERVICES", @"
+            {
+                ""p-mysql"": [
+                    {
+                        ""credentials"": {
+                            ""hostname"": ""localhost"",
+                            ""port"": ""3306"",
+                            ""name"": ""a_test_database"",
+                            ""username"": ""a_test_user"",
+                            ""password"": ""a_test_password""
+                        }
+                    }
+                ]
+            }");
+
+            var actual = new DataSourceConfig().GetConnection().ConnectionString;
+            Assert.Equal("Server=localhost;User Id=a_test_user;Password=a_test_password;Port=3306;Database=a_test_database", actual);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/DatabaseSupportTest/DatabaseSupportTest.csproj b/Components/DatabaseSupportTest/DatabaseSupportTest.csproj
new file mode 100755
index 0000000..819b8ab
--- /dev/null
+++ b/Components/DatabaseSupportTest/DatabaseSupportTest.csproj
@@ -0,0 +1,13 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.0.0" />
+    <PackageReference Include="xunit" Version="2.2.0" />
+    <PackageReference Include="xunit.runner.visualstudio" Version="2.2.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/DefaultRoute/DefaultController.cs b/Components/DefaultRoute/DefaultController.cs
new file mode 100755
index 0000000..38750fd
--- /dev/null
+++ b/Components/DefaultRoute/DefaultController.cs
@@ -0,0 +1,11 @@
+﻿using Microsoft.AspNetCore.Mvc;
+
+namespace DefaultRoute
+{
+    [Route("")]
+    public class DefaultController : Controller
+    {
+        [HttpGet]
+        public string Default() => "Noop!";
+    }
+}
\ No newline at end of file
diff --git a/Components/DefaultRoute/DefaultRoute.csproj b/Components/DefaultRoute/DefaultRoute.csproj
new file mode 100755
index 0000000..fd08cff
--- /dev/null
+++ b/Components/DefaultRoute/DefaultRoute.csproj
@@ -0,0 +1,10 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  
+ <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+<PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+ </ItemGroup>
+</Project>
diff --git a/Components/Projects/IProjectDataGateway.cs b/Components/Projects/IProjectDataGateway.cs
new file mode 100644
index 0000000..72a0ce7
--- /dev/null
+++ b/Components/Projects/IProjectDataGateway.cs
@@ -0,0 +1,13 @@
+﻿using System.Collections.Generic;
+
+namespace Projects
+{
+    public interface IProjectDataGateway
+    {
+        ProjectRecord Create(long accountId, string name);
+
+        List<ProjectRecord> FindBy(long accountId);
+
+        ProjectRecord FindObject(long projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Projects/ProjectController.cs b/Components/Projects/ProjectController.cs
new file mode 100644
index 0000000..0f97cd2
--- /dev/null
+++ b/Components/Projects/ProjectController.cs
@@ -0,0 +1,48 @@
+﻿using System.Linq;
+using Microsoft.AspNetCore.Mvc;
+
+namespace Projects
+{
+    public class ProjectController : Controller
+    {
+        private readonly IProjectDataGateway _gateway;
+
+        public ProjectController(IProjectDataGateway gateway)
+        {
+            _gateway = gateway;
+        }
+
+        [HttpGet]
+        [Route("projects"), Produces("application/json")]
+        public IActionResult List([FromQuery] int accountId)
+        {
+            var records = _gateway.FindBy(accountId);
+            var list = records.Select(record => new ProjectInfo(record.Id, record.AccountId, record.Name,
+                    record.Active, "project info"))
+                .ToList();
+            return Ok(list);
+        }
+
+        [HttpGet]
+        [Route("project"), Produces("application/json")]
+        public IActionResult Get([FromQuery] int projectId)
+        {
+            var record = _gateway.FindObject(projectId);
+
+            if (record != null)
+            {
+                return Ok(new ProjectInfo(record.Id, record.AccountId, record.Name, record.Active, "project info"));
+            }
+            return NotFound();
+        }
+
+        [HttpPost]
+        [Route("projects"), Produces("application/json")]
+        public IActionResult Post([FromBody] ProjectInfo info)
+        {
+            var record = _gateway.Create(info.AccountId, info.Name);
+            var value = new ProjectInfo(record.Id, record.AccountId, record.Name, record.Active, "project info");
+            return Created($"projects/{value.Id}", value);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Projects/ProjectDataGateway.cs b/Components/Projects/ProjectDataGateway.cs
new file mode 100644
index 0000000..8e06ef1
--- /dev/null
+++ b/Components/Projects/ProjectDataGateway.cs
@@ -0,0 +1,56 @@
+﻿using System.Collections.Generic;
+using System.Linq;
+using DatabaseSupport;
+
+namespace Projects
+{
+    public class ProjectDataGateway : IProjectDataGateway
+    {
+        private readonly IDatabaseTemplate _template;
+
+        public ProjectDataGateway(IDatabaseTemplate template)
+        {
+            _template = template;
+        }
+
+        public ProjectRecord Create(long accountId, string name)
+        {
+            var sql = @"
+insert into projects (account_id, name, active) values (@accountId, @name, true)";
+
+            return _template.Create(sql, id => new ProjectRecord(id, accountId, name, true),
+                new KeyValuePair<string, object>("@accountId", accountId),
+                new KeyValuePair<string, object>("@name", name)
+            );
+        }
+
+        public List<ProjectRecord> FindBy(long accountId)
+        {
+            const string sql = @"
+select id, account_id, name, active from projects where account_id = @accountId order by name asc";
+
+            return _template.FindBy(sql, reader => new ProjectRecord(
+                reader.GetInt64(0),
+                reader.GetInt64(1),
+                reader.GetString(2),
+                reader.GetBoolean(3)
+            ), "@accountId", accountId);
+        }
+
+
+        public ProjectRecord FindObject(long projectId)
+        {
+            const string sql = @"
+select id, account_id, name, active from projects where id = @projectId order by name asc";
+
+            var projectRecords = _template.FindBy(sql, reader => new ProjectRecord(
+                reader.GetInt64(0),
+                reader.GetInt64(1),
+                reader.GetString(2),
+                reader.GetBoolean(3)
+            ), "@projectId", projectId);
+
+            return projectRecords.Count > 0 ? projectRecords.First() : null;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Projects/ProjectInfo.cs b/Components/Projects/ProjectInfo.cs
new file mode 100644
index 0000000..b0a5c81
--- /dev/null
+++ b/Components/Projects/ProjectInfo.cs
@@ -0,0 +1,21 @@
+﻿namespace Projects
+{
+    public class ProjectInfo
+    {
+        public long Id { get; }
+        public long AccountId { get; }
+        public string Name { get; }
+        public bool Active { get; }
+        public string Info { get; }
+
+
+        public ProjectInfo(long id, long accountId, string name, bool active, string info)
+        {
+            Id = id;
+            AccountId = accountId;
+            Name = name;
+            Active = active;
+            Info = info;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Projects/ProjectRecord.cs b/Components/Projects/ProjectRecord.cs
new file mode 100644
index 0000000..afe72a5
--- /dev/null
+++ b/Components/Projects/ProjectRecord.cs
@@ -0,0 +1,19 @@
+﻿namespace Projects
+{
+    public class ProjectRecord
+    {
+        public long Id { get; }
+        public long AccountId { get; }
+        public string Name { get; }
+        public bool Active { get; }
+
+
+        public ProjectRecord(long id, long accountId, string name, bool active)
+        {
+            Id = id;
+            AccountId = accountId;
+            Name = name;
+            Active = active;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Projects/Projects.csproj b/Components/Projects/Projects.csproj
new file mode 100755
index 0000000..18701ac
--- /dev/null
+++ b/Components/Projects/Projects.csproj
@@ -0,0 +1,16 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  
+  <ItemGroup>
+    <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+<PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/ProjectsTest/ProjectControllerTest.cs b/Components/ProjectsTest/ProjectControllerTest.cs
new file mode 100755
index 0000000..c31c63e
--- /dev/null
+++ b/Components/ProjectsTest/ProjectControllerTest.cs
@@ -0,0 +1,76 @@
+using System.Collections.Generic;
+using DatabaseSupport;
+using Microsoft.AspNetCore.Mvc;
+using Projects;
+using TestSupport;
+using Xunit;
+
+namespace ProjectsTest
+{
+    [Collection("Projects")]
+    public class ProjectControllerTest
+    {
+        private readonly DataSourceConfig _dataSourceConfig = new DataSourceConfig();
+        private readonly TestDatabaseSupport _support = new TestDatabaseSupport();
+
+        private readonly string _sql = @"
+insert into users (id, name) values (4765, 'Jack'), (4766, 'Fred');
+
+insert into accounts (id, owner_id, name) 
+values (1673, 4765, 'Jack''s account'), (1674, 4766, 'Fred''s account');
+
+insert into projects (id, account_id, name, active) 
+values (55432, 1673, 'Flagship', true), (55431, 1673, 'Hovercraft', false);
+";
+
+        static ProjectControllerTest() => TestEnvSupport.SetRegistrationVcap();
+        public ProjectControllerTest() => _support.TruncateAllTables();
+
+        [Fact]
+        public void TestPost()
+        {
+            _support.ExecSql(_sql);
+
+            var controller =
+                new ProjectController(new ProjectDataGateway(new DatabaseTemplate(_dataSourceConfig)));
+
+            var value = controller.Post(new ProjectInfo(-1, 1673, "aProject", true, ""));
+            var actual = (ProjectInfo) ((ObjectResult) value).Value;
+
+            Assert.True(actual.Id > 0);
+            Assert.Equal(1673, actual.AccountId);
+            Assert.Equal("aProject", actual.Name);
+            Assert.Equal(true, actual.Active);
+            Assert.Equal("project info", actual.Info);
+        }
+
+        [Fact]
+        public void TestGet()
+        {
+            _support.ExecSql(_sql);
+
+            var controller =
+                new ProjectController(new ProjectDataGateway(new DatabaseTemplate(_dataSourceConfig)));
+            var result = controller.Get(55431);
+            var actual = (ProjectInfo) ((ObjectResult) result).Value;
+
+            Assert.Equal(55431, actual.Id);
+            Assert.Equal(1673, actual.AccountId);
+            Assert.Equal("Hovercraft", actual.Name);
+            Assert.Equal(false, actual.Active);
+        }
+
+        [Fact]
+        public void TestList()
+        {
+            _support.ExecSql(_sql);
+
+            var controller =
+                new ProjectController(new ProjectDataGateway(new DatabaseTemplate(_dataSourceConfig)));
+            var result = controller.List(1673);
+
+            // todo - full asserts?
+            Assert.Equal(2, ((List<ProjectInfo>) ((ObjectResult) result).Value).Count);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/ProjectsTest/ProjectDataGatewayTest.cs b/Components/ProjectsTest/ProjectDataGatewayTest.cs
new file mode 100755
index 0000000..9880f0d
--- /dev/null
+++ b/Components/ProjectsTest/ProjectDataGatewayTest.cs
@@ -0,0 +1,76 @@
+using System.Collections.Generic;
+using System.Data.Common;
+using System.Linq;
+using DatabaseSupport;
+using Projects;
+using TestSupport;
+using Xunit;
+
+namespace ProjectsTest
+{
+    [Collection("Projects")]
+    public class ProjectDataGatewayTest
+    {
+        private readonly DataSourceConfig _dataSourceConfig = new DataSourceConfig();
+        private readonly TestDatabaseSupport _support = new TestDatabaseSupport();
+
+        public ProjectDataGatewayTest() => _support.TruncateAllTables();
+        static ProjectDataGatewayTest() => TestEnvSupport.SetRegistrationVcap();
+
+        [Fact]
+        public void TestCreate()
+        {
+            _support.ExecSql(@"
+insert into users (id, name) values (12, 'Jack');
+insert into accounts (id, owner_id, name) values (1, 12, 'anAccount');");
+
+            var gateway = new ProjectDataGateway(new DatabaseTemplate(_dataSourceConfig));
+            gateway.Create(1, "aProject");
+
+            // todo...
+            var template = new DatabaseTemplate(_dataSourceConfig);
+            var projects = template.Query("select name from projects where account_id = 1",
+                reader => reader.GetString(0),
+                new List<DbParameter>());
+
+            Assert.Equal("aProject", projects.First());
+        }
+
+        [Fact]
+        public void TestFind()
+        {
+            _support.ExecSql(@"
+insert into users (id, name) values (12, 'Jack');
+insert into accounts (id, owner_id, name) values (1, 12, 'anAccount');
+insert into projects (id, account_id, name) values (22, 1, 'aProject');");
+
+            var gateway = new ProjectDataGateway(new DatabaseTemplate(_dataSourceConfig));
+            var list = gateway.FindBy(1);
+
+            // todo...
+            var actual = list.First();
+            Assert.Equal(22, actual.Id);
+            Assert.Equal(1, actual.AccountId);
+            Assert.Equal("aProject", actual.Name);
+            Assert.Equal(true, actual.Active);
+        }
+
+        [Fact]
+        public void TestFindObject()
+        {
+            _support.ExecSql(@"
+insert into users (id, name) values (12, 'Jack');
+insert into accounts (id, owner_id, name) values (1, 12, 'anAccount');
+insert into projects (id, account_id, name, active) values (22, 1, 'aProject', true);");
+
+            var gateway = new ProjectDataGateway(new DatabaseTemplate(_dataSourceConfig));
+            var actual = gateway.FindObject(22);
+
+            // todo...
+            Assert.Equal(22, actual.Id);
+            Assert.Equal(1, actual.AccountId);
+            Assert.Equal("aProject", actual.Name);
+            Assert.Equal(true, actual.Active);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/ProjectsTest/ProjectsTest.csproj b/Components/ProjectsTest/ProjectsTest.csproj
new file mode 100755
index 0000000..fb5d4a9
--- /dev/null
+++ b/Components/ProjectsTest/ProjectsTest.csproj
@@ -0,0 +1,18 @@
+<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="../Projects/Projects.csproj"/>
+    <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj"/>
+    <ProjectReference Include="../TestSupport/TestSupport.csproj"/>
+    <PackageReference Include="MySqlConnector" Version="0.35.0"/>
+  </ItemGroup>
+
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.0.0"/>
+    <PackageReference Include="xunit" Version="2.2.0"/>
+    <PackageReference Include="xunit.runner.visualstudio" Version="2.2.0"/>
+  </ItemGroup>
+</Project>
diff --git a/Components/TestSupport/IntegrationTestServer.cs b/Components/TestSupport/IntegrationTestServer.cs
new file mode 100644
index 0000000..30b10ce
--- /dev/null
+++ b/Components/TestSupport/IntegrationTestServer.cs
@@ -0,0 +1,26 @@
+﻿using System;
+using Microsoft.AspNetCore;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.AspNetCore.TestHost;
+using Microsoft.Extensions.DependencyInjection;
+
+namespace TestSupport
+{
+    public static class IntegrationTestServer
+    {
+        public static TestServer Start(string response, int port)
+        {
+            var url = $"http://localhost:{port}/";
+
+            var testServer = new TestServer(
+                WebHost.CreateDefaultBuilder(new string[] { })
+                    // https://docs.microsoft.com/en-us/aspnet/core/fundamentals/hosting?tabs=aspnetcore2x#troubleshooting-systemargumentexception
+                    .Configure(_ => { })
+                    .ConfigureServices(services => services.AddSingleton<IStartup>(new TestServerResponder(response)))
+                    .UseUrls(url)
+            ) {BaseAddress = new Uri(url)};
+
+            return testServer;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/TestSupport/TestDatabaseSupport.cs b/Components/TestSupport/TestDatabaseSupport.cs
new file mode 100644
index 0000000..4acbdfa
--- /dev/null
+++ b/Components/TestSupport/TestDatabaseSupport.cs
@@ -0,0 +1,62 @@
+﻿using DatabaseSupport;
+
+namespace TestSupport
+{
+    public class TestDatabaseSupport
+    {
+        private readonly DataSourceConfig _dataSourceConfig = new DataSourceConfig();
+
+        public void ExecSql(string sql)
+        {
+            var connection = _dataSourceConfig.GetConnection();
+            connection.Open();
+            var command = connection.CreateCommand();
+            command.CommandText = sql;
+            command.ExecuteNonQuery();
+            connection.Close();
+        }
+
+        public void TruncateAllTables()
+        {
+            var dbName = _dataSourceConfig.GetConnection().Database;
+            
+            var tableNameSql = $@"set foreign_key_checks = 0;
+                select table_name FROM information_schema.tables
+                where table_schema='{dbName}' and table_name != 'schema_version';";
+
+            var truncateSql = "";
+
+            using (var connection = _dataSourceConfig.GetConnection())
+            {
+                connection.Open();
+
+                using (var command = connection.CreateCommand())
+                {
+                    command.CommandText = tableNameSql;
+
+                    using (var reader = command.ExecuteReader())
+                    {
+                        while (reader.HasRows)
+                        {
+                            while (reader.Read())
+                            {
+                                var table = reader.GetString(0);
+                                truncateSql += $"truncate {table};";
+                            }
+
+                            reader.NextResult();
+                        }
+                    }
+                }
+
+                using (var command = connection.CreateCommand())
+                {
+                    command.CommandText = truncateSql;
+                    command.ExecuteNonQuery();
+                }
+
+                connection.Close();
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/TestSupport/TestEnvSupport.cs b/Components/TestSupport/TestEnvSupport.cs
new file mode 100644
index 0000000..c29e67f
--- /dev/null
+++ b/Components/TestSupport/TestEnvSupport.cs
@@ -0,0 +1,33 @@
+﻿using System;
+
+namespace TestSupport
+{
+    public static class TestEnvSupport
+    {
+        private static void SetRegistrationVcap(string db)
+        {
+            var json = $@"
+                {{
+                    ""p-mysql"": [
+                      {{
+                            ""credentials"": {{
+                                ""hostname"": ""localhost"",
+                                ""port"": ""3306"",
+                                ""name"": ""tracker_{db}_test"",
+                                ""username"": ""tracker"",
+                                ""password"": ""password""
+                            }},
+                            ""name"": ""tracker-{db}-database""
+                        }}
+                    ]
+                }}";
+
+            Environment.SetEnvironmentVariable("VCAP_SERVICES", json);
+        }
+
+        public static void SetRegistrationVcap() => SetRegistrationVcap("registration");
+        public static void SetBacklogVcap() => SetRegistrationVcap("backlog");
+        public static void SetAllocationsVcap() => SetRegistrationVcap("allocations");
+        public static void SetTimesheetsVcap() => SetRegistrationVcap("timesheets");
+    }
+}
\ No newline at end of file
diff --git a/Components/TestSupport/TestServerResponder.cs b/Components/TestSupport/TestServerResponder.cs
new file mode 100644
index 0000000..2938605
--- /dev/null
+++ b/Components/TestSupport/TestServerResponder.cs
@@ -0,0 +1,30 @@
+﻿using System;
+using Microsoft.AspNetCore.Builder;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.AspNetCore.Http;
+using Microsoft.Extensions.DependencyInjection;
+
+namespace TestSupport
+{
+        public sealed class TestServerResponder : IStartup
+        {
+            private readonly string _response;
+
+            public TestServerResponder(string response)
+            {
+                _response = response;
+            }
+
+            public IServiceProvider ConfigureServices(IServiceCollection services) =>
+                services.BuildServiceProvider();
+
+            public void Configure(IApplicationBuilder app)
+            {
+                app.Run(context =>
+                {
+                    context.Response.ContentLength = _response.Length;
+                    return context.Response.WriteAsync(_response);
+                });
+            }
+        }
+}
\ No newline at end of file
diff --git a/Components/TestSupport/TestServers.cs b/Components/TestSupport/TestServers.cs
new file mode 100644
index 0000000..3031bb4
--- /dev/null
+++ b/Components/TestSupport/TestServers.cs
@@ -0,0 +1,10 @@
+﻿using Microsoft.AspNetCore.TestHost;
+
+namespace TestSupport
+{
+    public static class TestServers
+    {
+        public static TestServer ActiveProjectServer =>
+            IntegrationTestServer.Start(response: "{\"active\" : true }", port: 3001);
+    }
+}
\ No newline at end of file
diff --git a/Components/TestSupport/TestSupport.csproj b/Components/TestSupport/TestSupport.csproj
new file mode 100755
index 0000000..fbb6835
--- /dev/null
+++ b/Components/TestSupport/TestSupport.csproj
@@ -0,0 +1,18 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  
+  <ItemGroup>
+    <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+<PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="System.Runtime.Serialization.Json" Version="4.3.0" />
+    <PackageReference Include="Microsoft.AspNetCore.TestHost" Version="2.0.1" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/Timesheets/IProjectClient.cs b/Components/Timesheets/IProjectClient.cs
new file mode 100644
index 0000000..b6fa300
--- /dev/null
+++ b/Components/Timesheets/IProjectClient.cs
@@ -0,0 +1,9 @@
+﻿using System.Threading.Tasks;
+
+namespace Timesheets
+{
+    public interface IProjectClient
+    {
+        Task<ProjectInfo> Get(long projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/ITimeEntryDataGateway.cs b/Components/Timesheets/ITimeEntryDataGateway.cs
new file mode 100755
index 0000000..49fe761
--- /dev/null
+++ b/Components/Timesheets/ITimeEntryDataGateway.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+
+namespace Timesheets
+{
+    public interface ITimeEntryDataGateway
+    {
+        TimeEntryRecord Create(long projectId, long userId, DateTime date, int hours);
+
+        List<TimeEntryRecord> FindBy(long userId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/ProjectClient.cs b/Components/Timesheets/ProjectClient.cs
new file mode 100644
index 0000000..a43eb0e
--- /dev/null
+++ b/Components/Timesheets/ProjectClient.cs
@@ -0,0 +1,25 @@
+﻿using System.Net.Http;
+using System.Runtime.Serialization.Json;
+using System.Threading.Tasks;
+
+namespace Timesheets
+{
+    public class ProjectClient : IProjectClient
+    {
+        private readonly HttpClient _client;
+
+        public ProjectClient(HttpClient client)
+        {
+            _client = client;
+        }
+
+        public async Task<ProjectInfo> Get(long projectId)
+        {
+            _client.DefaultRequestHeaders.Accept.Clear();
+            var streamTask = _client.GetStreamAsync($"project?projectId={projectId}");
+
+            var serializer = new DataContractJsonSerializer(typeof(ProjectInfo));
+            return serializer.ReadObject(await streamTask) as ProjectInfo;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/ProjectInfo.cs b/Components/Timesheets/ProjectInfo.cs
new file mode 100644
index 0000000..f5808a0
--- /dev/null
+++ b/Components/Timesheets/ProjectInfo.cs
@@ -0,0 +1,16 @@
+﻿using System.Runtime.Serialization;
+
+namespace Timesheets
+{
+    [DataContract(Name="info")]
+    public class ProjectInfo
+    {
+        [DataMember(Name="active")]
+        public bool Active { get; set; }
+
+        public ProjectInfo(bool active)
+        {
+            Active = active;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/TimeEntryController.cs b/Components/Timesheets/TimeEntryController.cs
new file mode 100755
index 0000000..e0da580
--- /dev/null
+++ b/Components/Timesheets/TimeEntryController.cs
@@ -0,0 +1,45 @@
+﻿using System.Linq;
+using Microsoft.AspNetCore.Mvc;
+
+namespace Timesheets
+{
+    [Route("time-entries"), Produces("application/json")]
+    public class TimeEntryController : Controller
+    {
+        private readonly ITimeEntryDataGateway _gateway;
+        private readonly IProjectClient _client;
+
+        public TimeEntryController(ITimeEntryDataGateway gateway, IProjectClient client)
+        {
+            _gateway = gateway;
+            _client = client;
+        }
+
+        [HttpGet]
+        public IActionResult Get([FromQuery] int userId)
+        {
+            var records = _gateway.FindBy(userId);
+            var list = records.Select(record => new TimeEntryInfo(record.Id, record.ProjectId, record.UserId,
+                    record.Date, record.Hours, "entry info"))
+                .ToList();
+            return Ok(list);
+        }
+
+        [HttpPost]
+        public IActionResult Post([FromBody] TimeEntryInfo info)
+        {
+            if (!ProjectIsActive(info.ProjectId)) return new StatusCodeResult(304);
+
+            var record = _gateway.Create(info.ProjectId, info.UserId, info.Date, info.Hours);
+            var value = new TimeEntryInfo(record.Id, record.ProjectId, record.UserId, record.Date, record.Hours,
+                "entry info");
+            return Created($"time-entries/{value.Id}", value);
+        }
+
+        private bool ProjectIsActive(long projectId)
+        {
+            var info = _client.Get(projectId);
+            return info.Result?.Active ?? false;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/TimeEntryDataGateway.cs b/Components/Timesheets/TimeEntryDataGateway.cs
new file mode 100755
index 0000000..b511d2b
--- /dev/null
+++ b/Components/Timesheets/TimeEntryDataGateway.cs
@@ -0,0 +1,43 @@
+﻿using System;
+using System.Collections.Generic;
+using DatabaseSupport;
+
+namespace Timesheets
+{
+    public class TimeEntryDataGateway : ITimeEntryDataGateway
+    {
+        private readonly IDatabaseTemplate _template;
+
+        public TimeEntryDataGateway(IDatabaseTemplate template)
+        {
+            _template = template;
+        }
+
+        public TimeEntryRecord Create(long projectId, long userId, DateTime date, int hours)
+        {
+            var sql = @"
+insert into time_entries (project_id, user_id, date, hours) values (@projectId, @userId, @date, @hours)";
+
+            return _template.Create(sql, id => new TimeEntryRecord(id, projectId, userId, date, hours),
+                new KeyValuePair<string, object>("@projectId", projectId),
+                new KeyValuePair<string, object>("@userId", userId),
+                new KeyValuePair<string, object>("@date", date),
+                new KeyValuePair<string, object>("@hours", hours)
+            );
+        }
+
+        public List<TimeEntryRecord> FindBy(long userId)
+        {
+            const string sql = @"
+select id, project_id, user_id, date, hours from time_entries where user_id = @userId";
+
+            return _template.FindBy(sql, reader => new TimeEntryRecord(
+                reader.GetInt64(0),
+                reader.GetInt64(1),
+                reader.GetInt64(2),
+                reader.GetDateTime(3),
+                reader.GetInt32(4)
+            ), "@userId", userId);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/TimeEntryInfo.cs b/Components/Timesheets/TimeEntryInfo.cs
new file mode 100755
index 0000000..6d85c0a
--- /dev/null
+++ b/Components/Timesheets/TimeEntryInfo.cs
@@ -0,0 +1,25 @@
+﻿using System;
+
+namespace Timesheets
+{
+    public class TimeEntryInfo
+    {
+        public long Id { get; }
+        public long ProjectId { get; }
+        public long UserId { get; }
+        public DateTime Date { get; }
+        public int Hours { get; }
+        public string Info { get; }
+
+
+        public TimeEntryInfo(long id, long projectId, long userId, DateTime date, int hours, string info)
+        {
+            Id = id;
+            ProjectId = projectId;
+            UserId = userId;
+            Date = date;
+            Hours = hours;
+            Info = info;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/TimeEntryRecord.cs b/Components/Timesheets/TimeEntryRecord.cs
new file mode 100755
index 0000000..bd70712
--- /dev/null
+++ b/Components/Timesheets/TimeEntryRecord.cs
@@ -0,0 +1,23 @@
+﻿using System;
+
+namespace Timesheets
+{
+    public class TimeEntryRecord
+    {
+        public long Id { get; }
+        public long ProjectId { get; }
+        public long UserId { get; }
+        public DateTime Date { get; }
+        public int Hours { get; }
+
+
+        public TimeEntryRecord(long id, long projectId, long userId, DateTime date, int hours)
+        {
+            Id = id;
+            ProjectId = projectId;
+            UserId = userId;
+            Date = date;
+            Hours = hours;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/Timesheets.csproj b/Components/Timesheets/Timesheets.csproj
new file mode 100755
index 0000000..4ff6bc1
--- /dev/null
+++ b/Components/Timesheets/Timesheets.csproj
@@ -0,0 +1,17 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  
+  <ItemGroup>
+    <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="System.Runtime.Serialization.Json" Version="4.3.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/TimesheetsTest/TimeEntryControllerTest.cs b/Components/TimesheetsTest/TimeEntryControllerTest.cs
new file mode 100755
index 0000000..8e84106
--- /dev/null
+++ b/Components/TimesheetsTest/TimeEntryControllerTest.cs
@@ -0,0 +1,61 @@
+using System;
+using System.Collections.Generic;
+using System.Net.Http;
+using DatabaseSupport;
+using Microsoft.AspNetCore.Mvc;
+using TestSupport;
+using Timesheets;
+using Xunit;
+using static TestSupport.TestServers;
+
+namespace TimesheetsTest
+{
+    [Collection("Timesheets")]
+    public class TimeEntryControllerTest
+    {
+        private readonly DataSourceConfig _dataSourceConfig = new DataSourceConfig();
+        private readonly TestDatabaseSupport _support = new TestDatabaseSupport();
+
+        private readonly HttpClient _client = ActiveProjectServer.CreateClient();
+
+        static TimeEntryControllerTest() => TestEnvSupport.SetTimesheetsVcap();
+        public TimeEntryControllerTest() => _support.TruncateAllTables();
+
+        private const string _sql = @"insert into time_entries (id, project_id, user_id, date, hours)
+        values (1534, 55432, 4765, '2015-05-17', 5), (2534, 55432, 4765, '2015-05-18', 3);";
+
+        [Fact]
+        public void TestPost()
+        {
+            _support.ExecSql(_sql);
+
+            var controller =
+                new TimeEntryController(new TimeEntryDataGateway(new DatabaseTemplate(_dataSourceConfig)),
+                    new ProjectClient(_client));
+
+            var value = controller.Post(new TimeEntryInfo(-1, 55432, 4765, DateTime.Parse("2015-05-17"), 8, ""));
+            var actual = (TimeEntryInfo) ((ObjectResult) value).Value;
+
+            Assert.True(actual.Id > 0);
+            Assert.Equal(55432, actual.ProjectId);
+            Assert.Equal(4765, actual.UserId);
+            Assert.Equal(17, actual.Date.Day);
+            Assert.Equal(8, actual.Hours);
+            Assert.Equal("entry info", actual.Info);
+        }
+
+        [Fact]
+        public void TestGet()
+        {
+            _support.ExecSql(_sql);
+
+            var controller =
+                new TimeEntryController(new TimeEntryDataGateway(new DatabaseTemplate(_dataSourceConfig)),
+                    new ProjectClient(_client));
+            var result = controller.Get(4765);
+
+            // todo...
+            Assert.Equal(2, ((List<TimeEntryInfo>) ((ObjectResult) result).Value).Count);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/TimesheetsTest/TimeEntryDataGatewayTest.cs b/Components/TimesheetsTest/TimeEntryDataGatewayTest.cs
new file mode 100755
index 0000000..36d8a8d
--- /dev/null
+++ b/Components/TimesheetsTest/TimeEntryDataGatewayTest.cs
@@ -0,0 +1,51 @@
+using System;
+using System.Collections.Generic;
+using System.Data.Common;
+using System.Linq;
+using DatabaseSupport;
+using TestSupport;
+using Timesheets;
+using Xunit;
+
+namespace TimesheetsTest
+{
+    [Collection("Timesheets")]
+    public class TimeEntryDataGatewayTest
+    {
+        private readonly DataSourceConfig _dataSourceConfig = new DataSourceConfig();
+        private readonly TestDatabaseSupport _support = new TestDatabaseSupport();
+
+        static TimeEntryDataGatewayTest() => TestEnvSupport.SetTimesheetsVcap();
+        public TimeEntryDataGatewayTest() => _support.TruncateAllTables();
+
+        [Fact]
+        public void TestCreate()
+        {
+            var gateway = new TimeEntryDataGateway(new DatabaseTemplate(_dataSourceConfig));
+            gateway.Create(22, 12, DateTime.Now, 8);
+
+            // todo...
+            var template = new DatabaseTemplate(_dataSourceConfig);
+            var projectIds = template.Query("select project_id from time_entries", reader => reader.GetInt64(0),
+                new List<DbParameter>());
+
+            Assert.Equal(22, projectIds.First());
+        }
+
+        [Fact]
+        public void TestFind()
+        {
+            _support.ExecSql(@"insert into time_entries (id, project_id, user_id, date, hours) 
+values (2346, 22, 12, now(), 8);");
+
+            var gateway = new TimeEntryDataGateway(new DatabaseTemplate(_dataSourceConfig));
+            var list = gateway.FindBy(12);
+
+            // todo...
+            var actual = list.First();
+            Assert.Equal(2346, actual.Id);
+            Assert.Equal(22, actual.ProjectId);
+            Assert.Equal(12, actual.UserId);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/TimesheetsTest/TimesheetsTest.csproj b/Components/TimesheetsTest/TimesheetsTest.csproj
new file mode 100755
index 0000000..587db08
--- /dev/null
+++ b/Components/TimesheetsTest/TimesheetsTest.csproj
@@ -0,0 +1,16 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <ProjectReference Include="../Timesheets/Timesheets.csproj" />
+    <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj" />
+    <ProjectReference Include="../TestSupport/TestSupport.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.0.0" />
+    <PackageReference Include="xunit" Version="2.2.0" />
+    <PackageReference Include="xunit.runner.visualstudio" Version="2.2.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/Users/IUserDataGateway.cs b/Components/Users/IUserDataGateway.cs
new file mode 100644
index 0000000..c0275bc
--- /dev/null
+++ b/Components/Users/IUserDataGateway.cs
@@ -0,0 +1,9 @@
+﻿namespace Users
+{
+    public interface IUserDataGateway
+    {
+        UserRecord Create(string name);
+
+        UserRecord FindObjectBy(long id);
+    }
+}
\ No newline at end of file
diff --git a/Components/Users/UserController.cs b/Components/Users/UserController.cs
new file mode 100644
index 0000000..f4dd924
--- /dev/null
+++ b/Components/Users/UserController.cs
@@ -0,0 +1,28 @@
+﻿using Microsoft.AspNetCore.Mvc;
+
+namespace Users
+{
+    [Route("users"), Produces("application/json")]
+    public class UserController : Controller
+    {
+        private readonly IUserDataGateway _gateway;
+
+        public UserController(IUserDataGateway gateway)
+        {
+            _gateway = gateway;
+        }
+
+        [HttpGet("{id}")]
+        public IActionResult Get(int id)
+        {
+            var record = _gateway.FindObjectBy(id);
+
+            if (record == null)
+            {
+                return NotFound();
+            }
+
+            return Ok(new UserInfo(record.Id, record.Name, "user info"));
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Users/UserDataGateway.cs b/Components/Users/UserDataGateway.cs
new file mode 100644
index 0000000..ca0f966
--- /dev/null
+++ b/Components/Users/UserDataGateway.cs
@@ -0,0 +1,36 @@
+﻿using System.Collections.Generic;
+using System.Linq;
+using DatabaseSupport;
+
+namespace Users
+{
+    public class UserDataGateway : IUserDataGateway
+    {
+        private readonly IDatabaseTemplate _template;
+
+        public UserDataGateway(IDatabaseTemplate template)
+        {
+            _template = template;
+        }
+
+        public UserRecord Create(string name)
+        {
+            var sql = @"insert into users (name) values (@name)";
+
+            return _template.Create(sql, id => new UserRecord(id, name),
+                new KeyValuePair<string, object>("@name", name));
+        }
+
+        public UserRecord FindObjectBy(long id)
+        {
+            var sql = @"select id, name from users where id = @id limit 1";
+
+            var userRecords = _template.FindBy(sql, reader => new UserRecord(
+                reader.GetInt64(0),
+                reader.GetString(1)
+            ), "@id", id);
+
+            return userRecords.Count > 0 ? userRecords.First() : null;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Users/UserInfo.cs b/Components/Users/UserInfo.cs
new file mode 100644
index 0000000..40d35de
--- /dev/null
+++ b/Components/Users/UserInfo.cs
@@ -0,0 +1,16 @@
+﻿namespace Users
+{
+    public class UserInfo
+    {
+        public long Id { get; }
+        public string Name { get; }
+        public string Info { get; }
+
+        public UserInfo(long id, string name, string info)
+        {
+            Id = id;
+            Name = name;
+            Info = info;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Users/UserRecord.cs b/Components/Users/UserRecord.cs
new file mode 100755
index 0000000..e863857
--- /dev/null
+++ b/Components/Users/UserRecord.cs
@@ -0,0 +1,14 @@
+﻿namespace Users
+{
+    public class UserRecord
+    {
+        public long Id { get; }
+        public string Name { get; }
+
+        public UserRecord(long id, string name)
+        {
+            Id = id;
+            Name = name;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Users/Users.csproj b/Components/Users/Users.csproj
new file mode 100755
index 0000000..c58e904
--- /dev/null
+++ b/Components/Users/Users.csproj
@@ -0,0 +1,14 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/UsersTest/UserControllerTest.cs b/Components/UsersTest/UserControllerTest.cs
new file mode 100644
index 0000000..9fc1ced
--- /dev/null
+++ b/Components/UsersTest/UserControllerTest.cs
@@ -0,0 +1,33 @@
+﻿using DatabaseSupport;
+using Microsoft.AspNetCore.Mvc;
+using TestSupport;
+using Users;
+using Xunit;
+
+namespace UsersTest
+{
+    [Collection("Users")]
+    public class UserControllerTest
+    {
+        private readonly DataSourceConfig _dataSourceConfig = new DataSourceConfig();
+        private readonly TestDatabaseSupport _support = new TestDatabaseSupport();
+
+        static UserControllerTest() => TestEnvSupport.SetRegistrationVcap();
+        public UserControllerTest() => _support.TruncateAllTables();
+
+        [Fact]
+        public void TestGet()
+        {
+            _support.ExecSql("insert into users (id, name) values (4765, 'Jack'), (4766, 'Fred');");
+
+            var controller =
+                new UserController(new UserDataGateway(new DatabaseTemplate(_dataSourceConfig)));
+            var result = controller.Get(4765);
+            var info = ((UserInfo) ((ObjectResult) result).Value);
+
+            Assert.Equal(4765, info.Id);
+            Assert.Equal("Jack", info.Name);
+            Assert.Equal("user info", info.Info);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/UsersTest/UserDataGatewayTest.cs b/Components/UsersTest/UserDataGatewayTest.cs
new file mode 100755
index 0000000..73972c8
--- /dev/null
+++ b/Components/UsersTest/UserDataGatewayTest.cs
@@ -0,0 +1,48 @@
+using System.Collections.Generic;
+using System.Data.Common;
+using System.Linq;
+using DatabaseSupport;
+using TestSupport;
+using Users;
+using Xunit;
+
+namespace UsersTest
+{
+    [Collection("Users")]
+    public class UsersDataGatewayTest
+    {
+        private readonly DataSourceConfig _dataSourceConfig = new DataSourceConfig();
+        private readonly TestDatabaseSupport _support = new TestDatabaseSupport();
+
+        public UsersDataGatewayTest() => _support.TruncateAllTables();
+
+        [Fact]
+        public void TestCreate()
+        {
+            var template = new DatabaseTemplate(_dataSourceConfig);
+            var gateway = new UserDataGateway(template);
+            gateway.Create("aUser");
+
+            var names = template.Query("select name from users", reader => reader.GetString(0),
+                new List<DbParameter>());
+
+            Assert.Equal("aUser", names.First());
+        }
+
+        [Fact]
+        public void TestFindBy()
+        {
+            _support.ExecSql(
+                @"insert into users (id, name) values (42346, 'aName'), (42347, 'anotherName'), (42348, 'andAnotherName');");
+
+            var gateway = new UserDataGateway(new DatabaseTemplate(_dataSourceConfig));
+
+            var actual = gateway.FindObjectBy(42347);
+
+            Assert.Equal(42347, actual.Id);
+            Assert.Equal("anotherName", actual.Name);
+
+            Assert.Null(gateway.FindObjectBy(42));
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/UsersTest/UsersTest.csproj b/Components/UsersTest/UsersTest.csproj
new file mode 100755
index 0000000..91005d8
--- /dev/null
+++ b/Components/UsersTest/UsersTest.csproj
@@ -0,0 +1,16 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <ProjectReference Include="../Users/Users.csproj" />
+    <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj" />
+    <ProjectReference Include="../TestSupport/TestSupport.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.0.0" />
+    <PackageReference Include="xunit" Version="2.2.0" />
+    <PackageReference Include="xunit.runner.visualstudio" Version="2.2.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Databases/allocations-database/migrations/V1__initial_schema.sql b/Databases/allocations-database/migrations/V1__initial_schema.sql
new file mode 100644
index 0000000..b08ab3e
--- /dev/null
+++ b/Databases/allocations-database/migrations/V1__initial_schema.sql
@@ -0,0 +1,11 @@
+create table allocations (
+  id bigint(20) not null auto_increment,
+  project_id bigint(20),
+  user_id bigint(20),
+  first_day datetime,
+  last_day datetime,
+
+  primary key (id)
+)
+engine = innodb
+default charset = utf8;
diff --git a/Databases/backlog-database/migrations/V1__initial_schema.sql b/Databases/backlog-database/migrations/V1__initial_schema.sql
new file mode 100644
index 0000000..f83716d
--- /dev/null
+++ b/Databases/backlog-database/migrations/V1__initial_schema.sql
@@ -0,0 +1,9 @@
+create table stories (
+  id         bigint(20) not null auto_increment,
+  project_id bigint(20),
+  name       VARCHAR(255),
+
+  primary key (id)
+)
+engine = innodb
+default charset = utf8;
diff --git a/Databases/create_databases.sql b/Databases/create_databases.sql
new file mode 100644
index 0000000..7b4e4f3
--- /dev/null
+++ b/Databases/create_databases.sql
@@ -0,0 +1,22 @@
+DROP DATABASE IF EXISTS tracker_allocations_dev;
+DROP DATABASE IF EXISTS tracker_backlog_dev;
+DROP DATABASE IF EXISTS tracker_registration_dev;
+DROP DATABASE IF EXISTS tracker_timesheets_dev;
+DROP DATABASE IF EXISTS tracker_allocations_test;
+DROP DATABASE IF EXISTS tracker_backlog_test;
+DROP DATABASE IF EXISTS tracker_registration_test;
+DROP DATABASE IF EXISTS tracker_timesheets_test;
+
+CREATE USER IF NOT EXISTS 'tracker'@'localhost'
+  IDENTIFIED BY 'password';
+
+GRANT ALL PRIVILEGES ON *.* TO 'tracker' @'localhost';
+
+CREATE DATABASE tracker_allocations_dev;
+CREATE DATABASE tracker_backlog_dev;
+CREATE DATABASE tracker_registration_dev;
+CREATE DATABASE tracker_timesheets_dev;
+CREATE DATABASE tracker_allocations_test;
+CREATE DATABASE tracker_backlog_test;
+CREATE DATABASE tracker_registration_test;
+CREATE DATABASE tracker_timesheets_test;
\ No newline at end of file
diff --git a/Databases/registration-database/migrations/V1__initial_schema.sql b/Databases/registration-database/migrations/V1__initial_schema.sql
new file mode 100644
index 0000000..03e3d00
--- /dev/null
+++ b/Databases/registration-database/migrations/V1__initial_schema.sql
@@ -0,0 +1,34 @@
+create table users (
+  id   bigint(20) not null auto_increment,
+  name VARCHAR(255),
+
+  primary key (id),
+  unique key name (name)
+)
+engine = innodb
+default charset = utf8;
+
+create table accounts (
+  id       bigint(20) not null auto_increment,
+  owner_id bigint(20),
+  name     VARCHAR(255),
+
+  primary key (id),
+  unique key name (name),
+  constraint foreign key (owner_id) references users (id)
+)
+engine = innodb
+default charset = utf8;
+
+create table projects (
+  id         bigint(20) not null auto_increment,
+  account_id bigint(20),
+  name       VARCHAR(255),
+  active     bit(1) not null default b'1',
+
+  primary key (id),
+  unique key name (name),
+  constraint foreign key (account_id) references accounts (id)
+)
+engine = innodb
+default charset = utf8;
diff --git a/Databases/timesheets-database/migrations/V1__initial_schema.sql b/Databases/timesheets-database/migrations/V1__initial_schema.sql
new file mode 100644
index 0000000..f57f955
--- /dev/null
+++ b/Databases/timesheets-database/migrations/V1__initial_schema.sql
@@ -0,0 +1,11 @@
+create table time_entries (
+  id bigint(20) not null auto_increment,
+  project_id bigint(20),
+  user_id bigint(20),
+  date datetime,
+  hours int,
+
+  primary key (id)
+)
+engine = innodb
+default charset = utf8;
diff --git a/PalTracker.sln b/PalTracker.sln
new file mode 100644
index 0000000..bbc5568
--- /dev/null
+++ b/PalTracker.sln
@@ -0,0 +1,326 @@
+
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio 15
+VisualStudioVersion = 15.0.26124.0
+MinimumVisualStudioVersion = 15.0.26124.0
+Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Applications", "Applications", "{61F0A7C3-5DE2-4C07-AF32-C9BAE2560760}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "AllocationsServer", "Applications\AllocationsServer\AllocationsServer.csproj", "{115E2983-51A0-4722-BA01-75223ACC33F8}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "BacklogServer", "Applications\BacklogServer\BacklogServer.csproj", "{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "RegistrationServer", "Applications\RegistrationServer\RegistrationServer.csproj", "{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TimesheetsServer", "Applications\TimesheetsServer\TimesheetsServer.csproj", "{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}"
+EndProject
+Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Components", "Components", "{E5C501FF-2D6C-4F16-8C68-481B81335AC5}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Accounts", "Components\Accounts\Accounts.csproj", "{9779A47A-8012-48BC-A243-EA67EAD22564}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "AccountsTest", "Components\AccountsTest\AccountsTest.csproj", "{FA3DF435-CD0C-430A-83BC-DA495140A8F6}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Allocations", "Components\Allocations\Allocations.csproj", "{8C807867-2F10-494D-8564-1C2F91784D3F}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "AllocationsTest", "Components\AllocationsTest\AllocationsTest.csproj", "{176CA734-BEC2-47E2-94A3-C496F340A301}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Backlog", "Components\Backlog\Backlog.csproj", "{F3EF758B-B52F-49C2-919C-3BEF880B3756}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "BacklogTest", "Components\BacklogTest\BacklogTest.csproj", "{CFB30C9F-ED56-461C-BC66-B177AF421FB5}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "DatabaseSupport", "Components\DatabaseSupport\DatabaseSupport.csproj", "{E46327AB-91BA-415B-899D-AA25DCD3103C}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "DatabaseSupportTest", "Components\DatabaseSupportTest\DatabaseSupportTest.csproj", "{44C3DD56-D6AC-41E4-A701-C8075A90EBF9}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Projects", "Components\Projects\Projects.csproj", "{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ProjectsTest", "Components\ProjectsTest\ProjectsTest.csproj", "{73A7B8A6-394C-43D2-A0B8-7A67546253B3}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TestSupport", "Components\TestSupport\TestSupport.csproj", "{7B9DFA7F-C927-4C34-BA47-5461508949B8}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Timesheets", "Components\Timesheets\Timesheets.csproj", "{940184A9-4AC9-4A10-964E-CD71E69F865D}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TimesheetsTest", "Components\TimesheetsTest\TimesheetsTest.csproj", "{F9AD5A42-6B97-4784-9207-E278AF7535CE}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Users", "Components\Users\Users.csproj", "{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "UsersTest", "Components\UsersTest\UsersTest.csproj", "{3251E09D-4C88-4489-9A0F-2FCE8011820A}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "DefaultRoute", "Components\DefaultRoute\DefaultRoute.csproj", "{4227E6F1-9913-4A2A-AC0E-2A975445086E}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Debug|x64 = Debug|x64
+		Debug|x86 = Debug|x86
+		Release|Any CPU = Release|Any CPU
+		Release|x64 = Release|x64
+		Release|x86 = Release|x86
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Debug|x64.ActiveCfg = Debug|x64
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Debug|x64.Build.0 = Debug|x64
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Debug|x86.ActiveCfg = Debug|x86
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Debug|x86.Build.0 = Debug|x86
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Release|Any CPU.Build.0 = Release|Any CPU
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Release|x64.ActiveCfg = Release|x64
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Release|x64.Build.0 = Release|x64
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Release|x86.ActiveCfg = Release|x86
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Release|x86.Build.0 = Release|x86
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Debug|x64.ActiveCfg = Debug|x64
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Debug|x64.Build.0 = Debug|x64
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Debug|x86.ActiveCfg = Debug|x86
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Debug|x86.Build.0 = Debug|x86
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Release|Any CPU.Build.0 = Release|Any CPU
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Release|x64.ActiveCfg = Release|x64
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Release|x64.Build.0 = Release|x64
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Release|x86.ActiveCfg = Release|x86
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Release|x86.Build.0 = Release|x86
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Debug|x64.ActiveCfg = Debug|x64
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Debug|x64.Build.0 = Debug|x64
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Debug|x86.ActiveCfg = Debug|x86
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Debug|x86.Build.0 = Debug|x86
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Release|Any CPU.Build.0 = Release|Any CPU
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Release|x64.ActiveCfg = Release|x64
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Release|x64.Build.0 = Release|x64
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Release|x86.ActiveCfg = Release|x86
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Release|x86.Build.0 = Release|x86
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Debug|x64.ActiveCfg = Debug|x64
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Debug|x64.Build.0 = Debug|x64
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Debug|x86.ActiveCfg = Debug|x86
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Debug|x86.Build.0 = Debug|x86
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Release|Any CPU.Build.0 = Release|Any CPU
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Release|x64.ActiveCfg = Release|x64
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Release|x64.Build.0 = Release|x64
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Release|x86.ActiveCfg = Release|x86
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Release|x86.Build.0 = Release|x86
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Debug|x64.ActiveCfg = Debug|x64
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Debug|x64.Build.0 = Debug|x64
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Debug|x86.ActiveCfg = Debug|x86
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Debug|x86.Build.0 = Debug|x86
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Release|Any CPU.Build.0 = Release|Any CPU
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Release|x64.ActiveCfg = Release|x64
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Release|x64.Build.0 = Release|x64
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Release|x86.ActiveCfg = Release|x86
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Release|x86.Build.0 = Release|x86
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Debug|x64.ActiveCfg = Debug|x64
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Debug|x64.Build.0 = Debug|x64
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Debug|x86.ActiveCfg = Debug|x86
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Debug|x86.Build.0 = Debug|x86
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Release|Any CPU.Build.0 = Release|Any CPU
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Release|x64.ActiveCfg = Release|x64
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Release|x64.Build.0 = Release|x64
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Release|x86.ActiveCfg = Release|x86
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Release|x86.Build.0 = Release|x86
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Debug|x64.ActiveCfg = Debug|x64
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Debug|x64.Build.0 = Debug|x64
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Debug|x86.ActiveCfg = Debug|x86
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Debug|x86.Build.0 = Debug|x86
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Release|Any CPU.Build.0 = Release|Any CPU
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Release|x64.ActiveCfg = Release|x64
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Release|x64.Build.0 = Release|x64
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Release|x86.ActiveCfg = Release|x86
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Release|x86.Build.0 = Release|x86
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Debug|x64.ActiveCfg = Debug|x64
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Debug|x64.Build.0 = Debug|x64
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Debug|x86.ActiveCfg = Debug|x86
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Debug|x86.Build.0 = Debug|x86
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Release|Any CPU.Build.0 = Release|Any CPU
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Release|x64.ActiveCfg = Release|x64
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Release|x64.Build.0 = Release|x64
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Release|x86.ActiveCfg = Release|x86
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Release|x86.Build.0 = Release|x86
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Debug|x64.ActiveCfg = Debug|x64
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Debug|x64.Build.0 = Debug|x64
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Debug|x86.ActiveCfg = Debug|x86
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Debug|x86.Build.0 = Debug|x86
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Release|Any CPU.Build.0 = Release|Any CPU
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Release|x64.ActiveCfg = Release|x64
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Release|x64.Build.0 = Release|x64
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Release|x86.ActiveCfg = Release|x86
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Release|x86.Build.0 = Release|x86
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Debug|x64.ActiveCfg = Debug|x64
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Debug|x64.Build.0 = Debug|x64
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Debug|x86.ActiveCfg = Debug|x86
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Debug|x86.Build.0 = Debug|x86
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Release|Any CPU.Build.0 = Release|Any CPU
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Release|x64.ActiveCfg = Release|x64
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Release|x64.Build.0 = Release|x64
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Release|x86.ActiveCfg = Release|x86
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Release|x86.Build.0 = Release|x86
+		{E46327AB-91BA-415B-899D-AA25DCD3103C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{E46327AB-91BA-415B-899D-AA25DCD3103C}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{E46327AB-91BA-415B-899D-AA25DCD3103C}.Debug|x64.ActiveCfg = Debug|x64
+		{E46327AB-91BA-415B-899D-AA25DCD3103C}.Debug|x64.Build.0 = Debug|x64
+		{E46327AB-91BA-415B-899D-AA25DCD3103C}.Debug|x86.ActiveCfg = Debug|x86
+		{E46327AB-91BA-415B-899D-AA25DCD3103C}.Debug|x86.Build.0 = Debug|x86
+		{E46327AB-91BA-415B-899D-AA25DCD3103C}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{E46327AB-91BA-415B-899D-AA25DCD3103C}.Release|Any CPU.Build.0 = Release|Any CPU
+		{E46327AB-91BA-415B-899D-AA25DCD3103C}.Release|x64.ActiveCfg = Release|x64
+		{E46327AB-91BA-415B-899D-AA25DCD3103C}.Release|x64.Build.0 = Release|x64
+		{E46327AB-91BA-415B-899D-AA25DCD3103C}.Release|x86.ActiveCfg = Release|x86
+		{E46327AB-91BA-415B-899D-AA25DCD3103C}.Release|x86.Build.0 = Release|x86
+		{44C3DD56-D6AC-41E4-A701-C8075A90EBF9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{44C3DD56-D6AC-41E4-A701-C8075A90EBF9}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{44C3DD56-D6AC-41E4-A701-C8075A90EBF9}.Debug|x64.ActiveCfg = Debug|x64
+		{44C3DD56-D6AC-41E4-A701-C8075A90EBF9}.Debug|x64.Build.0 = Debug|x64
+		{44C3DD56-D6AC-41E4-A701-C8075A90EBF9}.Debug|x86.ActiveCfg = Debug|x86
+		{44C3DD56-D6AC-41E4-A701-C8075A90EBF9}.Debug|x86.Build.0 = Debug|x86
+		{44C3DD56-D6AC-41E4-A701-C8075A90EBF9}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{44C3DD56-D6AC-41E4-A701-C8075A90EBF9}.Release|Any CPU.Build.0 = Release|Any CPU
+		{44C3DD56-D6AC-41E4-A701-C8075A90EBF9}.Release|x64.ActiveCfg = Release|x64
+		{44C3DD56-D6AC-41E4-A701-C8075A90EBF9}.Release|x64.Build.0 = Release|x64
+		{44C3DD56-D6AC-41E4-A701-C8075A90EBF9}.Release|x86.ActiveCfg = Release|x86
+		{44C3DD56-D6AC-41E4-A701-C8075A90EBF9}.Release|x86.Build.0 = Release|x86
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Debug|x64.ActiveCfg = Debug|x64
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Debug|x64.Build.0 = Debug|x64
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Debug|x86.ActiveCfg = Debug|x86
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Debug|x86.Build.0 = Debug|x86
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Release|Any CPU.Build.0 = Release|Any CPU
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Release|x64.ActiveCfg = Release|x64
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Release|x64.Build.0 = Release|x64
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Release|x86.ActiveCfg = Release|x86
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Release|x86.Build.0 = Release|x86
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Debug|x64.ActiveCfg = Debug|x64
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Debug|x64.Build.0 = Debug|x64
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Debug|x86.ActiveCfg = Debug|x86
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Debug|x86.Build.0 = Debug|x86
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Release|Any CPU.Build.0 = Release|Any CPU
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Release|x64.ActiveCfg = Release|x64
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Release|x64.Build.0 = Release|x64
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Release|x86.ActiveCfg = Release|x86
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Release|x86.Build.0 = Release|x86
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Debug|x64.ActiveCfg = Debug|x64
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Debug|x64.Build.0 = Debug|x64
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Debug|x86.ActiveCfg = Debug|x86
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Debug|x86.Build.0 = Debug|x86
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Release|Any CPU.Build.0 = Release|Any CPU
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Release|x64.ActiveCfg = Release|x64
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Release|x64.Build.0 = Release|x64
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Release|x86.ActiveCfg = Release|x86
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Release|x86.Build.0 = Release|x86
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Debug|x64.ActiveCfg = Debug|x64
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Debug|x64.Build.0 = Debug|x64
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Debug|x86.ActiveCfg = Debug|x86
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Debug|x86.Build.0 = Debug|x86
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Release|Any CPU.Build.0 = Release|Any CPU
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Release|x64.ActiveCfg = Release|x64
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Release|x64.Build.0 = Release|x64
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Release|x86.ActiveCfg = Release|x86
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Release|x86.Build.0 = Release|x86
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Debug|x64.ActiveCfg = Debug|x64
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Debug|x64.Build.0 = Debug|x64
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Debug|x86.ActiveCfg = Debug|x86
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Debug|x86.Build.0 = Debug|x86
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Release|Any CPU.Build.0 = Release|Any CPU
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Release|x64.ActiveCfg = Release|x64
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Release|x64.Build.0 = Release|x64
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Release|x86.ActiveCfg = Release|x86
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Release|x86.Build.0 = Release|x86
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Debug|x64.ActiveCfg = Debug|x64
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Debug|x64.Build.0 = Debug|x64
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Debug|x86.ActiveCfg = Debug|x86
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Debug|x86.Build.0 = Debug|x86
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Release|Any CPU.Build.0 = Release|Any CPU
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Release|x64.ActiveCfg = Release|x64
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Release|x64.Build.0 = Release|x64
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Release|x86.ActiveCfg = Release|x86
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Release|x86.Build.0 = Release|x86
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Debug|x64.ActiveCfg = Debug|x64
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Debug|x64.Build.0 = Debug|x64
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Debug|x86.ActiveCfg = Debug|x86
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Debug|x86.Build.0 = Debug|x86
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Release|Any CPU.Build.0 = Release|Any CPU
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Release|x64.ActiveCfg = Release|x64
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Release|x64.Build.0 = Release|x64
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Release|x86.ActiveCfg = Release|x86
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Release|x86.Build.0 = Release|x86
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Debug|x64.ActiveCfg = Debug|x64
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Debug|x64.Build.0 = Debug|x64
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Debug|x86.ActiveCfg = Debug|x86
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Debug|x86.Build.0 = Debug|x86
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Release|Any CPU.Build.0 = Release|Any CPU
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Release|x64.ActiveCfg = Release|x64
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Release|x64.Build.0 = Release|x64
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Release|x86.ActiveCfg = Release|x86
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Release|x86.Build.0 = Release|x86
+	EndGlobalSection
+	GlobalSection(NestedProjects) = preSolution
+		{115E2983-51A0-4722-BA01-75223ACC33F8} = {61F0A7C3-5DE2-4C07-AF32-C9BAE2560760}
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D} = {61F0A7C3-5DE2-4C07-AF32-C9BAE2560760}
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9} = {61F0A7C3-5DE2-4C07-AF32-C9BAE2560760}
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E} = {61F0A7C3-5DE2-4C07-AF32-C9BAE2560760}
+		{9779A47A-8012-48BC-A243-EA67EAD22564} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{8C807867-2F10-494D-8564-1C2F91784D3F} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{176CA734-BEC2-47E2-94A3-C496F340A301} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{E46327AB-91BA-415B-899D-AA25DCD3103C} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{44C3DD56-D6AC-41E4-A701-C8075A90EBF9} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{940184A9-4AC9-4A10-964E-CD71E69F865D} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+	EndGlobalSection
+EndGlobal
diff --git a/PlatformServices/ConfigServer/build.gradle b/PlatformServices/ConfigServer/build.gradle
new file mode 100644
index 0000000..dab80da
--- /dev/null
+++ b/PlatformServices/ConfigServer/build.gradle
@@ -0,0 +1,3 @@
+dependencies {
+    compile "org.springframework.cloud:spring-cloud-config-server"
+}
diff --git a/PlatformServices/ConfigServer/src/main/java/io/pivotal/pal/tracker/configserver/App.java b/PlatformServices/ConfigServer/src/main/java/io/pivotal/pal/tracker/configserver/App.java
new file mode 100644
index 0000000..c5eb688
--- /dev/null
+++ b/PlatformServices/ConfigServer/src/main/java/io/pivotal/pal/tracker/configserver/App.java
@@ -0,0 +1,14 @@
+package io.pivotal.pal.tracker.configserver;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.config.server.EnableConfigServer;
+
+@EnableConfigServer
+@SpringBootApplication
+public class App {
+    public static void main(String[] args) {
+        SpringApplication.run(App.class, args);
+    }
+
+}
diff --git a/PlatformServices/ConfigServer/src/main/resources/application.properties b/PlatformServices/ConfigServer/src/main/resources/application.properties
new file mode 100644
index 0000000..6eeb4f1
--- /dev/null
+++ b/PlatformServices/ConfigServer/src/main/resources/application.properties
@@ -0,0 +1,3 @@
+server.application.name=config-server
+server.port=8777
+spring.cloud.config.server.git.uri=https://github.com/<your-github-username>/tracker-config.git
\ No newline at end of file
diff --git a/PlatformServices/EurekaServer/build.gradle b/PlatformServices/EurekaServer/build.gradle
new file mode 100644
index 0000000..591c148
--- /dev/null
+++ b/PlatformServices/EurekaServer/build.gradle
@@ -0,0 +1,4 @@
+dependencies {
+    compile "org.springframework.boot:spring-boot-starter-web"
+    compile "org.springframework.cloud:spring-cloud-starter-eureka-server"
+}
\ No newline at end of file
diff --git a/PlatformServices/EurekaServer/src/main/java/io/pivotal/pal/tracker/eurekaserver/App.java b/PlatformServices/EurekaServer/src/main/java/io/pivotal/pal/tracker/eurekaserver/App.java
new file mode 100644
index 0000000..d591a19
--- /dev/null
+++ b/PlatformServices/EurekaServer/src/main/java/io/pivotal/pal/tracker/eurekaserver/App.java
@@ -0,0 +1,14 @@
+package io.pivotal.pal.tracker.eurekaserver;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;
+
+@EnableEurekaServer
+@SpringBootApplication
+public class App {
+
+    public static void main(String[] args) {
+        SpringApplication.run(App.class, args);
+    }
+}
diff --git a/PlatformServices/EurekaServer/src/main/resources/application.properties b/PlatformServices/EurekaServer/src/main/resources/application.properties
new file mode 100644
index 0000000..d0657d2
--- /dev/null
+++ b/PlatformServices/EurekaServer/src/main/resources/application.properties
@@ -0,0 +1,3 @@
+server.application.name=eureka-server
+server.port=8761
+eureka.client.registerWithEureka=false
diff --git a/PlatformServices/HystrixDashboard/build.gradle b/PlatformServices/HystrixDashboard/build.gradle
new file mode 100644
index 0000000..27a9a63
--- /dev/null
+++ b/PlatformServices/HystrixDashboard/build.gradle
@@ -0,0 +1,4 @@
+dependencies {
+    compile "org.springframework.boot:spring-boot-starter-actuator"
+    compile "org.springframework.cloud:spring-cloud-starter-hystrix-dashboard"
+}
diff --git a/PlatformServices/HystrixDashboard/src/main/java/io/pivotal/pal/tracker/hystrixdashboard/App.java b/PlatformServices/HystrixDashboard/src/main/java/io/pivotal/pal/tracker/hystrixdashboard/App.java
new file mode 100644
index 0000000..44e90d9
--- /dev/null
+++ b/PlatformServices/HystrixDashboard/src/main/java/io/pivotal/pal/tracker/hystrixdashboard/App.java
@@ -0,0 +1,14 @@
+package io.pivotal.pal.tracker.hystrixdashboard;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;
+
+@EnableHystrixDashboard
+@SpringBootApplication
+public class App {
+
+    public static void main(String[] args) {
+        SpringApplication.run(App.class, args);
+    }
+}
diff --git a/PlatformServices/HystrixDashboard/src/main/resources/application.properties b/PlatformServices/HystrixDashboard/src/main/resources/application.properties
new file mode 100644
index 0000000..3c094ca
--- /dev/null
+++ b/PlatformServices/HystrixDashboard/src/main/resources/application.properties
@@ -0,0 +1,2 @@
+server.application.name=hystrix-dashboard
+server.port=7979
diff --git a/PlatformServices/OAuthServer/build.gradle b/PlatformServices/OAuthServer/build.gradle
new file mode 100644
index 0000000..33c09d2
--- /dev/null
+++ b/PlatformServices/OAuthServer/build.gradle
@@ -0,0 +1,5 @@
+dependencies {
+    compile "org.springframework.boot:spring-boot-starter-web"
+    compile "org.springframework.boot:spring-boot-starter-security"
+    compile "org.springframework.security.oauth:spring-security-oauth2"
+}
diff --git a/PlatformServices/OAuthServer/src/main/java/io/pivotal/pal/tracker/oauthserver/App.java b/PlatformServices/OAuthServer/src/main/java/io/pivotal/pal/tracker/oauthserver/App.java
new file mode 100644
index 0000000..40cdd36
--- /dev/null
+++ b/PlatformServices/OAuthServer/src/main/java/io/pivotal/pal/tracker/oauthserver/App.java
@@ -0,0 +1,33 @@
+package io.pivotal.pal.tracker.oauthserver;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
+import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
+import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
+import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
+
+@EnableAuthorizationServer
+@SpringBootApplication
+public class App extends AuthorizationServerConfigurerAdapter {
+    public static void main(String[] args) {
+        SpringApplication.run(App.class, args);
+    }
+
+    @Override
+    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
+        clients.inMemory()
+            .withClient("tracker-client")
+            .secret("supersecret")
+            .authorizedGrantTypes("client_credentials")
+            .scopes("openid");
+    }
+
+    @Override
+    public void configure(AuthorizationServerSecurityConfigurer oauthServer)
+        throws Exception {
+        oauthServer
+            .tokenKeyAccess("permitAll()")
+            .checkTokenAccess("isAuthenticated()");
+    }
+}
diff --git a/PlatformServices/OAuthServer/src/main/resources/application.properties b/PlatformServices/OAuthServer/src/main/resources/application.properties
new file mode 100644
index 0000000..8bf9ef0
--- /dev/null
+++ b/PlatformServices/OAuthServer/src/main/resources/application.properties
@@ -0,0 +1,2 @@
+server.application.name=oauth-server
+server.port=8999
diff --git a/PlatformServices/build.gradle b/PlatformServices/build.gradle
new file mode 100644
index 0000000..fb65c39
--- /dev/null
+++ b/PlatformServices/build.gradle
@@ -0,0 +1,31 @@
+buildscript {
+    ext {
+        springBootVersion = "1.5.3.RELEASE"
+        springCloudDependenciesVersion = "Camden.SR6"
+    }
+
+    repositories {
+        mavenCentral()
+        jcenter()
+    }
+
+    dependencies {
+        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
+    }
+}
+
+subprojects {
+    apply plugin: "org.springframework.boot"
+    apply plugin: "io.spring.dependency-management"
+
+    dependencyManagement {
+        imports {
+            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudDependenciesVersion"
+        }
+    }
+
+    repositories {
+        mavenCentral()
+        jcenter()
+    }
+}
diff --git a/PlatformServices/gradle/wrapper/gradle-wrapper.jar b/PlatformServices/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000000000000000000000000000000000000..f435809035504554256214029dbca19a769a051e
GIT binary patch
literal 54208
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
ZvJ&8cebi4AA;3roFo=`@{x1;F{{xu9wwwR}

literal 0
HcmV?d00001

diff --git a/PlatformServices/gradle/wrapper/gradle-wrapper.properties b/PlatformServices/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000..59aa9fe
--- /dev/null
+++ b/PlatformServices/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Fri Nov 10 10:02:25 MST 2017
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-bin.zip
diff --git a/PlatformServices/gradlew b/PlatformServices/gradlew
new file mode 100755
index 0000000..4453cce
--- /dev/null
+++ b/PlatformServices/gradlew
@@ -0,0 +1,172 @@
+#!/usr/bin/env sh
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save ( ) {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=$(save "$@")
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
+
+exec "$JAVACMD" "$@"
diff --git a/PlatformServices/gradlew.bat b/PlatformServices/gradlew.bat
new file mode 100644
index 0000000..f955316
--- /dev/null
+++ b/PlatformServices/gradlew.bat
@@ -0,0 +1,84 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/PlatformServices/settings.gradle b/PlatformServices/settings.gradle
new file mode 100644
index 0000000..4d92f21
--- /dev/null
+++ b/PlatformServices/settings.gradle
@@ -0,0 +1,6 @@
+rootProject.name = "PlatformServices"
+
+include "EurekaServer"
+include "OAuthServer"
+include "ConfigServer"
+include "HystrixDashboard"
diff --git a/grh-config.json b/grh-config.json
new file mode 100644
index 0000000..79e94c9
--- /dev/null
+++ b/grh-config.json
@@ -0,0 +1,21 @@
+{
+    "branchToRevise": "solution",
+    "incrementCommits": [
+        {
+            "message": "Add security",
+            "tags": ["config-server"]
+        },
+        {
+            "message": "Enable circuit breaker",
+            "tags": ["security"]
+        },
+        {
+            "message": "Enable service discovery",
+            "tags": ["circuit-breaker"]
+        },
+        {
+            "message": "Initial commit",
+            "tags": ["distributed-system", "service-discovery"]
+        }
+    ]
+}
\ No newline at end of file
diff --git a/manifest-allocations.yml b/manifest-allocations.yml
new file mode 100644
index 0000000..7eee2a3
--- /dev/null
+++ b/manifest-allocations.yml
@@ -0,0 +1,12 @@
+---
+applications:
+- name: tracker-allocations
+  buildpack: https://github.com/cloudfoundry/dotnet-core-buildpack#v2.0.2
+  instances: 1
+  memory: 256M
+  host: allocations-pal-INITIALS
+  path: Applications/AllocationsServer/bin/Release/netcoreapp2.0/publish
+  env:
+    REGISTRATION_SERVER_ENDPOINT: http://FILL_ME_IN/
+  services:
+  - tracker-allocations-database
\ No newline at end of file
diff --git a/manifest-backlog.yml b/manifest-backlog.yml
new file mode 100644
index 0000000..45d85cc
--- /dev/null
+++ b/manifest-backlog.yml
@@ -0,0 +1,12 @@
+---
+applications:
+- name: tracker-backlog
+  buildpack: https://github.com/cloudfoundry/dotnet-core-buildpack#v2.0.2
+  instances: 1
+  memory: 256M
+  host: backlog-pal-INITIALS
+  path: Applications/BacklogServer/bin/Release/netcoreapp2.0/publish
+  env:
+    REGISTRATION_SERVER_ENDPOINT: http://FILL_ME_IN/
+  services:
+  - tracker-backlog-database
\ No newline at end of file
diff --git a/manifest-registration.yml b/manifest-registration.yml
new file mode 100644
index 0000000..940f6fc
--- /dev/null
+++ b/manifest-registration.yml
@@ -0,0 +1,10 @@
+---
+applications:
+- name: tracker-registration
+  buildpack: https://github.com/cloudfoundry/dotnet-core-buildpack#v2.0.2
+  instances: 1
+  memory: 256M
+  host: registration-pal-INITIALS
+  path: Applications/RegistrationServer/bin/Release/netcoreapp2.0/publish
+  services:
+  - tracker-registration-database
\ No newline at end of file
diff --git a/manifest-timesheets.yml b/manifest-timesheets.yml
new file mode 100644
index 0000000..f5e1866
--- /dev/null
+++ b/manifest-timesheets.yml
@@ -0,0 +1,12 @@
+---
+applications:
+- name: tracker-timesheets
+  buildpack: https://github.com/cloudfoundry/dotnet-core-buildpack#v2.0.2
+  instances: 1
+  memory: 256M
+  host: timesheets-pal-INITIALS
+  path: Applications/TimesheetsServer/bin/Release/netcoreapp2.0/publish
+  env:
+    REGISTRATION_SERVER_ENDPOINT: http://FILL_ME_IN/
+  services:
+  - tracker-timesheets-database
\ No newline at end of file
diff --git a/migrate-cf.sh b/migrate-cf.sh
new file mode 100755
index 0000000..7a762ab
--- /dev/null
+++ b/migrate-cf.sh
@@ -0,0 +1,55 @@
+#!/usr/bin/env bash
+
+set -e
+
+cfMigrate() {
+    trap "kill 0" EXIT
+        appName=$1
+        migrationsPath=Databases/${appName/tracker-/}-database
+        
+        appGuid=$(cf app $1 --guid)
+        credentials=$(cf curl v2/apps/${appGuid}/env | jq -r .system_env_json'.VCAP_SERVICES["p-mysql"][].credentials')
+        
+        database=$(echo ${credentials} | jq -r .name)
+        username=$(echo ${credentials} | jq -r .username)
+        hostname=$(echo ${credentials} | jq -r .hostname)
+        password=$(echo ${credentials} | jq -r .password)
+    
+        openTunnel ${hostname} ${appName}
+        migrate ${username} ${password} ${database} ${migrationsPath}
+        closeTunnel $!
+    wait
+}
+
+function openTunnel() {
+    echo -e "\nOpening tunnel..."
+    local hostname=$1
+    local appName=$2
+    
+    cf ssh -N -L 63306:${hostname}:3306 ${appName} &
+    sleep 5
+}
+
+function closeTunnel() {
+    echo -e "\nClosing tunnel..."
+    kill -9 $1
+    wait $1 2>/dev/null
+}
+
+function migrate() {
+    echo -e "\nRunning migrations...\n"
+    local username=$1
+    local password=$2
+    local database=$3
+    local migrationsPath=$4
+    
+    flyway -user=${username} \
+        -password=${password} \
+        -url="jdbc:mysql://127.0.0.1:63306/${database}" \
+        -locations=filesystem:${migrationsPath} clean migrate
+}
+
+cfMigrate tracker-allocations &&
+cfMigrate tracker-backlog &&
+cfMigrate tracker-registration &&
+cfMigrate tracker-timesheets
diff --git a/migrate-local.sh b/migrate-local.sh
new file mode 100755
index 0000000..95a1df3
--- /dev/null
+++ b/migrate-local.sh
@@ -0,0 +1,23 @@
+#!/usr/bin/env bash
+
+set -e
+
+suffix=$(echo ${1} | tr '[:upper:]' '[:lower:]')
+
+if [[ $# != 1 || !(${suffix} == 'test' || ${suffix} == 'dev') ]]
+then
+    echo -e "\nusage:\n\n$0 test\n$0 dev\n"
+    exit 1
+fi
+
+for dir in Databases/*/
+do
+    dir=${dir%*/}
+    dir=${dir##*/}
+    dbName=tracker_${dir/-database/}_${suffix}
+
+    flyway -user=tracker \
+    -password=password \
+    -url="jdbc:mysql://localhost:3306/${dbName}" \
+    -locations=filesystem:Databases/${dir} clean migrate;
+done
\ No newline at end of file
diff --git a/references.sh b/references.sh
new file mode 100755
index 0000000..cc65b3f
--- /dev/null
+++ b/references.sh
@@ -0,0 +1,13 @@
+#!/usr/bin/env bash
+
+
+for topDir in Applications Components
+do
+    for subDir in ./${topDir}/*
+    do
+        subDir=${subDir%*/}
+        subDir=${subDir##*/}
+        echo -e "\n${subDir}"
+        dotnet list "./${topDir}/${subDir}/${subDir}.csproj" reference
+    done
+done
\ No newline at end of file
diff --git a/start-server.sh b/start-server.sh
new file mode 100755
index 0000000..2c08400
--- /dev/null
+++ b/start-server.sh
@@ -0,0 +1,51 @@
+#!/usr/bin/env bash
+
+set -e
+
+declare -a apps=( "Registration" "Allocations" "Backlog" "Timesheets" )
+declare -a ports=( 8883 8881 8882 8884 )
+
+function usage() {
+    echo -e "\nStarts a specific server or all servers if the name is omitted.\n\nUsage:\n\n$0 [$(join_by ' | ' "${apps[@]}")]\n"
+    exit 1
+}
+
+function join_by {
+    local d=$1
+    shift
+    echo -n "$1"
+    shift
+    printf "%s" "${@/#/$d}"
+}
+
+function to_lower() {
+    echo $1 | tr '[:upper:]' '[:lower:]'
+}
+
+function start_server() {
+    local projectPath=Applications/${1}Server/${1}Server.csproj
+    local dbName=tracker_$(to_lower $1)_dev
+    local port=$2
+    local vcap_services=$(cat vcap_services.json | sed -e "s/<<DB_NAME>>/${dbName}/")
+    
+    export Logging__LogLevel__Default=Debug
+    export REGISTRATION_SERVER_ENDPOINT=http://localhost:8883/
+    export VCAP_SERVICES=${vcap_services}
+    
+    dotnet run --project "$projectPath" --urls "http://*:${port}"
+}
+
+if [[ -n "$1" ]] && [[ ! " ${apps[@]} " =~ " ${1} " ]]
+    then usage
+fi
+
+trap "kill 0" EXIT
+    for i in ${!apps[@]}
+    do
+        app=${apps[$i]}
+        if [[ "$1" = "$app" ]] || [ -z "$1" ]
+        then
+            start_server "$app" "${ports[$i]}" &
+        fi
+    done
+wait
\ No newline at end of file
diff --git a/test.sh b/test.sh
new file mode 100755
index 0000000..1e8fc0d
--- /dev/null
+++ b/test.sh
@@ -0,0 +1,8 @@
+#!/usr/bin/env bash
+
+set -e
+
+for dir in ./Components/*Test
+do
+    dotnet test ${dir}/*.csproj;
+done
diff --git a/vcap_services.json b/vcap_services.json
new file mode 100644
index 0000000..7521eb5
--- /dev/null
+++ b/vcap_services.json
@@ -0,0 +1,22 @@
+{
+    "p-mysql": [
+        {
+            "credentials": {
+                "hostname": "localhost",
+                "port": 3306,
+                "name": "<<DB_NAME>>",
+                "username": "tracker",
+                "password": "password",
+                "uri": "mysql://tracker:password@localhost:3306/<<DB_NAME>>?reconnect=true",
+                "jdbcUrl": "jdbc:mysql://localhost:3306/<<DB_NAME>>?user=tracker&password=password"
+            },
+            "syslog_drain_url": null,
+            "volume_mounts": [],
+            "label": "p-mysql",
+            "provider": null,
+            "plan": "100mb",
+            "name": "tracker-database",
+            "tags": ["mysql", "relational"]
+        }
+    ]
+}
\ No newline at end of file
-- 
2.14.3 (Apple Git-98)

