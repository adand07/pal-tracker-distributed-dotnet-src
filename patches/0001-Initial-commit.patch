From 446e84aae0a5a637c5c91394142d6cc0bc9f39cb Mon Sep 17 00:00:00 2001
From: Alex Sartan <asartan@pivotal.io>
Date: Tue, 6 Feb 2018 11:12:02 -0700
Subject: [PATCH 1/5] Initial commit

---
 .circleci/config.yml                               | 226 +++++++++++++++
 .gitignore                                         |  32 +++
 .../AllocationsServer/AllocationsServer.csproj     |  19 ++
 Applications/AllocationsServer/Program.cs          |  25 ++
 Applications/AllocationsServer/Startup.cs          |  51 ++++
 .../AllocationsServer/appsettings.Development.json |  10 +
 Applications/AllocationsServer/appsettings.json    |  14 +
 Applications/BacklogServer/BacklogServer.csproj    |  19 ++
 Applications/BacklogServer/Program.cs              |  25 ++
 Applications/BacklogServer/Startup.cs              |  51 ++++
 .../BacklogServer/appsettings.Development.json     |  10 +
 Applications/BacklogServer/appsettings.json        |  14 +
 Applications/RegistrationServer/Program.cs         |  25 ++
 .../RegistrationServer/RegistrationServer.csproj   |  21 ++
 Applications/RegistrationServer/Startup.cs         |  47 ++++
 .../appsettings.Development.json                   |  10 +
 Applications/RegistrationServer/appsettings.json   |  13 +
 Applications/TimesheetsServer/Program.cs           |  25 ++
 Applications/TimesheetsServer/Startup.cs           |  51 ++++
 .../TimesheetsServer/TimesheetsServer.csproj       |  19 ++
 .../TimesheetsServer/appsettings.Development.json  |  10 +
 Applications/TimesheetsServer/appsettings.json     |  14 +
 Components/Accounts/AccountContext.cs              |  13 +
 Components/Accounts/AccountController.cs           |  26 ++
 Components/Accounts/AccountDataGateway.cs          |  31 +++
 Components/Accounts/AccountInfo.cs                 |  18 ++
 Components/Accounts/AccountRecord.cs               |  27 ++
 Components/Accounts/Accounts.csproj                |  15 +
 Components/Accounts/IAccountDataGateway.cs         |  11 +
 Components/Accounts/IRegistrationService.cs        |   9 +
 Components/Accounts/RegistrationController.cs      |  24 ++
 Components/Accounts/RegistrationService.cs         |  24 ++
 Components/AccountsTest/AccountControllerTest.cs   |  45 +++
 Components/AccountsTest/AccountDataGatewayTest.cs  |  56 ++++
 Components/AccountsTest/AccountsTest.csproj        |  17 ++
 .../AccountsTest/RegistrationControllerTest.cs     |  35 +++
 Components/AccountsTest/RegistrationServiceTest.cs |  40 +++
 Components/Allocations/AllocationContext.cs        |  13 +
 Components/Allocations/AllocationController.cs     |  45 +++
 Components/Allocations/AllocationDataGateway.cs    |  32 +++
 Components/Allocations/AllocationInfo.cs           |  25 ++
 Components/Allocations/AllocationRecord.cs         |  33 +++
 Components/Allocations/Allocations.csproj          |  15 +
 Components/Allocations/IAllocationDataGateway.cs   |  12 +
 Components/Allocations/IProjectClient.cs           |   9 +
 Components/Allocations/ProjectClient.cs            |  25 ++
 Components/Allocations/ProjectInfo.cs              |  16 ++
 .../AllocationsTest/AllocationsControllerTest.cs   |  90 ++++++
 .../AllocationsTest/AllocationsDataGatewayTest.cs  |  53 ++++
 Components/AllocationsTest/AllocationsTest.csproj  |  16 ++
 Components/Backlog/Backlog.csproj                  |  15 +
 Components/Backlog/IProjectClient.cs               |   9 +
 Components/Backlog/IStoryDataGateway.cs            |  11 +
 Components/Backlog/ProjectClient.cs                |  25 ++
 Components/Backlog/ProjectInfo.cs                  |  16 ++
 Components/Backlog/StoryContext.cs                 |  13 +
 Components/Backlog/StoryController.cs              |  43 +++
 Components/Backlog/StoryDataGateway.cs             |  31 +++
 Components/Backlog/StoryInfo.cs                    |  19 ++
 Components/Backlog/StoryRecord.cs                  |  27 ++
 Components/BacklogTest/BacklogTest.csproj          |  16 ++
 Components/BacklogTest/StoryControllerTest.cs      |  77 +++++
 Components/BacklogTest/StoryDataGatewayTest.cs     |  50 ++++
 Components/DefaultRoute/DefaultController.cs       |  11 +
 Components/DefaultRoute/DefaultRoute.csproj        |  10 +
 Components/Projects/IProjectDataGateway.cs         |  13 +
 Components/Projects/ProjectContext.cs              |  13 +
 Components/Projects/ProjectController.cs           |  48 ++++
 Components/Projects/ProjectDataGateway.cs          |  36 +++
 Components/Projects/ProjectInfo.cs                 |  21 ++
 Components/Projects/ProjectRecord.cs               |  29 ++
 Components/Projects/Projects.csproj                |  14 +
 Components/ProjectsTest/ProjectControllerTest.cs   |  90 ++++++
 Components/ProjectsTest/ProjectDataGatewayTest.cs  |  79 ++++++
 Components/ProjectsTest/ProjectsTest.csproj        |  18 ++
 Components/TestSupport/TestDatabaseSupport.cs      | 113 ++++++++
 Components/TestSupport/TestSupport.csproj          |  15 +
 Components/Timesheets/IProjectClient.cs            |   9 +
 Components/Timesheets/ITimeEntryDataGateway.cs     |  12 +
 Components/Timesheets/ProjectClient.cs             |  25 ++
 Components/Timesheets/ProjectInfo.cs               |  16 ++
 Components/Timesheets/TimeEntryContext.cs          |  13 +
 Components/Timesheets/TimeEntryController.cs       |  45 +++
 Components/Timesheets/TimeEntryDataGateway.cs      |  32 +++
 Components/Timesheets/TimeEntryInfo.cs             |  25 ++
 Components/Timesheets/TimeEntryRecord.cs           |  33 +++
 Components/Timesheets/Timesheets.csproj            |  15 +
 .../TimesheetsTest/TimeEntryControllerTest.cs      |  96 +++++++
 .../TimesheetsTest/TimeEntryDataGatewayTest.cs     |  53 ++++
 Components/TimesheetsTest/TimesheetsTest.csproj    |  16 ++
 Components/Users/IUserDataGateway.cs               |   9 +
 Components/Users/UserContext.cs                    |  13 +
 Components/Users/UserController.cs                 |  28 ++
 Components/Users/UserDataGateway.cs                |  30 ++
 Components/Users/UserInfo.cs                       |  16 ++
 Components/Users/UserRecord.cs                     |  25 ++
 Components/Users/Users.csproj                      |  14 +
 Components/UsersTest/UserControllerTest.cs         |  43 +++
 Components/UsersTest/UserDataGatewayTest.cs        |  50 ++++
 Components/UsersTest/UsersTest.csproj              |  16 ++
 .../migrations/V1__initial_schema.sql              |  11 +
 .../migrations/V1__initial_schema.sql              |   9 +
 Databases/create_databases.sql                     |  22 ++
 .../migrations/V1__initial_schema.sql              |  34 +++
 .../migrations/V1__initial_schema.sql              |  11 +
 Directory.Build.targets                            |   5 +
 IntegrationTest/AppServerBuilder.AppServer.cs      |  97 +++++++
 IntegrationTest/AppServerBuilder.cs                |  49 ++++
 IntegrationTest/FlowTest.cs                        | 194 +++++++++++++
 IntegrationTest/IntegrationTest.csproj             |  20 ++
 PalTracker.sln                                     | 310 +++++++++++++++++++++
 PlatformServices/ConfigServer/build.gradle         |   3 +
 .../io/pivotal/pal/tracker/configserver/App.java   |  14 +
 .../src/main/resources/application.properties      |   3 +
 PlatformServices/EurekaServer/build.gradle         |   4 +
 .../io/pivotal/pal/tracker/eurekaserver/App.java   |  14 +
 .../src/main/resources/application.properties      |   3 +
 PlatformServices/HystrixDashboard/build.gradle     |   4 +
 .../pivotal/pal/tracker/hystrixdashboard/App.java  |  14 +
 .../src/main/resources/application.properties      |   2 +
 PlatformServices/OAuthServer/build.gradle          |   5 +
 .../io/pivotal/pal/tracker/oauthserver/App.java    |  33 +++
 .../src/main/resources/application.properties      |   2 +
 PlatformServices/build.gradle                      |  31 +++
 PlatformServices/gradle/wrapper/gradle-wrapper.jar | Bin 0 -> 54417 bytes
 .../gradle/wrapper/gradle-wrapper.properties       |   5 +
 PlatformServices/gradlew                           | 172 ++++++++++++
 PlatformServices/gradlew.bat                       |  84 ++++++
 PlatformServices/settings.gradle                   |   6 +
 after.PalTracker.sln.targets                       |   5 +
 grh-config.json                                    |  21 ++
 manifest-allocations.yml                           |  11 +
 manifest-backlog.yml                               |  11 +
 manifest-registration.yml                          |   9 +
 manifest-timesheets.yml                            |  11 +
 migrate-cf.sh                                      |  55 ++++
 migrate-local.sh                                   |  23 ++
 references.sh                                      |  13 +
 requests.http                                      |  49 ++++
 rest-client.env.json                               |  14 +
 scripts/build.sh                                   |  37 +++
 scripts/migrate-databases.sh                       |  23 ++
 start-server.sh                                    |  38 +++
 143 files changed, 4483 insertions(+)
 create mode 100644 .circleci/config.yml
 create mode 100644 .gitignore
 create mode 100755 Applications/AllocationsServer/AllocationsServer.csproj
 create mode 100755 Applications/AllocationsServer/Program.cs
 create mode 100755 Applications/AllocationsServer/Startup.cs
 create mode 100755 Applications/AllocationsServer/appsettings.Development.json
 create mode 100755 Applications/AllocationsServer/appsettings.json
 create mode 100755 Applications/BacklogServer/BacklogServer.csproj
 create mode 100755 Applications/BacklogServer/Program.cs
 create mode 100755 Applications/BacklogServer/Startup.cs
 create mode 100755 Applications/BacklogServer/appsettings.Development.json
 create mode 100755 Applications/BacklogServer/appsettings.json
 create mode 100755 Applications/RegistrationServer/Program.cs
 create mode 100755 Applications/RegistrationServer/RegistrationServer.csproj
 create mode 100755 Applications/RegistrationServer/Startup.cs
 create mode 100755 Applications/RegistrationServer/appsettings.Development.json
 create mode 100755 Applications/RegistrationServer/appsettings.json
 create mode 100755 Applications/TimesheetsServer/Program.cs
 create mode 100755 Applications/TimesheetsServer/Startup.cs
 create mode 100755 Applications/TimesheetsServer/TimesheetsServer.csproj
 create mode 100755 Applications/TimesheetsServer/appsettings.Development.json
 create mode 100755 Applications/TimesheetsServer/appsettings.json
 create mode 100644 Components/Accounts/AccountContext.cs
 create mode 100644 Components/Accounts/AccountController.cs
 create mode 100644 Components/Accounts/AccountDataGateway.cs
 create mode 100755 Components/Accounts/AccountInfo.cs
 create mode 100644 Components/Accounts/AccountRecord.cs
 create mode 100755 Components/Accounts/Accounts.csproj
 create mode 100644 Components/Accounts/IAccountDataGateway.cs
 create mode 100644 Components/Accounts/IRegistrationService.cs
 create mode 100644 Components/Accounts/RegistrationController.cs
 create mode 100644 Components/Accounts/RegistrationService.cs
 create mode 100755 Components/AccountsTest/AccountControllerTest.cs
 create mode 100755 Components/AccountsTest/AccountDataGatewayTest.cs
 create mode 100755 Components/AccountsTest/AccountsTest.csproj
 create mode 100755 Components/AccountsTest/RegistrationControllerTest.cs
 create mode 100755 Components/AccountsTest/RegistrationServiceTest.cs
 create mode 100644 Components/Allocations/AllocationContext.cs
 create mode 100755 Components/Allocations/AllocationController.cs
 create mode 100644 Components/Allocations/AllocationDataGateway.cs
 create mode 100755 Components/Allocations/AllocationInfo.cs
 create mode 100644 Components/Allocations/AllocationRecord.cs
 create mode 100755 Components/Allocations/Allocations.csproj
 create mode 100644 Components/Allocations/IAllocationDataGateway.cs
 create mode 100644 Components/Allocations/IProjectClient.cs
 create mode 100644 Components/Allocations/ProjectClient.cs
 create mode 100644 Components/Allocations/ProjectInfo.cs
 create mode 100644 Components/AllocationsTest/AllocationsControllerTest.cs
 create mode 100755 Components/AllocationsTest/AllocationsDataGatewayTest.cs
 create mode 100755 Components/AllocationsTest/AllocationsTest.csproj
 create mode 100755 Components/Backlog/Backlog.csproj
 create mode 100644 Components/Backlog/IProjectClient.cs
 create mode 100755 Components/Backlog/IStoryDataGateway.cs
 create mode 100644 Components/Backlog/ProjectClient.cs
 create mode 100644 Components/Backlog/ProjectInfo.cs
 create mode 100644 Components/Backlog/StoryContext.cs
 create mode 100755 Components/Backlog/StoryController.cs
 create mode 100755 Components/Backlog/StoryDataGateway.cs
 create mode 100755 Components/Backlog/StoryInfo.cs
 create mode 100755 Components/Backlog/StoryRecord.cs
 create mode 100755 Components/BacklogTest/BacklogTest.csproj
 create mode 100755 Components/BacklogTest/StoryControllerTest.cs
 create mode 100755 Components/BacklogTest/StoryDataGatewayTest.cs
 create mode 100755 Components/DefaultRoute/DefaultController.cs
 create mode 100755 Components/DefaultRoute/DefaultRoute.csproj
 create mode 100644 Components/Projects/IProjectDataGateway.cs
 create mode 100644 Components/Projects/ProjectContext.cs
 create mode 100644 Components/Projects/ProjectController.cs
 create mode 100644 Components/Projects/ProjectDataGateway.cs
 create mode 100644 Components/Projects/ProjectInfo.cs
 create mode 100644 Components/Projects/ProjectRecord.cs
 create mode 100755 Components/Projects/Projects.csproj
 create mode 100755 Components/ProjectsTest/ProjectControllerTest.cs
 create mode 100755 Components/ProjectsTest/ProjectDataGatewayTest.cs
 create mode 100755 Components/ProjectsTest/ProjectsTest.csproj
 create mode 100644 Components/TestSupport/TestDatabaseSupport.cs
 create mode 100755 Components/TestSupport/TestSupport.csproj
 create mode 100644 Components/Timesheets/IProjectClient.cs
 create mode 100755 Components/Timesheets/ITimeEntryDataGateway.cs
 create mode 100644 Components/Timesheets/ProjectClient.cs
 create mode 100644 Components/Timesheets/ProjectInfo.cs
 create mode 100644 Components/Timesheets/TimeEntryContext.cs
 create mode 100755 Components/Timesheets/TimeEntryController.cs
 create mode 100755 Components/Timesheets/TimeEntryDataGateway.cs
 create mode 100755 Components/Timesheets/TimeEntryInfo.cs
 create mode 100755 Components/Timesheets/TimeEntryRecord.cs
 create mode 100755 Components/Timesheets/Timesheets.csproj
 create mode 100755 Components/TimesheetsTest/TimeEntryControllerTest.cs
 create mode 100755 Components/TimesheetsTest/TimeEntryDataGatewayTest.cs
 create mode 100755 Components/TimesheetsTest/TimesheetsTest.csproj
 create mode 100644 Components/Users/IUserDataGateway.cs
 create mode 100644 Components/Users/UserContext.cs
 create mode 100644 Components/Users/UserController.cs
 create mode 100644 Components/Users/UserDataGateway.cs
 create mode 100644 Components/Users/UserInfo.cs
 create mode 100755 Components/Users/UserRecord.cs
 create mode 100755 Components/Users/Users.csproj
 create mode 100644 Components/UsersTest/UserControllerTest.cs
 create mode 100755 Components/UsersTest/UserDataGatewayTest.cs
 create mode 100755 Components/UsersTest/UsersTest.csproj
 create mode 100644 Databases/allocations-database/migrations/V1__initial_schema.sql
 create mode 100644 Databases/backlog-database/migrations/V1__initial_schema.sql
 create mode 100644 Databases/create_databases.sql
 create mode 100644 Databases/registration-database/migrations/V1__initial_schema.sql
 create mode 100644 Databases/timesheets-database/migrations/V1__initial_schema.sql
 create mode 100644 Directory.Build.targets
 create mode 100644 IntegrationTest/AppServerBuilder.AppServer.cs
 create mode 100644 IntegrationTest/AppServerBuilder.cs
 create mode 100644 IntegrationTest/FlowTest.cs
 create mode 100644 IntegrationTest/IntegrationTest.csproj
 create mode 100644 PalTracker.sln
 create mode 100644 PlatformServices/ConfigServer/build.gradle
 create mode 100644 PlatformServices/ConfigServer/src/main/java/io/pivotal/pal/tracker/configserver/App.java
 create mode 100644 PlatformServices/ConfigServer/src/main/resources/application.properties
 create mode 100644 PlatformServices/EurekaServer/build.gradle
 create mode 100644 PlatformServices/EurekaServer/src/main/java/io/pivotal/pal/tracker/eurekaserver/App.java
 create mode 100644 PlatformServices/EurekaServer/src/main/resources/application.properties
 create mode 100644 PlatformServices/HystrixDashboard/build.gradle
 create mode 100644 PlatformServices/HystrixDashboard/src/main/java/io/pivotal/pal/tracker/hystrixdashboard/App.java
 create mode 100644 PlatformServices/HystrixDashboard/src/main/resources/application.properties
 create mode 100644 PlatformServices/OAuthServer/build.gradle
 create mode 100644 PlatformServices/OAuthServer/src/main/java/io/pivotal/pal/tracker/oauthserver/App.java
 create mode 100644 PlatformServices/OAuthServer/src/main/resources/application.properties
 create mode 100644 PlatformServices/build.gradle
 create mode 100644 PlatformServices/gradle/wrapper/gradle-wrapper.jar
 create mode 100644 PlatformServices/gradle/wrapper/gradle-wrapper.properties
 create mode 100755 PlatformServices/gradlew
 create mode 100644 PlatformServices/gradlew.bat
 create mode 100644 PlatformServices/settings.gradle
 create mode 100644 after.PalTracker.sln.targets
 create mode 100644 grh-config.json
 create mode 100644 manifest-allocations.yml
 create mode 100644 manifest-backlog.yml
 create mode 100644 manifest-registration.yml
 create mode 100644 manifest-timesheets.yml
 create mode 100755 migrate-cf.sh
 create mode 100755 migrate-local.sh
 create mode 100755 references.sh
 create mode 100644 requests.http
 create mode 100644 rest-client.env.json
 create mode 100755 scripts/build.sh
 create mode 100755 scripts/migrate-databases.sh
 create mode 100755 start-server.sh

diff --git a/.circleci/config.yml b/.circleci/config.yml
new file mode 100644
index 0000000..50a91bf
--- /dev/null
+++ b/.circleci/config.yml
@@ -0,0 +1,226 @@
+version: 2
+jobs:
+  build:
+    docker:
+      - image: 'microsoft/dotnet:2-sdk'
+        environment:
+          DEBIAN_FRONTEND: "noninteractive"
+    steps:
+      - checkout
+      - run:
+          # May be able to use another docker container for this??
+          name: Install MySQL
+          command: |
+            apt-get update
+            apt-get -y install mysql-server
+            service mysql start
+
+            # Wait for MySQL to start
+            sleep 5
+
+      - run:
+          name: Install flyway
+          command: |
+            curl https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/5.1.1/flyway-commandline-5.1.1-linux-x64.tar.gz | tar xvz
+
+      - run:
+          name: Create test database and migrate
+          command: |
+            mysql -uroot < Databases/create_databases.sql
+            flyway-*/flyway -url="jdbc:mysql://localhost:3306/tracker_allocations_dotnet_test" -user=tracker_dotnet -password=password  -locations=filesystem:Databases/allocations-database migrate
+            flyway-*/flyway -url="jdbc:mysql://localhost:3306/tracker_backlog_dotnet_test" -user=tracker_dotnet -password=password  -locations=filesystem:Databases/backlog-database migrate
+            flyway-*/flyway -url="jdbc:mysql://localhost:3306/tracker_registration_dotnet_test" -user=tracker_dotnet -password=password  -locations=filesystem:Databases/registration-database migrate
+            flyway-*/flyway -url="jdbc:mysql://localhost:3306/tracker_timesheets_dotnet_test" -user=tracker_dotnet -password=password  -locations=filesystem:Databases/timesheets-database migrate
+
+      - run:
+          name: Test and build
+          command: |
+            dotnet test
+            ./scripts/build.sh $CIRCLE_SHA1
+
+      - store_artifacts:
+          path: artifacts
+
+      - persist_to_workspace:
+          root: artifacts
+          paths:
+            - "*-server-*.tgz"
+
+  deployAllocations:
+    docker:
+      - image: 'microsoft/dotnet:2-sdk'
+        environment:
+          DEBIAN_FRONTEND: "noninteractive"
+          EXTRACT_DEST: /tmp/extracted-archive
+    steps:
+      - attach_workspace:
+          at: artifacts
+      - run:
+          name: Install CF CLI
+          command: |
+            apt-get update
+            apt-get -y install apt-transport-https ca-certificates
+            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | apt-key add -
+            echo "deb https://packages.cloudfoundry.org/debian stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list
+            apt-get update
+            apt-get install cf-cli
+
+      - run:
+          name: Install jq
+          command: |
+            apt-get -y install jq
+
+      - run:
+          name: Install flyway
+          command: |
+            curl https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/5.1.1/flyway-commandline-5.1.1-linux-x64.tar.gz | tar xvz
+
+      - run:
+          name: Deploy
+          command: |
+            mkdir -p $EXTRACT_DEST
+            tar -xvzf artifacts/allocations-server-$CIRCLE_SHA1.tgz -C $EXTRACT_DEST
+            cd $EXTRACT_DEST
+
+            cf login -a $CF_API -u $CF_USERNAME -p $CF_PASSWORD -o $CF_ORG -s sandbox
+            cf push -f manifest-allocations.yml
+            ./migrate-databases.sh tracker-allocations /tmp/extracted-archive/migrations /root/project
+
+  deployBacklog:
+    docker:
+      - image: 'microsoft/dotnet:2-sdk'
+        environment:
+          DEBIAN_FRONTEND: "noninteractive"
+          EXTRACT_DEST: /tmp/extracted-archive
+    steps:
+      - attach_workspace:
+          at: artifacts
+      - run:
+          name: Install CF CLI
+          command: |
+            apt-get update
+            apt-get -y install apt-transport-https ca-certificates
+            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | apt-key add -
+            echo "deb https://packages.cloudfoundry.org/debian stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list
+            apt-get update
+            apt-get install cf-cli
+
+      - run:
+          name: Install jq
+          command: |
+            apt-get -y install jq
+
+      - run:
+          name: Install flyway
+          command: |
+            curl https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/5.1.1/flyway-commandline-5.1.1-linux-x64.tar.gz | tar xvz
+
+      - run:
+          name: Deploy
+          command: |
+            mkdir -p $EXTRACT_DEST
+            tar -xvzf artifacts/backlog-server-$CIRCLE_SHA1.tgz -C $EXTRACT_DEST
+            cd $EXTRACT_DEST
+
+            cf login -a $CF_API -u $CF_USERNAME -p $CF_PASSWORD -o $CF_ORG -s sandbox
+            cf push -f manifest-backlog.yml
+            ./migrate-databases.sh tracker-backlog /tmp/extracted-archive/migrations /root/project
+
+  deployRegistration:
+    docker:
+      - image: 'microsoft/dotnet:2-sdk'
+        environment:
+          DEBIAN_FRONTEND: "noninteractive"
+          EXTRACT_DEST: /tmp/extracted-archive
+    steps:
+      - attach_workspace:
+          at: artifacts
+      - run:
+          name: Install CF CLI
+          command: |
+            apt-get update
+            apt-get -y install apt-transport-https ca-certificates
+            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | apt-key add -
+            echo "deb https://packages.cloudfoundry.org/debian stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list
+            apt-get update
+            apt-get install cf-cli
+
+      - run:
+          name: Install jq
+          command: |
+            apt-get -y install jq
+
+      - run:
+          name: Install flyway
+          command: |
+            curl https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/5.1.1/flyway-commandline-5.1.1-linux-x64.tar.gz | tar xvz
+
+      - run:
+          name: Deploy
+          command: |
+            mkdir -p $EXTRACT_DEST
+            tar -xvzf artifacts/registration-server-$CIRCLE_SHA1.tgz -C $EXTRACT_DEST
+            cd $EXTRACT_DEST
+
+            cf login -a $CF_API -u $CF_USERNAME -p $CF_PASSWORD -o $CF_ORG -s sandbox
+            cf push -f manifest-registration.yml
+            ./migrate-databases.sh tracker-registration /tmp/extracted-archive/migrations /root/project
+
+  deployTimesheets:
+    docker:
+      - image: 'microsoft/dotnet:2-sdk'
+        environment:
+          DEBIAN_FRONTEND: "noninteractive"
+          EXTRACT_DEST: /tmp/extracted-archive
+    steps:
+      - attach_workspace:
+          at: artifacts
+      - run:
+          name: Install CF CLI
+          command: |
+            apt-get update
+            apt-get -y install apt-transport-https ca-certificates
+            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | apt-key add -
+            echo "deb https://packages.cloudfoundry.org/debian stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list
+            apt-get update
+            apt-get install cf-cli
+
+      - run:
+          name: Install jq
+          command: |
+            apt-get -y install jq
+
+      - run:
+          name: Install flyway
+          command: |
+            curl https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/5.1.1/flyway-commandline-5.1.1-linux-x64.tar.gz | tar xvz
+
+      - run:
+          name: Deploy
+          command: |
+            mkdir -p $EXTRACT_DEST
+            tar -xvzf artifacts/timesheets-server-$CIRCLE_SHA1.tgz -C $EXTRACT_DEST
+            cd $EXTRACT_DEST
+
+            cf login -a $CF_API -u $CF_USERNAME -p $CF_PASSWORD -o $CF_ORG -s sandbox
+            cf push -f manifest-timesheets.yml
+            ./migrate-databases.sh tracker-timesheets /tmp/extracted-archive/migrations /root/project
+
+
+workflows:
+  version: 2
+  deployment-pipeline:
+    jobs:
+      - build
+      - deployAllocations:
+          requires:
+          - build
+      - deployBacklog:
+          requires:
+          - build
+      - deployRegistration:
+          requires:
+          - build
+      - deployTimesheets:
+          requires:
+          - build
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..00ea66f
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,32 @@
+*.swp
+*.*~
+project.lock.json
+.DS_Store
+*.pyc
+
+# User-specific files
+*.suo
+*.user
+*.userosscache
+*.sln.docstates
+
+# Build results
+[Dd]ebug/
+[Dd]ebugPublic/
+[Rr]elease/
+[Rr]eleases/
+x64/
+x86/
+build/
+bld/
+[Bb]in/
+[Oo]bj
+msbuild.log
+msbuild.err
+msbuild.wrn
+
+.idea
+*.iml
+.vscode
+.gradle
+CI/variables.yml
diff --git a/Applications/AllocationsServer/AllocationsServer.csproj b/Applications/AllocationsServer/AllocationsServer.csproj
new file mode 100755
index 0000000..f96abac
--- /dev/null
+++ b/Applications/AllocationsServer/AllocationsServer.csproj
@@ -0,0 +1,19 @@
+﻿<Project Sdk="Microsoft.NET.Sdk.Web">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <Folder Include="wwwroot\" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="../../Components/Allocations/Allocations.csproj" />
+    <ProjectReference Include="../../Components/DefaultRoute/DefaultRoute.csproj" />
+    <PackageReference Include="Steeltoe.CloudFoundry.Connector.EFCore" Version="2.0.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="Microsoft.Extensions.Configuration.CommandLine" Version="2.0.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Applications/AllocationsServer/Program.cs b/Applications/AllocationsServer/Program.cs
new file mode 100755
index 0000000..eb5dfb9
--- /dev/null
+++ b/Applications/AllocationsServer/Program.cs
@@ -0,0 +1,25 @@
+﻿using Microsoft.AspNetCore;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.Configuration;
+using Steeltoe.Extensions.Configuration.CloudFoundry;
+
+namespace AllocationsServer
+{
+    public class Program
+    {
+        public static void Main(string[] args)
+        {
+            BuildWebHost(args).Run();
+        }
+
+        public static IWebHost BuildWebHost(string[] args) =>
+            WebHostBuilder(args).Build();
+
+        public static IWebHostBuilder WebHostBuilder(string[] args) =>
+            WebHost.CreateDefaultBuilder(args)
+                // https://github.com/aspnet/KestrelHttpServer/issues/1998#issuecomment-322922164
+                .UseConfiguration(new ConfigurationBuilder().AddCommandLine(args).Build())
+                .AddCloudFoundry()
+                .UseStartup<Startup>();
+    }
+}
\ No newline at end of file
diff --git a/Applications/AllocationsServer/Startup.cs b/Applications/AllocationsServer/Startup.cs
new file mode 100755
index 0000000..46c800b
--- /dev/null
+++ b/Applications/AllocationsServer/Startup.cs
@@ -0,0 +1,51 @@
+﻿using System;
+using System.Net.Http;
+using Allocations;
+using Microsoft.AspNetCore.Builder;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.Configuration;
+using Microsoft.Extensions.DependencyInjection;
+using Microsoft.Extensions.Logging;
+using Steeltoe.CloudFoundry.Connector.MySql.EFCore;
+
+namespace AllocationsServer
+{
+    public class Startup
+    {
+        public Startup(IConfiguration configuration)
+        {
+            Configuration = configuration;
+        }
+
+        public IConfiguration Configuration { get; }
+
+        // This method gets called by the runtime. Use this method to add services to the container.
+        public void ConfigureServices(IServiceCollection services)
+        {
+            // Add framework services.
+            services.AddMvc();
+
+            services.AddDbContext<AllocationContext>(options => options.UseMySql(Configuration));
+            services.AddScoped<IAllocationDataGateway, AllocationDataGateway>();
+
+            services.AddSingleton<IProjectClient>(sp =>
+            {
+                var httpClient = new HttpClient
+                {
+                    BaseAddress = new Uri(Configuration.GetValue<string>("REGISTRATION_SERVER_ENDPOINT"))
+                };
+
+                return new ProjectClient(httpClient);
+            });
+        }
+
+        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
+        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
+        {
+            loggerFactory.AddConsole(Configuration.GetSection("Logging"));
+            loggerFactory.AddDebug();
+
+            app.UseMvc();
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/AllocationsServer/appsettings.Development.json b/Applications/AllocationsServer/appsettings.Development.json
new file mode 100755
index 0000000..c7038dd
--- /dev/null
+++ b/Applications/AllocationsServer/appsettings.Development.json
@@ -0,0 +1,10 @@
+﻿{
+    "Logging": {
+        "IncludeScopes": false,
+        "LogLevel": {
+            "Default": "Debug",
+            "System": "Information",
+            "Microsoft": "Information"
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/AllocationsServer/appsettings.json b/Applications/AllocationsServer/appsettings.json
new file mode 100755
index 0000000..44f79ec
--- /dev/null
+++ b/Applications/AllocationsServer/appsettings.json
@@ -0,0 +1,14 @@
+﻿{
+    "Logging": {
+        "IncludeScopes": false,
+        "LogLevel": {
+            "Default": "Warning"
+        }
+    },
+    "mysql": {
+        "client": {
+            "ConnectionString": "Server=localhost;Database=tracker_allocations_dotnet_dev;Uid=tracker_dotnet;Pwd=password;"
+        }
+    },
+    "REGISTRATION_SERVER_ENDPOINT" : "http://localhost:8883"
+}
\ No newline at end of file
diff --git a/Applications/BacklogServer/BacklogServer.csproj b/Applications/BacklogServer/BacklogServer.csproj
new file mode 100755
index 0000000..7d98917
--- /dev/null
+++ b/Applications/BacklogServer/BacklogServer.csproj
@@ -0,0 +1,19 @@
+﻿<Project Sdk="Microsoft.NET.Sdk.Web">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <Folder Include="wwwroot\" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="../../Components/Backlog/Backlog.csproj" />
+    <ProjectReference Include="../../Components/DefaultRoute/DefaultRoute.csproj" />
+    <PackageReference Include="Steeltoe.CloudFoundry.Connector.EFCore" Version="2.0.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="Microsoft.Extensions.Configuration.CommandLine" Version="2.0.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Applications/BacklogServer/Program.cs b/Applications/BacklogServer/Program.cs
new file mode 100755
index 0000000..7d1b855
--- /dev/null
+++ b/Applications/BacklogServer/Program.cs
@@ -0,0 +1,25 @@
+﻿using Microsoft.AspNetCore;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.Configuration;
+using Steeltoe.Extensions.Configuration.CloudFoundry;
+
+namespace BacklogServer
+{
+    public class Program
+    {
+        public static void Main(string[] args)
+        {
+            BuildWebHost(args).Run();
+        }
+
+        public static IWebHost BuildWebHost(string[] args) =>
+            WebHostBuilder(args).Build();
+
+        public static IWebHostBuilder WebHostBuilder(string[] args) =>
+            WebHost.CreateDefaultBuilder(args)
+                // https://github.com/aspnet/KestrelHttpServer/issues/1998#issuecomment-322922164
+                .UseConfiguration(new ConfigurationBuilder().AddCommandLine(args).Build())
+                .AddCloudFoundry()
+                .UseStartup<Startup>();
+    }
+}
\ No newline at end of file
diff --git a/Applications/BacklogServer/Startup.cs b/Applications/BacklogServer/Startup.cs
new file mode 100755
index 0000000..d849d3b
--- /dev/null
+++ b/Applications/BacklogServer/Startup.cs
@@ -0,0 +1,51 @@
+﻿using System;
+using System.Net.Http;
+using Backlog;
+using Microsoft.AspNetCore.Builder;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.Configuration;
+using Microsoft.Extensions.DependencyInjection;
+using Microsoft.Extensions.Logging;
+using Steeltoe.CloudFoundry.Connector.MySql.EFCore;
+
+namespace BacklogServer
+{
+    public class Startup
+    {
+        public Startup(IConfiguration configuration)
+        {
+            Configuration = configuration;
+        }
+
+        public IConfiguration Configuration { get; }
+
+        // This method gets called by the runtime. Use this method to add services to the container.
+        public void ConfigureServices(IServiceCollection services)
+        {
+            // Add framework services.
+            services.AddMvc();
+
+            services.AddDbContext<StoryContext>(options => options.UseMySql(Configuration));
+            services.AddScoped<IStoryDataGateway, StoryDataGateway>();
+
+            services.AddSingleton<IProjectClient>(sp =>
+            {
+                var httpClient = new HttpClient
+                {
+                    BaseAddress = new Uri(Configuration.GetValue<string>("REGISTRATION_SERVER_ENDPOINT"))
+                };
+
+                return new ProjectClient(httpClient);
+            });
+        }
+
+        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
+        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
+        {
+            loggerFactory.AddConsole(Configuration.GetSection("Logging"));
+            loggerFactory.AddDebug();
+
+            app.UseMvc();
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/BacklogServer/appsettings.Development.json b/Applications/BacklogServer/appsettings.Development.json
new file mode 100755
index 0000000..c7038dd
--- /dev/null
+++ b/Applications/BacklogServer/appsettings.Development.json
@@ -0,0 +1,10 @@
+﻿{
+    "Logging": {
+        "IncludeScopes": false,
+        "LogLevel": {
+            "Default": "Debug",
+            "System": "Information",
+            "Microsoft": "Information"
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/BacklogServer/appsettings.json b/Applications/BacklogServer/appsettings.json
new file mode 100755
index 0000000..f08a38e
--- /dev/null
+++ b/Applications/BacklogServer/appsettings.json
@@ -0,0 +1,14 @@
+﻿{
+    "Logging": {
+        "IncludeScopes": false,
+        "LogLevel": {
+            "Default": "Warning"
+        }
+    },
+    "mysql": {
+        "client": {
+            "ConnectionString": "Server=localhost;Database=tracker_backlog_dotnet_dev;Uid=tracker_dotnet;Pwd=password;"
+        }
+    },
+    "REGISTRATION_SERVER_ENDPOINT" : "http://localhost:8883"
+}
\ No newline at end of file
diff --git a/Applications/RegistrationServer/Program.cs b/Applications/RegistrationServer/Program.cs
new file mode 100755
index 0000000..fdd176b
--- /dev/null
+++ b/Applications/RegistrationServer/Program.cs
@@ -0,0 +1,25 @@
+﻿using Microsoft.AspNetCore;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.Configuration;
+using Steeltoe.Extensions.Configuration.CloudFoundry;
+
+namespace RegistrationServer
+{
+    public class Program
+    {
+        public static void Main(string[] args)
+        {
+            BuildWebHost(args).Run();
+        }
+
+        public static IWebHost BuildWebHost(string[] args) =>
+            WebHostBuilder(args).Build();
+
+        public static IWebHostBuilder WebHostBuilder(string[] args) =>
+            WebHost.CreateDefaultBuilder(args)
+                // https://github.com/aspnet/KestrelHttpServer/issues/1998#issuecomment-322922164
+                .UseConfiguration(new ConfigurationBuilder().AddCommandLine(args).Build())
+                .AddCloudFoundry()
+                .UseStartup<Startup>();
+    }
+}
\ No newline at end of file
diff --git a/Applications/RegistrationServer/RegistrationServer.csproj b/Applications/RegistrationServer/RegistrationServer.csproj
new file mode 100755
index 0000000..1f584f5
--- /dev/null
+++ b/Applications/RegistrationServer/RegistrationServer.csproj
@@ -0,0 +1,21 @@
+﻿<Project Sdk="Microsoft.NET.Sdk.Web">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <Folder Include="wwwroot\" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="../../Components/Accounts/Accounts.csproj" />
+    <ProjectReference Include="../../Components/Projects/Projects.csproj" />
+    <ProjectReference Include="../../Components/Users/Users.csproj" />
+    <ProjectReference Include="../../Components/DefaultRoute/DefaultRoute.csproj" />
+    <PackageReference Include="Steeltoe.CloudFoundry.Connector.EFCore" Version="2.0.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="Microsoft.Extensions.Configuration.CommandLine" Version="2.0.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Applications/RegistrationServer/Startup.cs b/Applications/RegistrationServer/Startup.cs
new file mode 100755
index 0000000..9aa1423
--- /dev/null
+++ b/Applications/RegistrationServer/Startup.cs
@@ -0,0 +1,47 @@
+﻿using Accounts;
+using Microsoft.AspNetCore.Builder;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.Configuration;
+using Microsoft.Extensions.DependencyInjection;
+using Microsoft.Extensions.Logging;
+using Projects;
+using Steeltoe.CloudFoundry.Connector.MySql.EFCore;
+using Users;
+
+namespace RegistrationServer
+{
+    public class Startup
+    {
+        public Startup(IConfiguration configuration)
+        {
+            Configuration = configuration;
+        }
+
+        public IConfiguration Configuration { get; }
+
+        // This method gets called by the runtime. Use this method to add services to the container.
+        public void ConfigureServices(IServiceCollection services)
+        {
+            // Add framework services.
+            services.AddMvc();
+
+            services.AddDbContext<AccountContext>(options => options.UseMySql(Configuration));
+            services.AddDbContext<ProjectContext>(options => options.UseMySql(Configuration));
+            services.AddDbContext<UserContext>(options => options.UseMySql(Configuration));
+
+            services.AddScoped<IAccountDataGateway, AccountDataGateway>();
+            services.AddScoped<IProjectDataGateway, ProjectDataGateway>();
+            services.AddScoped<IUserDataGateway, UserDataGateway>();
+            services.AddScoped<IRegistrationService, RegistrationService>();
+        }
+
+        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
+        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
+        {
+            loggerFactory.AddConsole(Configuration.GetSection("Logging"));
+            loggerFactory.AddDebug();
+
+            app.UseMvc();
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/RegistrationServer/appsettings.Development.json b/Applications/RegistrationServer/appsettings.Development.json
new file mode 100755
index 0000000..c7038dd
--- /dev/null
+++ b/Applications/RegistrationServer/appsettings.Development.json
@@ -0,0 +1,10 @@
+﻿{
+    "Logging": {
+        "IncludeScopes": false,
+        "LogLevel": {
+            "Default": "Debug",
+            "System": "Information",
+            "Microsoft": "Information"
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/RegistrationServer/appsettings.json b/Applications/RegistrationServer/appsettings.json
new file mode 100755
index 0000000..b8de173
--- /dev/null
+++ b/Applications/RegistrationServer/appsettings.json
@@ -0,0 +1,13 @@
+﻿{
+    "Logging": {
+        "IncludeScopes": false,
+        "LogLevel": {
+            "Default": "Warning"
+        }
+    },
+    "mysql": {
+        "client": {
+            "ConnectionString": "Server=localhost;Database=tracker_registration_dotnet_dev;Uid=tracker_dotnet;Pwd=password;"
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/TimesheetsServer/Program.cs b/Applications/TimesheetsServer/Program.cs
new file mode 100755
index 0000000..95fcb23
--- /dev/null
+++ b/Applications/TimesheetsServer/Program.cs
@@ -0,0 +1,25 @@
+﻿using Microsoft.AspNetCore;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.Configuration;
+using Steeltoe.Extensions.Configuration.CloudFoundry;
+
+namespace TimesheetsServer
+{
+    public class Program
+    {
+        public static void Main(string[] args)
+        {
+            BuildWebHost(args).Run();
+        }
+
+        public static IWebHost BuildWebHost(string[] args) =>
+            WebHostBuilder(args).Build();
+
+        public static IWebHostBuilder WebHostBuilder(string[] args) =>
+            WebHost.CreateDefaultBuilder(args)
+                // https://github.com/aspnet/KestrelHttpServer/issues/1998#issuecomment-322922164
+                .UseConfiguration(new ConfigurationBuilder().AddCommandLine(args).Build())
+                .AddCloudFoundry()
+                .UseStartup<Startup>();
+    }
+}
\ No newline at end of file
diff --git a/Applications/TimesheetsServer/Startup.cs b/Applications/TimesheetsServer/Startup.cs
new file mode 100755
index 0000000..15dd03c
--- /dev/null
+++ b/Applications/TimesheetsServer/Startup.cs
@@ -0,0 +1,51 @@
+﻿using System;
+using System.Net.Http;
+using Microsoft.AspNetCore.Builder;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.Configuration;
+using Microsoft.Extensions.DependencyInjection;
+using Microsoft.Extensions.Logging;
+using Steeltoe.CloudFoundry.Connector.MySql.EFCore;
+using Timesheets;
+
+namespace TimesheetsServer
+{
+    public class Startup
+    {
+        public Startup(IConfiguration configuration)
+        {
+            Configuration = configuration;
+        }
+
+        public IConfiguration Configuration { get; }
+
+        // This method gets called by the runtime. Use this method to add services to the container.
+        public void ConfigureServices(IServiceCollection services)
+        {
+            // Add framework services.
+            services.AddMvc();
+
+            services.AddDbContext<TimeEntryContext>(options => options.UseMySql(Configuration));
+            services.AddScoped<ITimeEntryDataGateway, TimeEntryDataGateway>();
+            
+            services.AddSingleton<IProjectClient>(sp =>
+            {
+                var httpClient = new HttpClient
+                {
+                    BaseAddress = new Uri(Configuration.GetValue<string>("REGISTRATION_SERVER_ENDPOINT"))
+                };
+
+                return new ProjectClient(httpClient);
+            });
+        }
+
+        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
+        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
+        {
+            loggerFactory.AddConsole(Configuration.GetSection("Logging"));
+            loggerFactory.AddDebug();
+
+            app.UseMvc();
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/TimesheetsServer/TimesheetsServer.csproj b/Applications/TimesheetsServer/TimesheetsServer.csproj
new file mode 100755
index 0000000..74bf0c6
--- /dev/null
+++ b/Applications/TimesheetsServer/TimesheetsServer.csproj
@@ -0,0 +1,19 @@
+﻿<Project Sdk="Microsoft.NET.Sdk.Web">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <Folder Include="wwwroot\" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="../../Components/Timesheets/Timesheets.csproj" />
+    <ProjectReference Include="../../Components/DefaultRoute/DefaultRoute.csproj" />
+    <PackageReference Include="Steeltoe.CloudFoundry.Connector.EFCore" Version="2.0.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="Microsoft.Extensions.Configuration.CommandLine" Version="2.0.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Applications/TimesheetsServer/appsettings.Development.json b/Applications/TimesheetsServer/appsettings.Development.json
new file mode 100755
index 0000000..c7038dd
--- /dev/null
+++ b/Applications/TimesheetsServer/appsettings.Development.json
@@ -0,0 +1,10 @@
+﻿{
+    "Logging": {
+        "IncludeScopes": false,
+        "LogLevel": {
+            "Default": "Debug",
+            "System": "Information",
+            "Microsoft": "Information"
+        }
+    }
+}
\ No newline at end of file
diff --git a/Applications/TimesheetsServer/appsettings.json b/Applications/TimesheetsServer/appsettings.json
new file mode 100755
index 0000000..1f4f75d
--- /dev/null
+++ b/Applications/TimesheetsServer/appsettings.json
@@ -0,0 +1,14 @@
+﻿{
+    "Logging": {
+        "IncludeScopes": false,
+        "LogLevel": {
+            "Default": "Warning"
+        }
+    },
+    "mysql": {
+        "client": {
+            "ConnectionString": "Server=localhost;Database=tracker_timesheets_dotnet_dev;Uid=tracker_dotnet;Pwd=password;"
+        }
+    },
+    "REGISTRATION_SERVER_ENDPOINT" : "http://localhost:8883"
+}
\ No newline at end of file
diff --git a/Components/Accounts/AccountContext.cs b/Components/Accounts/AccountContext.cs
new file mode 100644
index 0000000..09c2190
--- /dev/null
+++ b/Components/Accounts/AccountContext.cs
@@ -0,0 +1,13 @@
+﻿using Microsoft.EntityFrameworkCore;
+
+namespace Accounts
+{
+    public class AccountContext : DbContext
+    {
+        public AccountContext(DbContextOptions<AccountContext> options) : base(options)
+        {
+        }
+
+        public DbSet<AccountRecord> AccountRecords { get; set; }
+    }
+}
\ No newline at end of file
diff --git a/Components/Accounts/AccountController.cs b/Components/Accounts/AccountController.cs
new file mode 100644
index 0000000..e19ed13
--- /dev/null
+++ b/Components/Accounts/AccountController.cs
@@ -0,0 +1,26 @@
+﻿using System.Linq;
+using Microsoft.AspNetCore.Mvc;
+
+namespace Accounts
+{
+    [Route("accounts"), Produces("application/json")]
+    public class AccountController : Controller
+    {
+        private readonly IAccountDataGateway _gateway;
+
+        public AccountController(IAccountDataGateway gateway)
+        {
+            _gateway = gateway;
+        }
+
+        [HttpGet]
+        public IActionResult Get([FromQuery] int ownerId)
+        {
+            var list = _gateway.FindBy(ownerId).Select(record => new AccountInfo(record.Id, record.OwnerId, record.Name,
+                    "account info"))
+                .ToList();
+
+            return Ok(list);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Accounts/AccountDataGateway.cs b/Components/Accounts/AccountDataGateway.cs
new file mode 100644
index 0000000..beb5aed
--- /dev/null
+++ b/Components/Accounts/AccountDataGateway.cs
@@ -0,0 +1,31 @@
+﻿using System.Collections.Generic;
+using System.Linq;
+using Microsoft.EntityFrameworkCore;
+
+namespace Accounts
+{
+    public class AccountDataGateway : IAccountDataGateway
+    {
+        private readonly AccountContext _context;
+
+        public AccountDataGateway(AccountContext context)
+        {
+            _context = context;
+        }
+
+        public AccountRecord Create(long ownerId, string name)
+        {
+            var recordToCreate = new AccountRecord(ownerId, name);
+
+            _context.AccountRecords.Add(recordToCreate);
+            _context.SaveChanges();
+
+            return recordToCreate;
+        }
+
+        public List<AccountRecord> FindBy(long ownerId) => _context.AccountRecords
+            .AsNoTracking()
+            .Where(a => a.OwnerId == ownerId)
+            .ToList();
+    }
+}
\ No newline at end of file
diff --git a/Components/Accounts/AccountInfo.cs b/Components/Accounts/AccountInfo.cs
new file mode 100755
index 0000000..7c576d7
--- /dev/null
+++ b/Components/Accounts/AccountInfo.cs
@@ -0,0 +1,18 @@
+﻿namespace Accounts
+{
+    public class AccountInfo
+    {
+        public long Id { get; }
+        public long OwnerId { get; }
+        public string Name { get; }
+        public string Info { get; }
+
+        public AccountInfo(long id, long ownerId, string name, string info)
+        {
+            Id = id;
+            OwnerId = ownerId;
+            Name = name;
+            Info = info;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Accounts/AccountRecord.cs b/Components/Accounts/AccountRecord.cs
new file mode 100644
index 0000000..cf28181
--- /dev/null
+++ b/Components/Accounts/AccountRecord.cs
@@ -0,0 +1,27 @@
+﻿using System.ComponentModel.DataAnnotations.Schema;
+
+namespace Accounts
+{
+    [Table("accounts")]
+    public class AccountRecord
+    {
+        [Column("id")] public long Id { get; private set; }
+        [Column("owner_id")] public long OwnerId { get; private set; }
+        [Column("name")] public string Name { get; private set; }
+
+        private AccountRecord()
+        {
+        }
+
+        public AccountRecord(long ownerId, string name) : this(default(long), ownerId, name)
+        {
+        }
+
+        public AccountRecord(long id, long ownerId, string name)
+        {
+            Id = id;
+            OwnerId = ownerId;
+            Name = name;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Accounts/Accounts.csproj b/Components/Accounts/Accounts.csproj
new file mode 100755
index 0000000..1bd8ef4
--- /dev/null
+++ b/Components/Accounts/Accounts.csproj
@@ -0,0 +1,15 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="2.0.1" />
+    <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="2.0.1" />
+    <ProjectReference Include="../Users/Users.csproj" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/Accounts/IAccountDataGateway.cs b/Components/Accounts/IAccountDataGateway.cs
new file mode 100644
index 0000000..64882e2
--- /dev/null
+++ b/Components/Accounts/IAccountDataGateway.cs
@@ -0,0 +1,11 @@
+﻿using System.Collections.Generic;
+
+namespace Accounts
+{
+    public interface IAccountDataGateway
+    {
+        AccountRecord Create(long ownerId, string name);
+
+        List<AccountRecord> FindBy(long ownerId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Accounts/IRegistrationService.cs b/Components/Accounts/IRegistrationService.cs
new file mode 100644
index 0000000..ed0b6f9
--- /dev/null
+++ b/Components/Accounts/IRegistrationService.cs
@@ -0,0 +1,9 @@
+﻿using Users;
+
+namespace Accounts
+{
+    public interface IRegistrationService
+    {
+        UserRecord CreateUserWithAccount(string name);
+    }
+}
\ No newline at end of file
diff --git a/Components/Accounts/RegistrationController.cs b/Components/Accounts/RegistrationController.cs
new file mode 100644
index 0000000..36b88de
--- /dev/null
+++ b/Components/Accounts/RegistrationController.cs
@@ -0,0 +1,24 @@
+﻿using Microsoft.AspNetCore.Mvc;
+using Users;
+
+namespace Accounts
+{
+    [Route("registration"), Produces("application/json")]
+    public class RegisationController : Controller
+    {
+        private readonly IRegistrationService _service;
+
+        public RegisationController(IRegistrationService service)
+        {
+            _service = service;
+        }
+
+        [HttpPost]
+        public IActionResult Post([FromBody] UserInfo info)
+        {
+            var record = _service.CreateUserWithAccount(info.Name);
+            var value = new UserInfo(record.Id, record.Name, "registration info");
+            return Created($"registration/{value.Id}", value);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Accounts/RegistrationService.cs b/Components/Accounts/RegistrationService.cs
new file mode 100644
index 0000000..496a971
--- /dev/null
+++ b/Components/Accounts/RegistrationService.cs
@@ -0,0 +1,24 @@
+﻿using Users;
+
+namespace Accounts
+{
+    public class RegistrationService : IRegistrationService
+    {
+        private readonly IUserDataGateway _userDataGateway;
+        private readonly IAccountDataGateway _accountDataGateway;
+
+        public RegistrationService(IUserDataGateway userDataGateway, IAccountDataGateway accountDataGateway)
+        {
+            _userDataGateway = userDataGateway;
+            _accountDataGateway = accountDataGateway;
+        }
+
+        public UserRecord CreateUserWithAccount(string name)
+        {
+            // todo - make transactional
+            var user = _userDataGateway.Create(name);
+            _accountDataGateway.Create(user.Id, $"{name}'s account");
+            return user;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/AccountsTest/AccountControllerTest.cs b/Components/AccountsTest/AccountControllerTest.cs
new file mode 100755
index 0000000..3206713
--- /dev/null
+++ b/Components/AccountsTest/AccountControllerTest.cs
@@ -0,0 +1,45 @@
+using System.Collections.Generic;
+using Accounts;
+using Microsoft.AspNetCore.Mvc;
+using Moq;
+using Xunit;
+
+namespace AccountsTest
+{
+    public class AccountControllerTest
+    {
+        private readonly Mock<IAccountDataGateway> _gateway;
+        private readonly AccountController _controller;
+
+        public AccountControllerTest()
+        {
+            _gateway = new Mock<IAccountDataGateway>();
+            _controller = new AccountController(_gateway.Object);
+        }
+
+        [Fact]
+        public void TestGet()
+        {
+            _gateway.Setup(g => g.FindBy(4765)).Returns(new List<AccountRecord>
+            {
+                new AccountRecord(1673, 4765, "Jack's account"),
+                new AccountRecord(1674, 4765, "Jack's other account")
+            });
+
+            var response = _controller.Get(4765);
+            var body = (List<AccountInfo>) ((ObjectResult) response).Value;
+
+            Assert.IsType<OkObjectResult>(response);
+
+            Assert.Equal(2, body.Count);
+            Assert.Equal(1673, body[0].Id);
+            Assert.Equal(4765, body[0].OwnerId);
+            Assert.Equal("Jack's account", body[0].Name);
+            Assert.Equal("account info", body[0].Info);
+            Assert.Equal(1674, body[1].Id);
+            Assert.Equal(4765, body[1].OwnerId);
+            Assert.Equal("Jack's other account", body[1].Name);
+            Assert.Equal("account info", body[1].Info);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/AccountsTest/AccountDataGatewayTest.cs b/Components/AccountsTest/AccountDataGatewayTest.cs
new file mode 100755
index 0000000..72fb253
--- /dev/null
+++ b/Components/AccountsTest/AccountDataGatewayTest.cs
@@ -0,0 +1,56 @@
+using Accounts;
+using Microsoft.EntityFrameworkCore;
+using TestSupport;
+using Xunit;
+
+namespace AccountsTest
+{
+    [Collection("Accounts")]
+    public class AccountDataGatewayTest
+    {
+        private static readonly TestDatabaseSupport Support =
+            new TestDatabaseSupport(TestDatabaseSupport.RegistrationConnectionString);
+
+        private static readonly DbContextOptions<AccountContext> DbContextOptions =
+            new DbContextOptionsBuilder<AccountContext>().UseMySql(TestDatabaseSupport.RegistrationConnectionString)
+                .Options;
+
+        public AccountDataGatewayTest()
+        {
+            Support.TruncateAllTables();
+        }
+
+        [Fact]
+        public void TestCreate()
+        {
+            Support.ExecSql("insert into users (id, name) values (12, 'Jack');");
+
+            var gateway = new AccountDataGateway(new AccountContext(DbContextOptions));
+            gateway.Create(12, "anAccount");
+
+            var names = Support.QuerySql("select name from accounts");
+
+            Assert.Equal("anAccount", names[0]["name"]);
+        }
+
+        [Fact]
+        public void TestFindBy()
+        {
+            Support.ExecSql(@"
+insert into users (id, name) values (12, 'Jack');
+insert into accounts (id, owner_id, name) values (1, 12, 'anAccount'), (2, 12, 'anotherAccount');
+");
+
+            var gateway = new AccountDataGateway(new AccountContext(DbContextOptions));
+
+            var actual = gateway.FindBy(12);
+
+            Assert.Equal(1, actual[0].Id);
+            Assert.Equal(12, actual[0].OwnerId);
+            Assert.Equal("anAccount", actual[0].Name);
+            Assert.Equal(2, actual[1].Id);
+            Assert.Equal(12, actual[1].OwnerId);
+            Assert.Equal("anotherAccount", actual[1].Name);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/AccountsTest/AccountsTest.csproj b/Components/AccountsTest/AccountsTest.csproj
new file mode 100755
index 0000000..649c158
--- /dev/null
+++ b/Components/AccountsTest/AccountsTest.csproj
@@ -0,0 +1,17 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <ProjectReference Include="../Accounts/Accounts.csproj" />
+    <ProjectReference Include="../TestSupport/TestSupport.csproj" />
+    <ProjectReference Include="../Users/Users.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.0.0" />
+    <PackageReference Include="xunit" Version="2.2.0" />
+    <PackageReference Include="xunit.runner.visualstudio" Version="2.2.0" />
+    <PackageReference Include="Moq" Version="4.7.63" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/AccountsTest/RegistrationControllerTest.cs b/Components/AccountsTest/RegistrationControllerTest.cs
new file mode 100755
index 0000000..3543154
--- /dev/null
+++ b/Components/AccountsTest/RegistrationControllerTest.cs
@@ -0,0 +1,35 @@
+using Accounts;
+using Microsoft.AspNetCore.Mvc;
+using Moq;
+using Users;
+using Xunit;
+
+namespace AccountsTest
+{
+    public class RegistrationControllerTest
+    {
+        private readonly Mock<IRegistrationService> _service;
+        private readonly RegisationController _controller;
+
+        public RegistrationControllerTest()
+        {
+            _service = new Mock<IRegistrationService>();
+            _controller = new RegisationController(_service.Object);
+        }
+
+        [Fact]
+        public void TestPost()
+        {
+            _service.Setup(s => s.CreateUserWithAccount("aUser")).Returns(new UserRecord(123, "aUser"));
+
+            var response = _controller.Post(new UserInfo(-1, "aUser", ""));
+            var body = (UserInfo) ((ObjectResult) response).Value;
+
+            Assert.IsType<CreatedResult>(response);
+
+            Assert.Equal(123, body.Id);
+            Assert.Equal("aUser", body.Name);
+            Assert.Equal("registration info", body.Info);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/AccountsTest/RegistrationServiceTest.cs b/Components/AccountsTest/RegistrationServiceTest.cs
new file mode 100755
index 0000000..f8412b7
--- /dev/null
+++ b/Components/AccountsTest/RegistrationServiceTest.cs
@@ -0,0 +1,40 @@
+using Accounts;
+using Microsoft.EntityFrameworkCore;
+using TestSupport;
+using Users;
+using Xunit;
+
+namespace AccountsTest
+{
+    [Collection("Accounts")]
+    public class RegistrationServiceTest
+    {
+        private static readonly TestDatabaseSupport Support =
+            new TestDatabaseSupport(TestDatabaseSupport.RegistrationConnectionString);
+
+        private static readonly DbContextOptions<AccountContext> AccountDbContextOptions =
+            new DbContextOptionsBuilder<AccountContext>().UseMySql(TestDatabaseSupport.RegistrationConnectionString)
+                .Options;
+
+        private static readonly DbContextOptions<UserContext> UserDbContextOptions =
+            new DbContextOptionsBuilder<UserContext>().UseMySql(TestDatabaseSupport.RegistrationConnectionString)
+                .Options;
+
+        public RegistrationServiceTest()
+        {
+            Support.TruncateAllTables();
+        }
+
+        [Fact]
+        public void TestFindBy()
+        {
+            var userDataGateway = new UserDataGateway(new UserContext(UserDbContextOptions));
+            var accountDataGateway = new AccountDataGateway(new AccountContext(AccountDbContextOptions));
+            var service = new RegistrationService(userDataGateway, accountDataGateway);
+
+            var info = service.CreateUserWithAccount("aUser");
+
+            Assert.Equal("aUser", info.Name);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/AllocationContext.cs b/Components/Allocations/AllocationContext.cs
new file mode 100644
index 0000000..424a4f6
--- /dev/null
+++ b/Components/Allocations/AllocationContext.cs
@@ -0,0 +1,13 @@
+﻿using Microsoft.EntityFrameworkCore;
+
+namespace Allocations
+{
+    public class AllocationContext : DbContext
+    {
+        public AllocationContext(DbContextOptions<AllocationContext> options) : base(options)
+        {
+        }
+
+        public DbSet<AllocationRecord> AllocationRecords { get; set; }
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/AllocationController.cs b/Components/Allocations/AllocationController.cs
new file mode 100755
index 0000000..06384d7
--- /dev/null
+++ b/Components/Allocations/AllocationController.cs
@@ -0,0 +1,45 @@
+﻿using System.Linq;
+using Microsoft.AspNetCore.Mvc;
+
+namespace Allocations
+{
+    [Route("allocations"), Produces("application/json")]
+    public class AllocationController : Controller
+    {
+        private readonly IAllocationDataGateway _gateway;
+        private readonly IProjectClient _client;
+
+        public AllocationController(IAllocationDataGateway gateway, IProjectClient client)
+        {
+            _gateway = gateway;
+            _client = client;
+        }
+
+        [HttpGet]
+        public IActionResult Get([FromQuery] int projectId)
+        {
+            var records = _gateway.FindBy(projectId);
+            var list = records.Select(record => new AllocationInfo(record.Id, record.ProjectId, record.UserId,
+                    record.FirstDay, record.LastDay, "allocation info"))
+                .ToList();
+            return Ok(list);
+        }
+
+        [HttpPost]
+        public IActionResult Post([FromBody] AllocationInfo info)
+        {
+            if (!ProjectIsActive(info.ProjectId)) return new StatusCodeResult(304);
+
+            var record = _gateway.Create(info.ProjectId, info.UserId, info.FirstDay, info.LastDay);
+            var value = new AllocationInfo(record.Id, record.ProjectId, record.UserId, record.FirstDay, record.LastDay,
+                "allocation info");
+            return Created($"allocations/{value.Id}", value);
+        }
+
+        private bool ProjectIsActive(long projectId)
+        {
+            var info = _client.Get(projectId);
+            return info.Result?.Active ?? false;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/AllocationDataGateway.cs b/Components/Allocations/AllocationDataGateway.cs
new file mode 100644
index 0000000..9ca9f38
--- /dev/null
+++ b/Components/Allocations/AllocationDataGateway.cs
@@ -0,0 +1,32 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using Microsoft.EntityFrameworkCore;
+
+namespace Allocations
+{
+    public class AllocationDataGateway : IAllocationDataGateway
+    {
+        private readonly AllocationContext _context;
+
+        public AllocationDataGateway(AllocationContext context)
+        {
+            _context = context;
+        }
+
+        public AllocationRecord Create(long projectId, long userId, DateTime firstDay, DateTime lastDay)
+        {
+            var recordToCreate = new AllocationRecord(projectId, userId, firstDay, lastDay);
+
+            _context.AllocationRecords.Add(recordToCreate);
+            _context.SaveChanges();
+
+            return recordToCreate;
+        }
+
+        public List<AllocationRecord> FindBy(long projectId) => _context.AllocationRecords
+            .AsNoTracking()
+            .Where(a => a.ProjectId == projectId)
+            .ToList();
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/AllocationInfo.cs b/Components/Allocations/AllocationInfo.cs
new file mode 100755
index 0000000..6d67091
--- /dev/null
+++ b/Components/Allocations/AllocationInfo.cs
@@ -0,0 +1,25 @@
+﻿using System;
+
+namespace Allocations
+{
+    public class AllocationInfo
+    {
+        public long Id { get; }
+        public long ProjectId { get; }
+        public long UserId { get; }
+        public DateTime FirstDay { get; }
+        public DateTime LastDay { get; }
+        public string Info { get; }
+
+
+        public AllocationInfo(long id, long projectId, long userId, DateTime firstDay, DateTime lastDay, string info)
+        {
+            Id = id;
+            ProjectId = projectId;
+            UserId = userId;
+            FirstDay = firstDay;
+            LastDay = lastDay;
+            Info = info;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/AllocationRecord.cs b/Components/Allocations/AllocationRecord.cs
new file mode 100644
index 0000000..6fb671f
--- /dev/null
+++ b/Components/Allocations/AllocationRecord.cs
@@ -0,0 +1,33 @@
+﻿using System;
+using System.ComponentModel.DataAnnotations.Schema;
+
+namespace Allocations
+{
+    [Table("allocations")]
+    public class AllocationRecord
+    {
+        [Column("id")] public long Id { get; private set; }
+        [Column("project_id")] public long ProjectId { get; private set; }
+        [Column("user_id")] public long UserId { get; private set; }
+        [Column("first_day")] public DateTime FirstDay { get; private set; }
+        [Column("last_day")] public DateTime LastDay { get; private set; }
+
+        private AllocationRecord()
+        {
+        }
+
+        public AllocationRecord(long projectId, long userId, DateTime firstDay, DateTime lastDay) :
+            this(default(long), projectId, userId, firstDay, lastDay)
+        {
+        }
+
+        public AllocationRecord(long id, long projectId, long userId, DateTime firstDay, DateTime lastDay)
+        {
+            Id = id;
+            ProjectId = projectId;
+            UserId = userId;
+            FirstDay = firstDay;
+            LastDay = lastDay;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/Allocations.csproj b/Components/Allocations/Allocations.csproj
new file mode 100755
index 0000000..d970631
--- /dev/null
+++ b/Components/Allocations/Allocations.csproj
@@ -0,0 +1,15 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="2.0.1" />
+    <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="2.0.1" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="System.Runtime.Serialization.Json" Version="4.3.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/Allocations/IAllocationDataGateway.cs b/Components/Allocations/IAllocationDataGateway.cs
new file mode 100644
index 0000000..bb20212
--- /dev/null
+++ b/Components/Allocations/IAllocationDataGateway.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+
+namespace Allocations
+{
+    public interface IAllocationDataGateway
+    {
+        AllocationRecord Create(long projectId, long userId, DateTime firstDay, DateTime lastDay);
+
+        List<AllocationRecord> FindBy(long projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/IProjectClient.cs b/Components/Allocations/IProjectClient.cs
new file mode 100644
index 0000000..dfccb9b
--- /dev/null
+++ b/Components/Allocations/IProjectClient.cs
@@ -0,0 +1,9 @@
+﻿using System.Threading.Tasks;
+
+namespace Allocations
+{
+    public interface IProjectClient
+    {
+        Task<ProjectInfo> Get(long projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/ProjectClient.cs b/Components/Allocations/ProjectClient.cs
new file mode 100644
index 0000000..3a141d7
--- /dev/null
+++ b/Components/Allocations/ProjectClient.cs
@@ -0,0 +1,25 @@
+﻿using System.Net.Http;
+using System.Runtime.Serialization.Json;
+using System.Threading.Tasks;
+
+namespace Allocations
+{
+    public class ProjectClient : IProjectClient
+    {
+        private readonly HttpClient _client;
+
+        public ProjectClient(HttpClient client)
+        {
+            _client = client;
+        }
+
+        public async Task<ProjectInfo> Get(long projectId)
+        {
+            _client.DefaultRequestHeaders.Accept.Clear();
+            var streamTask = _client.GetStreamAsync($"project?projectId={projectId}");
+
+            var serializer = new DataContractJsonSerializer(typeof(ProjectInfo));
+            return serializer.ReadObject(await streamTask) as ProjectInfo;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/ProjectInfo.cs b/Components/Allocations/ProjectInfo.cs
new file mode 100644
index 0000000..8b4ca90
--- /dev/null
+++ b/Components/Allocations/ProjectInfo.cs
@@ -0,0 +1,16 @@
+﻿using System.Runtime.Serialization;
+
+namespace Allocations
+{
+    [DataContract(Name="info")]
+    public class ProjectInfo
+    {
+        [DataMember(Name="active")]
+        public bool Active { get; set; }
+
+        public ProjectInfo(bool active)
+        {
+            Active = active;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/AllocationsTest/AllocationsControllerTest.cs b/Components/AllocationsTest/AllocationsControllerTest.cs
new file mode 100644
index 0000000..0e4961d
--- /dev/null
+++ b/Components/AllocationsTest/AllocationsControllerTest.cs
@@ -0,0 +1,90 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Threading.Tasks;
+using Allocations;
+using Microsoft.AspNetCore.Mvc;
+using Moq;
+using Xunit;
+
+namespace AllocationsTest
+{
+    public class AllocationsControllerTest
+    {
+        private readonly Mock<IAllocationDataGateway> _gateway;
+        private readonly Mock<IProjectClient> _client;
+        private readonly AllocationController _controller;
+
+        public AllocationsControllerTest()
+        {
+            _gateway = new Mock<IAllocationDataGateway>();
+            _client = new Mock<IProjectClient>();
+            _controller = new AllocationController(_gateway.Object, _client.Object);
+        }
+
+        [Fact]
+        public void TestPost()
+        {
+            _gateway.Setup(g => g.Create(55432, 4765, DateTime.Parse("2014-05-16"), DateTime.Parse("2014-05-26")))
+                .Returns(new AllocationRecord(3, 55432, 4765, DateTime.Parse("2014-05-16"), DateTime.Parse("2014-05-26")));
+
+            _client.Setup(c => c.Get(55432)).Returns(Task.FromResult(new ProjectInfo(true)));
+
+            var response = _controller.Post(new AllocationInfo(-1, 55432, 4765, DateTime.Parse("2014-05-16"), DateTime.Parse("2014-05-26"), ""));
+            var body = (AllocationInfo) ((ObjectResult) response).Value;
+
+            Assert.IsType<CreatedResult>(response);
+            
+            Assert.Equal(3, body.Id);
+            Assert.Equal(55432L, body.ProjectId);
+            Assert.Equal(4765L, body.UserId);
+            Assert.Equal(16, body.FirstDay.Day);
+            Assert.Equal(5, body.FirstDay.Month);
+            Assert.Equal(2014, body.FirstDay.Year);
+            Assert.Equal(26, body.LastDay.Day);
+            Assert.Equal(5, body.FirstDay.Month);
+            Assert.Equal(2014, body.FirstDay.Year);
+            Assert.Equal("allocation info", body.Info);
+        }
+
+        [Fact]
+        public void TestGet()
+        {
+            _gateway.Setup(g => g.FindBy(55432)).Returns(new List<AllocationRecord>
+            {
+                new AllocationRecord(754, 55432, 4765, DateTime.Parse("2015-05-16"), DateTime.Parse("2015-05-17")),
+                new AllocationRecord(755, 55432, 4766, DateTime.Parse("2015-05-17"), DateTime.Parse("2015-05-18"))
+            });
+
+            _client.Setup(c => c.Get(55432)).Returns(Task.FromResult(new ProjectInfo(true)));
+
+            var response = _controller.Get(55432);
+            var body = (List<AllocationInfo>) ((ObjectResult) response).Value;
+
+            Assert.IsType<OkObjectResult>(response);
+
+            Assert.Equal(2, body.Count);
+
+            Assert.Equal(754L, body[0].Id);
+            Assert.Equal(55432L, body[0].ProjectId);
+            Assert.Equal(4765L, body[0].UserId);
+            Assert.Equal(16, body[0].FirstDay.Day);
+            Assert.Equal(5, body[0].FirstDay.Month);
+            Assert.Equal(2015, body[0].FirstDay.Year);
+            Assert.Equal(17, body[0].LastDay.Day);
+            Assert.Equal(5, body[0].FirstDay.Month);
+            Assert.Equal(2015, body[0].FirstDay.Year);
+            Assert.Equal("allocation info", body[0].Info);
+
+            Assert.Equal(755L, body[1].Id);
+            Assert.Equal(55432L, body[1].ProjectId);
+            Assert.Equal(4766L, body[1].UserId);
+            Assert.Equal(17, body[1].FirstDay.Day);
+            Assert.Equal(5, body[1].FirstDay.Month);
+            Assert.Equal(2015, body[1].FirstDay.Year);
+            Assert.Equal(18, body[1].LastDay.Day);
+            Assert.Equal(5, body[1].FirstDay.Month);
+            Assert.Equal(2015, body[1].FirstDay.Year);
+            Assert.Equal("allocation info", body[1].Info);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/AllocationsTest/AllocationsDataGatewayTest.cs b/Components/AllocationsTest/AllocationsDataGatewayTest.cs
new file mode 100755
index 0000000..e142c06
--- /dev/null
+++ b/Components/AllocationsTest/AllocationsDataGatewayTest.cs
@@ -0,0 +1,53 @@
+using System;
+using System.Linq;
+using Allocations;
+using Microsoft.EntityFrameworkCore;
+using TestSupport;
+using Xunit;
+
+namespace AllocationsTest
+{
+    [Collection("Allocations")]
+    public class AllocationDataGatewayTest
+    {
+        private static readonly TestDatabaseSupport Support =
+            new TestDatabaseSupport(TestDatabaseSupport.AllocationsConnectionString);
+
+        private static readonly DbContextOptions<AllocationContext> DbContextOptions =
+            new DbContextOptionsBuilder<AllocationContext>().UseMySql(TestDatabaseSupport.AllocationsConnectionString)
+                .Options;
+
+        public AllocationDataGatewayTest()
+        {
+            Support.TruncateAllTables();
+        }
+
+        [Fact]
+        public void TestCreate()
+        {
+            var gateway = new AllocationDataGateway(new AllocationContext(DbContextOptions));
+            gateway.Create(22, 12, DateTime.Now, DateTime.Now);
+
+            // todo...
+            var projectIds = Support.QuerySql("select project_id from allocations");
+
+            Assert.Equal(22L, projectIds[0]["project_id"]);
+        }
+
+        [Fact]
+        public void TestFind()
+        {
+            Support.ExecSql(@"insert into allocations 
+(id, project_id, user_id, first_day, last_day) values (97336, 22, 12, now(), now());");
+
+            var gateway = new AllocationDataGateway(new AllocationContext(DbContextOptions));
+            var list = gateway.FindBy(22);
+
+            // todo...
+            var actual = list.First();
+            Assert.Equal(97336, actual.Id);
+            Assert.Equal(22, actual.ProjectId);
+            Assert.Equal(12, actual.UserId);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/AllocationsTest/AllocationsTest.csproj b/Components/AllocationsTest/AllocationsTest.csproj
new file mode 100755
index 0000000..ad02c65
--- /dev/null
+++ b/Components/AllocationsTest/AllocationsTest.csproj
@@ -0,0 +1,16 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <ProjectReference Include="../Allocations/Allocations.csproj" />
+    <ProjectReference Include="../TestSupport/TestSupport.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.0.0" />
+    <PackageReference Include="xunit" Version="2.2.0" />
+    <PackageReference Include="xunit.runner.visualstudio" Version="2.2.0" />
+    <PackageReference Include="Moq" Version="4.7.63" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/Backlog/Backlog.csproj b/Components/Backlog/Backlog.csproj
new file mode 100755
index 0000000..d970631
--- /dev/null
+++ b/Components/Backlog/Backlog.csproj
@@ -0,0 +1,15 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="2.0.1" />
+    <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="2.0.1" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="System.Runtime.Serialization.Json" Version="4.3.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/Backlog/IProjectClient.cs b/Components/Backlog/IProjectClient.cs
new file mode 100644
index 0000000..5e0ae15
--- /dev/null
+++ b/Components/Backlog/IProjectClient.cs
@@ -0,0 +1,9 @@
+﻿using System.Threading.Tasks;
+
+namespace Backlog
+{
+    public interface IProjectClient
+    {
+        Task<ProjectInfo> Get(long projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/IStoryDataGateway.cs b/Components/Backlog/IStoryDataGateway.cs
new file mode 100755
index 0000000..ad5988c
--- /dev/null
+++ b/Components/Backlog/IStoryDataGateway.cs
@@ -0,0 +1,11 @@
+﻿using System.Collections.Generic;
+
+namespace Backlog
+{
+    public interface IStoryDataGateway
+    {
+        StoryRecord Create(long projectId, string name);
+
+        List<StoryRecord> FindBy(long projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/ProjectClient.cs b/Components/Backlog/ProjectClient.cs
new file mode 100644
index 0000000..1017b3a
--- /dev/null
+++ b/Components/Backlog/ProjectClient.cs
@@ -0,0 +1,25 @@
+﻿using System.Net.Http;
+using System.Runtime.Serialization.Json;
+using System.Threading.Tasks;
+
+namespace Backlog
+{
+    public class ProjectClient : IProjectClient
+    {
+        private readonly HttpClient _client;
+
+        public ProjectClient(HttpClient client)
+        {
+            _client = client;
+        }
+
+        public async Task<ProjectInfo> Get(long projectId)
+        {
+            _client.DefaultRequestHeaders.Accept.Clear();
+            var streamTask = _client.GetStreamAsync($"project?projectId={projectId}");
+
+            var serializer = new DataContractJsonSerializer(typeof(ProjectInfo));
+            return serializer.ReadObject(await streamTask) as ProjectInfo;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/ProjectInfo.cs b/Components/Backlog/ProjectInfo.cs
new file mode 100644
index 0000000..40f0fa7
--- /dev/null
+++ b/Components/Backlog/ProjectInfo.cs
@@ -0,0 +1,16 @@
+﻿using System.Runtime.Serialization;
+
+namespace Backlog
+{
+    [DataContract(Name="info")]
+    public class ProjectInfo
+    {
+        [DataMember(Name="active")]
+        public bool Active { get; set; }
+
+        public ProjectInfo(bool active)
+        {
+            Active = active;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/StoryContext.cs b/Components/Backlog/StoryContext.cs
new file mode 100644
index 0000000..3812782
--- /dev/null
+++ b/Components/Backlog/StoryContext.cs
@@ -0,0 +1,13 @@
+﻿using Microsoft.EntityFrameworkCore;
+
+namespace Backlog
+{
+    public class StoryContext : DbContext
+    {
+        public StoryContext(DbContextOptions<StoryContext> options) : base(options)
+        {
+        }
+
+        public DbSet<StoryRecord> StoryRecords { get; set; }
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/StoryController.cs b/Components/Backlog/StoryController.cs
new file mode 100755
index 0000000..844ddc9
--- /dev/null
+++ b/Components/Backlog/StoryController.cs
@@ -0,0 +1,43 @@
+﻿using System.Linq;
+using Microsoft.AspNetCore.Mvc;
+
+namespace Backlog
+{
+    [Route("stories"), Produces("application/json")]
+    public class StoryController : Controller
+    {
+        private readonly IStoryDataGateway _gateway;
+        private readonly IProjectClient _client;
+
+        public StoryController(IStoryDataGateway gateway, IProjectClient client)
+        {
+            _gateway = gateway;
+            _client = client;
+        }
+
+        [HttpGet]
+        public IActionResult Get([FromQuery] int projectId)
+        {
+            var records = _gateway.FindBy(projectId);
+            var list = records.Select(record => new StoryInfo(record.Id, record.ProjectId, record.Name, "story info"))
+                .ToList();
+            return Ok(list);
+        }
+
+        [HttpPost]
+        public IActionResult Post([FromBody] StoryInfo info)
+        {
+            if (!ProjectIsActive(info.ProjectId)) return new StatusCodeResult(304);
+
+            var record = _gateway.Create(info.ProjectId, info.Name);
+            var value = new StoryInfo(record.Id, record.ProjectId, record.Name, "story info");
+            return Created($"stories/{value.Id}", value);
+        }
+
+        private bool ProjectIsActive(long projectId)
+        {
+            var info = _client.Get(projectId);
+            return info.Result?.Active ?? false;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/StoryDataGateway.cs b/Components/Backlog/StoryDataGateway.cs
new file mode 100755
index 0000000..45b49fe
--- /dev/null
+++ b/Components/Backlog/StoryDataGateway.cs
@@ -0,0 +1,31 @@
+﻿using System.Collections.Generic;
+using System.Linq;
+using Microsoft.EntityFrameworkCore;
+
+namespace Backlog
+{
+    public class StoryDataGateway : IStoryDataGateway
+    {
+        private readonly StoryContext _context;
+
+        public StoryDataGateway(StoryContext context)
+        {
+            _context = context;
+        }
+
+        public StoryRecord Create(long projectId, string name)
+        {
+            var recordToCreate = new StoryRecord(projectId, name);
+
+            _context.StoryRecords.Add(recordToCreate);
+            _context.SaveChanges();
+
+            return recordToCreate;
+        }
+
+        public List<StoryRecord> FindBy(long projectId) => _context.StoryRecords
+            .AsNoTracking()
+            .Where(s => s.ProjectId == projectId)
+            .ToList();
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/StoryInfo.cs b/Components/Backlog/StoryInfo.cs
new file mode 100755
index 0000000..fa9331c
--- /dev/null
+++ b/Components/Backlog/StoryInfo.cs
@@ -0,0 +1,19 @@
+﻿namespace Backlog
+{
+    public class StoryInfo
+    {
+        public long Id { get; }
+        public long ProjectId { get; }
+        public string Name { get; }
+        public string Info { get; }
+
+
+        public StoryInfo(long id, long projectId, string name, string info)
+        {
+            Id = id;
+            ProjectId = projectId;
+            Name = name;
+            Info = info;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/StoryRecord.cs b/Components/Backlog/StoryRecord.cs
new file mode 100755
index 0000000..9e15c7b
--- /dev/null
+++ b/Components/Backlog/StoryRecord.cs
@@ -0,0 +1,27 @@
+﻿using System.ComponentModel.DataAnnotations.Schema;
+
+namespace Backlog
+{
+    [Table("stories")]
+    public class StoryRecord
+    {
+        [Column("id")] public long Id { get; private set; }
+        [Column("project_id")] public long ProjectId { get; private set; }
+        [Column("name")] public string Name { get; private set; }
+
+        private StoryRecord()
+        {
+        }
+
+        public StoryRecord(long projectId, string name) : this(default(long), projectId, name)
+        {
+        }
+
+        public StoryRecord(long id, long projectId, string name)
+        {
+            Id = id;
+            ProjectId = projectId;
+            Name = name;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/BacklogTest/BacklogTest.csproj b/Components/BacklogTest/BacklogTest.csproj
new file mode 100755
index 0000000..bc5d32b
--- /dev/null
+++ b/Components/BacklogTest/BacklogTest.csproj
@@ -0,0 +1,16 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <ProjectReference Include="../Backlog/Backlog.csproj" />
+    <ProjectReference Include="../TestSupport/TestSupport.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.0.0" />
+    <PackageReference Include="xunit" Version="2.2.0" />
+    <PackageReference Include="xunit.runner.visualstudio" Version="2.2.0" />
+    <PackageReference Include="Moq" Version="4.7.63" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/BacklogTest/StoryControllerTest.cs b/Components/BacklogTest/StoryControllerTest.cs
new file mode 100755
index 0000000..0cdd51d
--- /dev/null
+++ b/Components/BacklogTest/StoryControllerTest.cs
@@ -0,0 +1,77 @@
+using System.Collections.Generic;
+using System.Threading.Tasks;
+using Backlog;
+using Microsoft.AspNetCore.Mvc;
+using Moq;
+using Xunit;
+
+namespace BacklogTest
+{
+    public class StoryControllerTest
+    {
+        private readonly Mock<IStoryDataGateway> _gateway;
+        private readonly Mock<IProjectClient> _client;
+        private readonly StoryController _controller;
+
+        public StoryControllerTest()
+        {
+            _gateway = new Mock<IStoryDataGateway>();
+            _client = new Mock<IProjectClient>();
+            _controller = new StoryController(_gateway.Object, _client.Object);
+        }
+
+        [Fact]
+        public void TestPost()
+        {
+            _gateway.Setup(g => g.Create(55432, "An epic story")).Returns(new StoryRecord(1234, 55432, "An epic story"));
+            _client.Setup(c => c.Get(55432)).Returns(Task.FromResult(new ProjectInfo(true)));
+
+            var response = _controller.Post(new StoryInfo(-1, 55432, "An epic story", ""));
+            var body = (StoryInfo) ((ObjectResult) response).Value;
+
+            Assert.IsType<CreatedResult>(response);
+
+            Assert.Equal(1234, body.Id);
+            Assert.Equal(55432, body.ProjectId);
+            Assert.Equal("An epic story", body.Name);
+            Assert.Equal("story info", body.Info);
+        }
+
+        [Fact]
+        public void TestPost_InactiveProject()
+        {
+            _gateway.Setup(g => g.Create(55432, "An epic story")).Returns(new StoryRecord(1234, 55432, "An epic story"));
+            _client.Setup(c => c.Get(55432)).Returns(Task.FromResult(new ProjectInfo(false)));
+
+            var response = _controller.Post(new StoryInfo(-1, 55432, "An epic story", ""));
+
+            Assert.IsType<StatusCodeResult>(response);
+            Assert.Equal(304, ((StatusCodeResult) response).StatusCode);
+        }
+
+        [Fact]
+        public void TestGet()
+        {
+            _gateway.Setup(g => g.FindBy(55432)).Returns(new List<StoryRecord>
+            {
+                new StoryRecord(1234, 55432, "An epic story"),
+                new StoryRecord(5678, 55432, "An even more epic story")
+            });
+
+            var response = _controller.Get(55432);
+            var body = (List<StoryInfo>) ((ObjectResult) response).Value;
+
+            Assert.IsType<OkObjectResult>(response);
+            
+            Assert.Equal(2, ((List<StoryInfo>) ((ObjectResult) response).Value).Count);
+
+            Assert.Equal(1234, body[0].Id);
+            Assert.Equal("An epic story", body[0].Name);
+            Assert.Equal("story info", body[0].Info);
+
+            Assert.Equal(5678, body[1].Id);
+            Assert.Equal("An even more epic story", body[1].Name);
+            Assert.Equal("story info", body[1].Info);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/BacklogTest/StoryDataGatewayTest.cs b/Components/BacklogTest/StoryDataGatewayTest.cs
new file mode 100755
index 0000000..494d6d8
--- /dev/null
+++ b/Components/BacklogTest/StoryDataGatewayTest.cs
@@ -0,0 +1,50 @@
+using System.Linq;
+using Backlog;
+using Microsoft.EntityFrameworkCore;
+using TestSupport;
+using Xunit;
+
+namespace BacklogTest
+{
+    [Collection("Backlog")]
+    public class StoryDataGatewayTest
+    {
+        private static readonly TestDatabaseSupport Support =
+            new TestDatabaseSupport(TestDatabaseSupport.BacklogConnectionString);
+
+        private static readonly DbContextOptions<StoryContext> DbContextOptions =
+            new DbContextOptionsBuilder<StoryContext>().UseMySql(TestDatabaseSupport.BacklogConnectionString).Options;
+
+        public StoryDataGatewayTest()
+        {
+            Support.TruncateAllTables();
+        }
+
+        [Fact]
+        public void TestCreate()
+        {
+            var gateway = new StoryDataGateway(new StoryContext(DbContextOptions));
+            gateway.Create(22, "aStory");
+
+            // todo...
+            var projectIds = Support.QuerySql("select project_id from stories");
+
+            Assert.Equal(22L, projectIds[0]["project_id"]);
+        }
+
+        [Fact]
+        public void TestFind()
+        {
+            Support.ExecSql("insert into stories (id, project_id, name) values (1346, 22, 'aStory');");
+
+            var gateway = new StoryDataGateway(new StoryContext(DbContextOptions));
+            var list = gateway.FindBy(22);
+
+            // todo...
+            var actual = list.First();
+            Assert.Equal(1346, actual.Id);
+            Assert.Equal(22, actual.ProjectId);
+            Assert.Equal("aStory", actual.Name);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/DefaultRoute/DefaultController.cs b/Components/DefaultRoute/DefaultController.cs
new file mode 100755
index 0000000..38750fd
--- /dev/null
+++ b/Components/DefaultRoute/DefaultController.cs
@@ -0,0 +1,11 @@
+﻿using Microsoft.AspNetCore.Mvc;
+
+namespace DefaultRoute
+{
+    [Route("")]
+    public class DefaultController : Controller
+    {
+        [HttpGet]
+        public string Default() => "Noop!";
+    }
+}
\ No newline at end of file
diff --git a/Components/DefaultRoute/DefaultRoute.csproj b/Components/DefaultRoute/DefaultRoute.csproj
new file mode 100755
index 0000000..fd08cff
--- /dev/null
+++ b/Components/DefaultRoute/DefaultRoute.csproj
@@ -0,0 +1,10 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  
+ <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+<PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+ </ItemGroup>
+</Project>
diff --git a/Components/Projects/IProjectDataGateway.cs b/Components/Projects/IProjectDataGateway.cs
new file mode 100644
index 0000000..72a0ce7
--- /dev/null
+++ b/Components/Projects/IProjectDataGateway.cs
@@ -0,0 +1,13 @@
+﻿using System.Collections.Generic;
+
+namespace Projects
+{
+    public interface IProjectDataGateway
+    {
+        ProjectRecord Create(long accountId, string name);
+
+        List<ProjectRecord> FindBy(long accountId);
+
+        ProjectRecord FindObject(long projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Projects/ProjectContext.cs b/Components/Projects/ProjectContext.cs
new file mode 100644
index 0000000..f9368d4
--- /dev/null
+++ b/Components/Projects/ProjectContext.cs
@@ -0,0 +1,13 @@
+﻿using Microsoft.EntityFrameworkCore;
+
+namespace Projects
+{
+    public class ProjectContext : DbContext
+    {
+        public ProjectContext(DbContextOptions<ProjectContext> options) : base(options)
+        {
+        }
+        
+        public DbSet<ProjectRecord> ProjectRecords { get; set; }
+    }
+}
\ No newline at end of file
diff --git a/Components/Projects/ProjectController.cs b/Components/Projects/ProjectController.cs
new file mode 100644
index 0000000..0f97cd2
--- /dev/null
+++ b/Components/Projects/ProjectController.cs
@@ -0,0 +1,48 @@
+﻿using System.Linq;
+using Microsoft.AspNetCore.Mvc;
+
+namespace Projects
+{
+    public class ProjectController : Controller
+    {
+        private readonly IProjectDataGateway _gateway;
+
+        public ProjectController(IProjectDataGateway gateway)
+        {
+            _gateway = gateway;
+        }
+
+        [HttpGet]
+        [Route("projects"), Produces("application/json")]
+        public IActionResult List([FromQuery] int accountId)
+        {
+            var records = _gateway.FindBy(accountId);
+            var list = records.Select(record => new ProjectInfo(record.Id, record.AccountId, record.Name,
+                    record.Active, "project info"))
+                .ToList();
+            return Ok(list);
+        }
+
+        [HttpGet]
+        [Route("project"), Produces("application/json")]
+        public IActionResult Get([FromQuery] int projectId)
+        {
+            var record = _gateway.FindObject(projectId);
+
+            if (record != null)
+            {
+                return Ok(new ProjectInfo(record.Id, record.AccountId, record.Name, record.Active, "project info"));
+            }
+            return NotFound();
+        }
+
+        [HttpPost]
+        [Route("projects"), Produces("application/json")]
+        public IActionResult Post([FromBody] ProjectInfo info)
+        {
+            var record = _gateway.Create(info.AccountId, info.Name);
+            var value = new ProjectInfo(record.Id, record.AccountId, record.Name, record.Active, "project info");
+            return Created($"projects/{value.Id}", value);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Projects/ProjectDataGateway.cs b/Components/Projects/ProjectDataGateway.cs
new file mode 100644
index 0000000..09ebf18
--- /dev/null
+++ b/Components/Projects/ProjectDataGateway.cs
@@ -0,0 +1,36 @@
+﻿using System.Collections.Generic;
+using System.Linq;
+using Microsoft.EntityFrameworkCore;
+
+namespace Projects
+{
+    public class ProjectDataGateway : IProjectDataGateway
+    {
+        private readonly ProjectContext _context;
+
+        public ProjectDataGateway(ProjectContext context)
+        {
+            _context = context;
+        }
+
+        public ProjectRecord Create(long accountId, string name)
+        {
+            var recordToCreate = new ProjectRecord(accountId, name, true);
+
+            _context.ProjectRecords.Add(recordToCreate);
+            _context.SaveChanges();
+
+            return recordToCreate;
+        }
+
+        public List<ProjectRecord> FindBy(long accountId) => _context.ProjectRecords
+            .AsNoTracking()
+            .Where(a => a.AccountId == accountId)
+            .ToList();
+
+        public ProjectRecord FindObject(long projectId) => _context.ProjectRecords
+            .AsNoTracking()
+            .DefaultIfEmpty()
+            .Single(a => a.Id == projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Projects/ProjectInfo.cs b/Components/Projects/ProjectInfo.cs
new file mode 100644
index 0000000..b0a5c81
--- /dev/null
+++ b/Components/Projects/ProjectInfo.cs
@@ -0,0 +1,21 @@
+﻿namespace Projects
+{
+    public class ProjectInfo
+    {
+        public long Id { get; }
+        public long AccountId { get; }
+        public string Name { get; }
+        public bool Active { get; }
+        public string Info { get; }
+
+
+        public ProjectInfo(long id, long accountId, string name, bool active, string info)
+        {
+            Id = id;
+            AccountId = accountId;
+            Name = name;
+            Active = active;
+            Info = info;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Projects/ProjectRecord.cs b/Components/Projects/ProjectRecord.cs
new file mode 100644
index 0000000..7a4f7b2
--- /dev/null
+++ b/Components/Projects/ProjectRecord.cs
@@ -0,0 +1,29 @@
+﻿using System.ComponentModel.DataAnnotations.Schema;
+
+namespace Projects
+{
+    [Table("projects")]
+    public class ProjectRecord
+    {
+        [Column("id")] public long Id { get; private set; }
+        [Column("account_id")] public long AccountId { get; private set; }
+        [Column("name")] public string Name { get; private set; }
+        [Column("active")] public bool Active { get; private set; }
+
+        private ProjectRecord()
+        {
+        }
+
+        public ProjectRecord(long accountId, string name, bool active) : this(default(long), accountId, name, active)
+        {
+        }
+
+        public ProjectRecord(long id, long accountId, string name, bool active)
+        {
+            Id = id;
+            AccountId = accountId;
+            Name = name;
+            Active = active;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Projects/Projects.csproj b/Components/Projects/Projects.csproj
new file mode 100755
index 0000000..f86dfd5
--- /dev/null
+++ b/Components/Projects/Projects.csproj
@@ -0,0 +1,14 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="2.0.1" />
+    <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="2.0.1" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/ProjectsTest/ProjectControllerTest.cs b/Components/ProjectsTest/ProjectControllerTest.cs
new file mode 100755
index 0000000..7644b51
--- /dev/null
+++ b/Components/ProjectsTest/ProjectControllerTest.cs
@@ -0,0 +1,90 @@
+using System.Collections.Generic;
+using Microsoft.AspNetCore.Mvc;
+using Moq;
+using Projects;
+using Xunit;
+
+namespace ProjectsTest
+{
+    public class ProjectControllerTest
+    {
+        private readonly Mock<IProjectDataGateway> _gateway;
+        private readonly ProjectController _controller;
+
+        public ProjectControllerTest()
+        {
+            _gateway = new Mock<IProjectDataGateway>();
+            _controller = new ProjectController(_gateway.Object);
+        }
+
+        [Fact]
+        public void TestPost()
+        {
+            _gateway.Setup(g => g.Create(1673, "aProject")).Returns(new ProjectRecord(123, 1673, "aProject", true));
+
+            var response = _controller.Post(new ProjectInfo(-1, 1673, "aProject", true, ""));
+            var body = (ProjectInfo) ((ObjectResult) response).Value;
+
+            Assert.IsType<CreatedResult>(response);
+
+            Assert.Equal(123, body.Id);
+            Assert.Equal(1673, body.AccountId);
+            Assert.Equal("aProject", body.Name);
+            Assert.Equal(true, body.Active);
+            Assert.Equal("project info", body.Info);
+        }
+
+        [Fact]
+        public void TestGet()
+        {
+            _gateway.Setup(g => g.FindObject(55431)).Returns(new ProjectRecord(55431, 1673, "aProject", true));
+
+            var response = _controller.Get(55431);
+            var body = (ProjectInfo) ((ObjectResult) response).Value;
+
+            Assert.IsType<OkObjectResult>(response);
+            
+            Assert.Equal(55431, body.Id);
+            Assert.Equal(1673, body.AccountId);
+            Assert.Equal("aProject", body.Name);
+            Assert.Equal(true, body.Active);
+        }
+
+        [Fact]
+        public void TestGet_NotFound()
+        {
+            _gateway.Setup(g => g.FindObject(1673)).Returns(new ProjectRecord(55431, 1673, "aProject", true));
+
+            var response = _controller.Get(99999);
+
+            Assert.IsType<NotFoundResult>(response);
+        }
+
+        [Fact]
+        public void TestList()
+        {
+            _gateway.Setup(g => g.FindBy(1673)).Returns(new List<ProjectRecord>
+            {
+                new ProjectRecord(55431, 1673, "aProject", false),
+                new ProjectRecord(55432, 1673, "anotherProject", true)
+            });
+
+            var response = _controller.List(1673);
+            var body = (List<ProjectInfo>) ((ObjectResult) response).Value;
+
+            Assert.IsType<OkObjectResult>(response);
+
+            Assert.Equal(2, ((List<ProjectInfo>) ((ObjectResult) response).Value).Count);
+            
+            Assert.Equal(55431, body[0].Id);
+            Assert.Equal(1673, body[0].AccountId);
+            Assert.Equal("aProject", body[0].Name);
+            Assert.Equal(false, body[0].Active);
+            
+            Assert.Equal(55432, body[1].Id);
+            Assert.Equal(1673, body[1].AccountId);
+            Assert.Equal("anotherProject", body[1].Name);
+            Assert.Equal(true, body[1].Active);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/ProjectsTest/ProjectDataGatewayTest.cs b/Components/ProjectsTest/ProjectDataGatewayTest.cs
new file mode 100755
index 0000000..7e2f497
--- /dev/null
+++ b/Components/ProjectsTest/ProjectDataGatewayTest.cs
@@ -0,0 +1,79 @@
+using System.Linq;
+using Microsoft.EntityFrameworkCore;
+using Projects;
+using TestSupport;
+using Xunit;
+
+namespace ProjectsTest
+{
+    [Collection("Projects")]
+    public class ProjectDataGatewayTest
+    {
+        private static readonly TestDatabaseSupport Support =
+            new TestDatabaseSupport(TestDatabaseSupport.RegistrationConnectionString);
+
+        private static readonly DbContextOptions<ProjectContext> DbContextOptions =
+            new DbContextOptionsBuilder<ProjectContext>().UseMySql(TestDatabaseSupport.RegistrationConnectionString)
+                .Options;
+
+        public ProjectDataGatewayTest()
+        {
+            Support.TruncateAllTables();
+        }
+
+        [Fact]
+        public void TestCreate()
+        {
+            Support.ExecSql(@"
+insert into users (id, name) values (12, 'Jack');
+insert into accounts (id, owner_id, name) values (1, 12, 'anAccount');");
+
+            var gateway = new ProjectDataGateway(new ProjectContext(DbContextOptions));
+            gateway.Create(1, "aProject");
+
+            // todo...
+            var projects = Support.QuerySql("select name from projects where account_id = 1");
+
+            Assert.Equal("aProject", projects[0]["name"]);
+        }
+
+        [Fact]
+        public void TestFind()
+        {
+            Support.ExecSql(@"
+insert into users (id, name) values (12, 'Jack');
+insert into accounts (id, owner_id, name) values (1, 12, 'anAccount');
+insert into projects (id, account_id, name) values (22, 1, 'aProject');");
+
+            var gateway = new ProjectDataGateway(new ProjectContext(DbContextOptions));
+            var list = gateway.FindBy(1);
+
+            // todo...
+            var actual = list.First();
+            Assert.Equal(22, actual.Id);
+            Assert.Equal(1, actual.AccountId);
+            Assert.Equal("aProject", actual.Name);
+            Assert.Equal(true, actual.Active);
+        }
+
+        [Fact]
+        public void TestFindObject()
+        {
+            Support.ExecSql(@"
+insert into users (id, name) values (12, 'Jack');
+insert into accounts (id, owner_id, name) values (1, 12, 'anAccount');
+insert into projects (id, account_id, name, active) values (22, 1, 'aProject', true);");
+
+            var gateway = new ProjectDataGateway(new ProjectContext(DbContextOptions));
+            var actual = gateway.FindObject(22);
+
+            // todo...    
+            Assert.Equal(22, actual.Id);
+            Assert.Equal(1, actual.AccountId);
+            Assert.Equal("aProject", actual.Name);
+            Assert.Equal(true, actual.Active);
+
+            Assert.Null(gateway.FindObject(23));
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/ProjectsTest/ProjectsTest.csproj b/Components/ProjectsTest/ProjectsTest.csproj
new file mode 100755
index 0000000..83dd349
--- /dev/null
+++ b/Components/ProjectsTest/ProjectsTest.csproj
@@ -0,0 +1,18 @@
+<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="../Projects/Projects.csproj"/>
+    <ProjectReference Include="../TestSupport/TestSupport.csproj"/>
+    <PackageReference Include="MySqlConnector" Version="0.35.0"/>
+  </ItemGroup>
+
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.0.0"/>
+    <PackageReference Include="xunit" Version="2.2.0"/>
+    <PackageReference Include="xunit.runner.visualstudio" Version="2.2.0"/>
+    <PackageReference Include="Moq" Version="4.7.63" />
+  </ItemGroup>
+</Project>
diff --git a/Components/TestSupport/TestDatabaseSupport.cs b/Components/TestSupport/TestDatabaseSupport.cs
new file mode 100644
index 0000000..3eb80fa
--- /dev/null
+++ b/Components/TestSupport/TestDatabaseSupport.cs
@@ -0,0 +1,113 @@
+﻿using System.Collections.Generic;
+using System.Linq;
+using MySql.Data.MySqlClient;
+
+namespace TestSupport
+{
+    public class TestDatabaseSupport
+    {
+        public static string RegistrationConnectionString => ConnectionString("tracker_registration_dotnet_test");
+        public static string BacklogConnectionString => ConnectionString("tracker_backlog_dotnet_test");
+        public static string AllocationsConnectionString => ConnectionString("tracker_allocations_dotnet_test");
+        public static string TimesheetsConnectionString => ConnectionString("tracker_timesheets_dotnet_test");
+
+        private const string DbUser = "tracker_dotnet";
+        private const string DbPassword = "password";
+
+        public static string ConnectionString(string database) =>
+            $"server=127.0.0.1;uid={DbUser};pwd={DbPassword};database={database}";
+
+        private readonly string _connectionString;
+
+        public TestDatabaseSupport(string connectionString)
+        {
+            _connectionString = connectionString;
+        }
+
+
+        public void ExecSql(string sql)
+        {
+            using (var connection = new MySqlConnection(_connectionString))
+            {
+                connection.Open();
+                using (var command = connection.CreateCommand())
+                {
+                    command.CommandText = sql;
+                    command.ExecuteNonQuery();
+                }
+            }
+        }
+
+        public IList<IDictionary<string, object>> QuerySql(string sql)
+        {
+            var result = new List<IDictionary<string, object>>();
+
+            using (var connection = new MySqlConnection(_connectionString))
+            {
+                connection.Open();
+                using (var command = connection.CreateCommand())
+                {
+                    command.CommandText = sql;
+                    using (var reader = command.ExecuteReader())
+                    {
+                        while (reader.HasRows)
+                        {
+                            while (reader.Read())
+                            {
+                                var rowData = Enumerable.Range(0, reader.FieldCount)
+                                    .ToDictionary(reader.GetName, reader.GetValue);
+
+                                result.Add(rowData);
+                            }
+
+                            reader.NextResult();
+                        }
+                    }
+                }
+            }
+
+            return result;
+        }
+
+        public void TruncateAllTables()
+        {
+            var dbName = new MySqlConnectionStringBuilder(_connectionString).Database;
+
+            var tableNameSql = $@"set foreign_key_checks = 0;
+                select table_name FROM information_schema.tables
+                where table_schema='{dbName}' and table_name != 'schema_version';";
+
+            var truncateSql = "";
+
+            using (var connection = new MySqlConnection(_connectionString))
+            {
+                connection.Open();
+
+                using (var command = connection.CreateCommand())
+                {
+                    command.CommandText = tableNameSql;
+
+                    using (var reader = command.ExecuteReader())
+                    {
+                        while (reader.HasRows)
+                        {
+                            while (reader.Read())
+                            {
+                                var table = reader.GetString(0);
+                                truncateSql += $"truncate {table};";
+                            }
+
+                            reader.NextResult();
+                        }
+                    }
+                }
+
+                using (var command = connection.CreateCommand())
+                {
+                    command.CommandText = truncateSql;
+                    command.ExecuteNonQuery();
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/TestSupport/TestSupport.csproj b/Components/TestSupport/TestSupport.csproj
new file mode 100755
index 0000000..525c5a5
--- /dev/null
+++ b/Components/TestSupport/TestSupport.csproj
@@ -0,0 +1,15 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="System.Runtime.Serialization.Json" Version="4.3.0" />
+    <PackageReference Include="Microsoft.AspNetCore.TestHost" Version="2.0.1" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/Timesheets/IProjectClient.cs b/Components/Timesheets/IProjectClient.cs
new file mode 100644
index 0000000..b6fa300
--- /dev/null
+++ b/Components/Timesheets/IProjectClient.cs
@@ -0,0 +1,9 @@
+﻿using System.Threading.Tasks;
+
+namespace Timesheets
+{
+    public interface IProjectClient
+    {
+        Task<ProjectInfo> Get(long projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/ITimeEntryDataGateway.cs b/Components/Timesheets/ITimeEntryDataGateway.cs
new file mode 100755
index 0000000..49fe761
--- /dev/null
+++ b/Components/Timesheets/ITimeEntryDataGateway.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+
+namespace Timesheets
+{
+    public interface ITimeEntryDataGateway
+    {
+        TimeEntryRecord Create(long projectId, long userId, DateTime date, int hours);
+
+        List<TimeEntryRecord> FindBy(long userId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/ProjectClient.cs b/Components/Timesheets/ProjectClient.cs
new file mode 100644
index 0000000..a43eb0e
--- /dev/null
+++ b/Components/Timesheets/ProjectClient.cs
@@ -0,0 +1,25 @@
+﻿using System.Net.Http;
+using System.Runtime.Serialization.Json;
+using System.Threading.Tasks;
+
+namespace Timesheets
+{
+    public class ProjectClient : IProjectClient
+    {
+        private readonly HttpClient _client;
+
+        public ProjectClient(HttpClient client)
+        {
+            _client = client;
+        }
+
+        public async Task<ProjectInfo> Get(long projectId)
+        {
+            _client.DefaultRequestHeaders.Accept.Clear();
+            var streamTask = _client.GetStreamAsync($"project?projectId={projectId}");
+
+            var serializer = new DataContractJsonSerializer(typeof(ProjectInfo));
+            return serializer.ReadObject(await streamTask) as ProjectInfo;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/ProjectInfo.cs b/Components/Timesheets/ProjectInfo.cs
new file mode 100644
index 0000000..f5808a0
--- /dev/null
+++ b/Components/Timesheets/ProjectInfo.cs
@@ -0,0 +1,16 @@
+﻿using System.Runtime.Serialization;
+
+namespace Timesheets
+{
+    [DataContract(Name="info")]
+    public class ProjectInfo
+    {
+        [DataMember(Name="active")]
+        public bool Active { get; set; }
+
+        public ProjectInfo(bool active)
+        {
+            Active = active;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/TimeEntryContext.cs b/Components/Timesheets/TimeEntryContext.cs
new file mode 100644
index 0000000..0106c2f
--- /dev/null
+++ b/Components/Timesheets/TimeEntryContext.cs
@@ -0,0 +1,13 @@
+﻿using Microsoft.EntityFrameworkCore;
+
+namespace Timesheets
+{
+    public class TimeEntryContext : DbContext
+    {
+        public TimeEntryContext(DbContextOptions<TimeEntryContext> options) : base(options)
+        {
+        }
+
+        public DbSet<TimeEntryRecord> TimeEntryRecords { get; set; }
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/TimeEntryController.cs b/Components/Timesheets/TimeEntryController.cs
new file mode 100755
index 0000000..e0da580
--- /dev/null
+++ b/Components/Timesheets/TimeEntryController.cs
@@ -0,0 +1,45 @@
+﻿using System.Linq;
+using Microsoft.AspNetCore.Mvc;
+
+namespace Timesheets
+{
+    [Route("time-entries"), Produces("application/json")]
+    public class TimeEntryController : Controller
+    {
+        private readonly ITimeEntryDataGateway _gateway;
+        private readonly IProjectClient _client;
+
+        public TimeEntryController(ITimeEntryDataGateway gateway, IProjectClient client)
+        {
+            _gateway = gateway;
+            _client = client;
+        }
+
+        [HttpGet]
+        public IActionResult Get([FromQuery] int userId)
+        {
+            var records = _gateway.FindBy(userId);
+            var list = records.Select(record => new TimeEntryInfo(record.Id, record.ProjectId, record.UserId,
+                    record.Date, record.Hours, "entry info"))
+                .ToList();
+            return Ok(list);
+        }
+
+        [HttpPost]
+        public IActionResult Post([FromBody] TimeEntryInfo info)
+        {
+            if (!ProjectIsActive(info.ProjectId)) return new StatusCodeResult(304);
+
+            var record = _gateway.Create(info.ProjectId, info.UserId, info.Date, info.Hours);
+            var value = new TimeEntryInfo(record.Id, record.ProjectId, record.UserId, record.Date, record.Hours,
+                "entry info");
+            return Created($"time-entries/{value.Id}", value);
+        }
+
+        private bool ProjectIsActive(long projectId)
+        {
+            var info = _client.Get(projectId);
+            return info.Result?.Active ?? false;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/TimeEntryDataGateway.cs b/Components/Timesheets/TimeEntryDataGateway.cs
new file mode 100755
index 0000000..d1cfba4
--- /dev/null
+++ b/Components/Timesheets/TimeEntryDataGateway.cs
@@ -0,0 +1,32 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using Microsoft.EntityFrameworkCore;
+
+namespace Timesheets
+{
+    public class TimeEntryDataGateway : ITimeEntryDataGateway
+    {
+        private readonly TimeEntryContext _context;
+
+        public TimeEntryDataGateway(TimeEntryContext context)
+        {
+            _context = context;
+        }
+
+        public TimeEntryRecord Create(long projectId, long userId, DateTime date, int hours)
+        {
+            var recordToCreate = new TimeEntryRecord(projectId, userId, date, hours);
+
+            _context.TimeEntryRecords.Add(recordToCreate);
+            _context.SaveChanges();
+
+            return recordToCreate;
+        }
+
+        public List<TimeEntryRecord> FindBy(long userId) => _context.TimeEntryRecords
+            .AsNoTracking()
+            .Where(te => te.UserId == userId)
+            .ToList();
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/TimeEntryInfo.cs b/Components/Timesheets/TimeEntryInfo.cs
new file mode 100755
index 0000000..6d85c0a
--- /dev/null
+++ b/Components/Timesheets/TimeEntryInfo.cs
@@ -0,0 +1,25 @@
+﻿using System;
+
+namespace Timesheets
+{
+    public class TimeEntryInfo
+    {
+        public long Id { get; }
+        public long ProjectId { get; }
+        public long UserId { get; }
+        public DateTime Date { get; }
+        public int Hours { get; }
+        public string Info { get; }
+
+
+        public TimeEntryInfo(long id, long projectId, long userId, DateTime date, int hours, string info)
+        {
+            Id = id;
+            ProjectId = projectId;
+            UserId = userId;
+            Date = date;
+            Hours = hours;
+            Info = info;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/TimeEntryRecord.cs b/Components/Timesheets/TimeEntryRecord.cs
new file mode 100755
index 0000000..a637e8d
--- /dev/null
+++ b/Components/Timesheets/TimeEntryRecord.cs
@@ -0,0 +1,33 @@
+﻿using System;
+using System.ComponentModel.DataAnnotations.Schema;
+
+namespace Timesheets
+{
+    [Table("time_entries")]
+    public class TimeEntryRecord
+    {
+        [Column("id")] public long Id { get; private set; }
+        [Column("project_id")] public long ProjectId { get; private set; }
+        [Column("user_id")] public long UserId { get; private set; }
+        [Column("date")] public DateTime Date { get; private set; }
+        [Column("hours")] public int Hours { get; private set; }
+
+        private TimeEntryRecord()
+        {
+        }
+
+        public TimeEntryRecord(long projectId, long userId, DateTime date, int hours) :
+            this(default(long), projectId, userId, date, hours)
+        {
+        }
+
+        public TimeEntryRecord(long id, long projectId, long userId, DateTime date, int hours)
+        {
+            Id = id;
+            ProjectId = projectId;
+            UserId = userId;
+            Date = date;
+            Hours = hours;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/Timesheets.csproj b/Components/Timesheets/Timesheets.csproj
new file mode 100755
index 0000000..d970631
--- /dev/null
+++ b/Components/Timesheets/Timesheets.csproj
@@ -0,0 +1,15 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="2.0.1" />
+    <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="2.0.1" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+    <PackageReference Include="System.Runtime.Serialization.Json" Version="4.3.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/TimesheetsTest/TimeEntryControllerTest.cs b/Components/TimesheetsTest/TimeEntryControllerTest.cs
new file mode 100755
index 0000000..1182626
--- /dev/null
+++ b/Components/TimesheetsTest/TimeEntryControllerTest.cs
@@ -0,0 +1,96 @@
+using System;
+using System.Collections.Generic;
+using System.Threading.Tasks;
+using Microsoft.AspNetCore.Mvc;
+using Moq;
+using Timesheets;
+using Xunit;
+
+namespace TimesheetsTest
+{
+    public class TimeEntryControllerTest
+    {
+        private readonly Mock<ITimeEntryDataGateway> _gateway;
+        private readonly Mock<IProjectClient> _client;
+        private readonly TimeEntryController _controller;
+
+        public TimeEntryControllerTest()
+        {
+            _gateway = new Mock<ITimeEntryDataGateway>();
+            _client = new Mock<IProjectClient>();
+            _controller = new TimeEntryController(_gateway.Object, _client.Object);
+        }
+
+        [Fact]
+        public void TestPost()
+        {
+            _gateway.Setup(g => g.Create(55432, 4765, DateTime.Parse("2015-05-17"), 8))
+                .Returns(new TimeEntryRecord(1234, 55432, 4765, DateTime.Parse("2015-05-17"), 8));
+
+            _client.Setup(c => c.Get(55432)).Returns(Task.FromResult(new ProjectInfo(true)));
+
+            var response = _controller.Post(new TimeEntryInfo(-1, 55432, 4765, DateTime.Parse("2015-05-17"), 8, ""));
+            var body = (TimeEntryInfo) ((ObjectResult) response).Value;
+
+            Assert.IsType<CreatedResult>(response);
+
+            Assert.Equal(1234, body.Id);
+            Assert.Equal(55432, body.ProjectId);
+            Assert.Equal(4765, body.UserId);
+            Assert.Equal(17, body.Date.Day);
+            Assert.Equal(5, body.Date.Month);
+            Assert.Equal(2015, body.Date.Year);
+            Assert.Equal(8, body.Hours);
+            Assert.Equal("entry info", body.Info);
+        }
+
+        [Fact]
+        public void TestPost_InactiveProject()
+        {
+            _gateway.Setup(g => g.Create(55432, 4765, DateTime.Parse("2015-05-17"), 8))
+                .Returns(new TimeEntryRecord(1234, 55432, 4765, DateTime.Parse("2015-05-17"), 8));
+
+            _client.Setup(c => c.Get(55432)).Returns(Task.FromResult(new ProjectInfo(false)));
+
+            var response = _controller.Post(new TimeEntryInfo(-1, 55432, 4765, DateTime.Parse("2015-05-17"), 8, ""));
+
+            Assert.IsType<StatusCodeResult>(response);
+            Assert.Equal(304, ((StatusCodeResult) response).StatusCode);
+        }
+
+        [Fact]
+        public void TestGet()
+        {
+            _gateway.Setup(g => g.FindBy(4765)).Returns(new List<TimeEntryRecord>
+            {
+                new TimeEntryRecord(1234, 55432, 4765, DateTime.Parse("2015-05-17"), 8),
+                new TimeEntryRecord(5678, 55433, 4765, DateTime.Parse("2015-05-18"), 6)
+            });
+
+            var response = _controller.Get(4765);
+            var body = (List<TimeEntryInfo>) ((ObjectResult) response).Value;
+
+            Assert.IsType<OkObjectResult>(response);
+
+            Assert.Equal(2, ((List<TimeEntryInfo>) ((ObjectResult) response).Value).Count);
+
+            Assert.Equal(1234, body[0].Id);
+            Assert.Equal(55432, body[0].ProjectId);
+            Assert.Equal(4765, body[0].UserId);
+            Assert.Equal(17, body[0].Date.Day);
+            Assert.Equal(5, body[0].Date.Month);
+            Assert.Equal(2015, body[0].Date.Year);
+            Assert.Equal(8, body[0].Hours);
+            Assert.Equal("entry info", body[0].Info);
+
+            Assert.Equal(5678, body[1].Id);
+            Assert.Equal(55433, body[1].ProjectId);
+            Assert.Equal(4765, body[1].UserId);
+            Assert.Equal(18, body[1].Date.Day);
+            Assert.Equal(5, body[1].Date.Month);
+            Assert.Equal(2015, body[1].Date.Year);
+            Assert.Equal(6, body[1].Hours);
+            Assert.Equal("entry info", body[1].Info);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/TimesheetsTest/TimeEntryDataGatewayTest.cs b/Components/TimesheetsTest/TimeEntryDataGatewayTest.cs
new file mode 100755
index 0000000..58cec92
--- /dev/null
+++ b/Components/TimesheetsTest/TimeEntryDataGatewayTest.cs
@@ -0,0 +1,53 @@
+using System;
+using System.Linq;
+using Microsoft.EntityFrameworkCore;
+using TestSupport;
+using Timesheets;
+using Xunit;
+
+namespace TimesheetsTest
+{
+    [Collection("Timesheets")]
+    public class TimeEntryDataGatewayTest
+    {
+        private static readonly TestDatabaseSupport Support =
+            new TestDatabaseSupport(TestDatabaseSupport.TimesheetsConnectionString);
+
+        private static readonly DbContextOptions<TimeEntryContext> DbContextOptions =
+            new DbContextOptionsBuilder<TimeEntryContext>().UseMySql(TestDatabaseSupport.TimesheetsConnectionString)
+                .Options;
+
+        public TimeEntryDataGatewayTest()
+        {
+            Support.TruncateAllTables();
+        }
+
+        [Fact]
+        public void TestCreate()
+        {
+            var gateway = new TimeEntryDataGateway(new TimeEntryContext(DbContextOptions));
+            gateway.Create(22, 12, DateTime.Now, 8);
+
+            // todo...
+            var projectIds = Support.QuerySql("select project_id from time_entries");
+
+            Assert.Equal(22L, projectIds[0]["project_id"]);
+        }
+
+        [Fact]
+        public void TestFind()
+        {
+            Support.ExecSql(@"insert into time_entries (id, project_id, user_id, date, hours) 
+values (2346, 22, 12, now(), 8);");
+
+            var gateway = new TimeEntryDataGateway(new TimeEntryContext(DbContextOptions));
+            var list = gateway.FindBy(12);
+
+            // todo...
+            var actual = list.First();
+            Assert.Equal(2346, actual.Id);
+            Assert.Equal(22, actual.ProjectId);
+            Assert.Equal(12, actual.UserId);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/TimesheetsTest/TimesheetsTest.csproj b/Components/TimesheetsTest/TimesheetsTest.csproj
new file mode 100755
index 0000000..f1297ae
--- /dev/null
+++ b/Components/TimesheetsTest/TimesheetsTest.csproj
@@ -0,0 +1,16 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <ProjectReference Include="../Timesheets/Timesheets.csproj" />
+    <ProjectReference Include="../TestSupport/TestSupport.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.0.0" />
+    <PackageReference Include="xunit" Version="2.2.0" />
+    <PackageReference Include="xunit.runner.visualstudio" Version="2.2.0" />
+    <PackageReference Include="Moq" Version="4.7.63" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/Users/IUserDataGateway.cs b/Components/Users/IUserDataGateway.cs
new file mode 100644
index 0000000..c0275bc
--- /dev/null
+++ b/Components/Users/IUserDataGateway.cs
@@ -0,0 +1,9 @@
+﻿namespace Users
+{
+    public interface IUserDataGateway
+    {
+        UserRecord Create(string name);
+
+        UserRecord FindObjectBy(long id);
+    }
+}
\ No newline at end of file
diff --git a/Components/Users/UserContext.cs b/Components/Users/UserContext.cs
new file mode 100644
index 0000000..0aaf847
--- /dev/null
+++ b/Components/Users/UserContext.cs
@@ -0,0 +1,13 @@
+﻿using Microsoft.EntityFrameworkCore;
+
+namespace Users
+{
+    public class UserContext : DbContext
+    {
+        public UserContext(DbContextOptions<UserContext> options) : base(options)
+        {
+        }
+        
+        public DbSet<UserRecord> UserRecords { get; set; }
+    }
+}
\ No newline at end of file
diff --git a/Components/Users/UserController.cs b/Components/Users/UserController.cs
new file mode 100644
index 0000000..f4dd924
--- /dev/null
+++ b/Components/Users/UserController.cs
@@ -0,0 +1,28 @@
+﻿using Microsoft.AspNetCore.Mvc;
+
+namespace Users
+{
+    [Route("users"), Produces("application/json")]
+    public class UserController : Controller
+    {
+        private readonly IUserDataGateway _gateway;
+
+        public UserController(IUserDataGateway gateway)
+        {
+            _gateway = gateway;
+        }
+
+        [HttpGet("{id}")]
+        public IActionResult Get(int id)
+        {
+            var record = _gateway.FindObjectBy(id);
+
+            if (record == null)
+            {
+                return NotFound();
+            }
+
+            return Ok(new UserInfo(record.Id, record.Name, "user info"));
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Users/UserDataGateway.cs b/Components/Users/UserDataGateway.cs
new file mode 100644
index 0000000..057265d
--- /dev/null
+++ b/Components/Users/UserDataGateway.cs
@@ -0,0 +1,30 @@
+﻿using System.Linq;
+using Microsoft.EntityFrameworkCore;
+
+namespace Users
+{
+    public class UserDataGateway : IUserDataGateway
+    {
+        private readonly UserContext _context;
+
+        public UserDataGateway(UserContext context)
+        {
+            _context = context;
+        }
+
+        public UserRecord Create(string name)
+        {
+            var recordToCreate = new UserRecord(name);
+
+            _context.UserRecords.Add(recordToCreate);
+            _context.SaveChanges();
+
+            return recordToCreate;
+        }
+
+        public UserRecord FindObjectBy(long id) => _context.UserRecords
+            .AsNoTracking()
+            .DefaultIfEmpty()
+            .Single(u => u.Id == id);
+    }
+}
\ No newline at end of file
diff --git a/Components/Users/UserInfo.cs b/Components/Users/UserInfo.cs
new file mode 100644
index 0000000..40d35de
--- /dev/null
+++ b/Components/Users/UserInfo.cs
@@ -0,0 +1,16 @@
+﻿namespace Users
+{
+    public class UserInfo
+    {
+        public long Id { get; }
+        public string Name { get; }
+        public string Info { get; }
+
+        public UserInfo(long id, string name, string info)
+        {
+            Id = id;
+            Name = name;
+            Info = info;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Users/UserRecord.cs b/Components/Users/UserRecord.cs
new file mode 100755
index 0000000..c315465
--- /dev/null
+++ b/Components/Users/UserRecord.cs
@@ -0,0 +1,25 @@
+﻿using System.ComponentModel.DataAnnotations.Schema;
+
+namespace Users
+{
+    [Table("users")]
+    public class UserRecord
+    {
+        [Column("id")] public long Id { get; private set; }
+        [Column("name")] public string Name { get; private set; }
+
+        private UserRecord()
+        {
+        }
+
+        public UserRecord(string name) : this(default(long), name)
+        {
+        }
+
+        public UserRecord(long id, string name)
+        {
+            Id = id;
+            Name = name;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/Users/Users.csproj b/Components/Users/Users.csproj
new file mode 100755
index 0000000..f86dfd5
--- /dev/null
+++ b/Components/Users/Users.csproj
@@ -0,0 +1,14 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="2.0.1" />
+    <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="2.0.1" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
+    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="2.0.2" />
+    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="2.0.0" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Components/UsersTest/UserControllerTest.cs b/Components/UsersTest/UserControllerTest.cs
new file mode 100644
index 0000000..1b32f9b
--- /dev/null
+++ b/Components/UsersTest/UserControllerTest.cs
@@ -0,0 +1,43 @@
+﻿using Microsoft.AspNetCore.Mvc;
+using Moq;
+using Users;
+using Xunit;
+
+namespace UsersTest
+{
+    public class UserControllerTest
+    {
+        private readonly Mock<IUserDataGateway> _gateway;
+        private readonly UserController _controller;
+
+        public UserControllerTest()
+        {
+            _gateway = new Mock<IUserDataGateway>();
+            _controller = new UserController(_gateway.Object);
+        }
+
+        [Fact]
+        public void TestGet()
+        {
+            _gateway.Setup(g => g.FindObjectBy(4765)).Returns(new UserRecord(4765, "Jack"));
+
+            var response = _controller.Get(4765);
+            var body = (UserInfo) ((ObjectResult) response).Value;
+
+            Assert.IsType<OkObjectResult>(response);
+            Assert.Equal(4765, body.Id);
+            Assert.Equal("Jack", body.Name);
+            Assert.Equal("user info", body.Info);
+        }
+        
+        [Fact]
+        public void TestGet_NotFound()
+        {
+            _gateway.Setup(g => g.FindObjectBy(4765)).Returns(new UserRecord(4765, "Jack"));
+
+            var response = _controller.Get(9999);
+
+            Assert.IsType<NotFoundResult>(response);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/UsersTest/UserDataGatewayTest.cs b/Components/UsersTest/UserDataGatewayTest.cs
new file mode 100755
index 0000000..c6c78a5
--- /dev/null
+++ b/Components/UsersTest/UserDataGatewayTest.cs
@@ -0,0 +1,50 @@
+using Microsoft.EntityFrameworkCore;
+using TestSupport;
+using Users;
+using Xunit;
+
+namespace UsersTest
+{
+    [Collection("Users")]
+    public class UsersDataGatewayTest
+    {
+        private static readonly TestDatabaseSupport Support =
+            new TestDatabaseSupport(TestDatabaseSupport.RegistrationConnectionString);
+
+        private static readonly DbContextOptions<UserContext> DbContextOptions =
+            new DbContextOptionsBuilder<UserContext>().UseMySql(TestDatabaseSupport.RegistrationConnectionString)
+                .Options;
+
+        public UsersDataGatewayTest()
+        {
+            Support.TruncateAllTables();
+        }
+
+        [Fact]
+        public void TestCreate()
+        {
+            var gateway = new UserDataGateway(new UserContext(DbContextOptions));
+            gateway.Create("aUser");
+
+            var names = Support.QuerySql("select name from users");
+
+            Assert.Equal("aUser", names[0]["name"]);
+        }
+
+        [Fact]
+        public void TestFindBy()
+        {
+            Support.ExecSql(
+                @"insert into users (id, name) values (42346, 'aName'), (42347, 'anotherName'), (42348, 'andAnotherName');");
+
+            var gateway = new UserDataGateway(new UserContext(DbContextOptions));
+
+            var actual = gateway.FindObjectBy(42347);
+
+            Assert.Equal(42347, actual.Id);
+            Assert.Equal("anotherName", actual.Name);
+
+            Assert.Null(gateway.FindObjectBy(42));
+        }
+    }
+}
\ No newline at end of file
diff --git a/Components/UsersTest/UsersTest.csproj b/Components/UsersTest/UsersTest.csproj
new file mode 100755
index 0000000..e501218
--- /dev/null
+++ b/Components/UsersTest/UsersTest.csproj
@@ -0,0 +1,16 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <ProjectReference Include="../Users/Users.csproj" />
+    <ProjectReference Include="../TestSupport/TestSupport.csproj" />
+    <PackageReference Include="MySqlConnector" Version="0.35.0" />
+  </ItemGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.0.0" />
+    <PackageReference Include="xunit" Version="2.2.0" />
+    <PackageReference Include="xunit.runner.visualstudio" Version="2.2.0" />
+    <PackageReference Include="Moq" Version="4.7.63" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/Databases/allocations-database/migrations/V1__initial_schema.sql b/Databases/allocations-database/migrations/V1__initial_schema.sql
new file mode 100644
index 0000000..b08ab3e
--- /dev/null
+++ b/Databases/allocations-database/migrations/V1__initial_schema.sql
@@ -0,0 +1,11 @@
+create table allocations (
+  id bigint(20) not null auto_increment,
+  project_id bigint(20),
+  user_id bigint(20),
+  first_day datetime,
+  last_day datetime,
+
+  primary key (id)
+)
+engine = innodb
+default charset = utf8;
diff --git a/Databases/backlog-database/migrations/V1__initial_schema.sql b/Databases/backlog-database/migrations/V1__initial_schema.sql
new file mode 100644
index 0000000..f83716d
--- /dev/null
+++ b/Databases/backlog-database/migrations/V1__initial_schema.sql
@@ -0,0 +1,9 @@
+create table stories (
+  id         bigint(20) not null auto_increment,
+  project_id bigint(20),
+  name       VARCHAR(255),
+
+  primary key (id)
+)
+engine = innodb
+default charset = utf8;
diff --git a/Databases/create_databases.sql b/Databases/create_databases.sql
new file mode 100644
index 0000000..85cc89b
--- /dev/null
+++ b/Databases/create_databases.sql
@@ -0,0 +1,22 @@
+DROP DATABASE IF EXISTS tracker_allocations_dotnet_dev;
+DROP DATABASE IF EXISTS tracker_backlog_dotnet_dev;
+DROP DATABASE IF EXISTS tracker_registration_dotnet_dev;
+DROP DATABASE IF EXISTS tracker_timesheets_dotnet_dev;
+DROP DATABASE IF EXISTS tracker_allocations_dotnet_test;
+DROP DATABASE IF EXISTS tracker_backlog_dotnet_test;
+DROP DATABASE IF EXISTS tracker_registration_dotnet_test;
+DROP DATABASE IF EXISTS tracker_timesheets_dotnet_test;
+
+CREATE USER IF NOT EXISTS 'tracker_dotnet'@'localhost'
+  IDENTIFIED BY 'password';
+
+GRANT ALL PRIVILEGES ON *.* TO 'tracker_dotnet' @'localhost';
+
+CREATE DATABASE tracker_allocations_dotnet_dev;
+CREATE DATABASE tracker_backlog_dotnet_dev;
+CREATE DATABASE tracker_registration_dotnet_dev;
+CREATE DATABASE tracker_timesheets_dotnet_dev;
+CREATE DATABASE tracker_allocations_dotnet_test;
+CREATE DATABASE tracker_backlog_dotnet_test;
+CREATE DATABASE tracker_registration_dotnet_test;
+CREATE DATABASE tracker_timesheets_dotnet_test;
\ No newline at end of file
diff --git a/Databases/registration-database/migrations/V1__initial_schema.sql b/Databases/registration-database/migrations/V1__initial_schema.sql
new file mode 100644
index 0000000..03e3d00
--- /dev/null
+++ b/Databases/registration-database/migrations/V1__initial_schema.sql
@@ -0,0 +1,34 @@
+create table users (
+  id   bigint(20) not null auto_increment,
+  name VARCHAR(255),
+
+  primary key (id),
+  unique key name (name)
+)
+engine = innodb
+default charset = utf8;
+
+create table accounts (
+  id       bigint(20) not null auto_increment,
+  owner_id bigint(20),
+  name     VARCHAR(255),
+
+  primary key (id),
+  unique key name (name),
+  constraint foreign key (owner_id) references users (id)
+)
+engine = innodb
+default charset = utf8;
+
+create table projects (
+  id         bigint(20) not null auto_increment,
+  account_id bigint(20),
+  name       VARCHAR(255),
+  active     bit(1) not null default b'1',
+
+  primary key (id),
+  unique key name (name),
+  constraint foreign key (account_id) references accounts (id)
+)
+engine = innodb
+default charset = utf8;
diff --git a/Databases/timesheets-database/migrations/V1__initial_schema.sql b/Databases/timesheets-database/migrations/V1__initial_schema.sql
new file mode 100644
index 0000000..f57f955
--- /dev/null
+++ b/Databases/timesheets-database/migrations/V1__initial_schema.sql
@@ -0,0 +1,11 @@
+create table time_entries (
+  id bigint(20) not null auto_increment,
+  project_id bigint(20),
+  user_id bigint(20),
+  date datetime,
+  hours int,
+
+  primary key (id)
+)
+engine = innodb
+default charset = utf8;
diff --git a/Directory.Build.targets b/Directory.Build.targets
new file mode 100644
index 0000000..0802144
--- /dev/null
+++ b/Directory.Build.targets
@@ -0,0 +1,5 @@
+<Project>
+    <Target Name="VSTestIfTestProject">
+        <CallTarget Targets="VSTest" Condition="'$(IsTestProject)' == 'true'" />
+    </Target>
+</Project>
\ No newline at end of file
diff --git a/IntegrationTest/AppServerBuilder.AppServer.cs b/IntegrationTest/AppServerBuilder.AppServer.cs
new file mode 100644
index 0000000..f363293
--- /dev/null
+++ b/IntegrationTest/AppServerBuilder.AppServer.cs
@@ -0,0 +1,97 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Diagnostics;
+using System.IO;
+using System.Net.Http;
+using System.Threading;
+using TestSupport;
+
+namespace IntegrationTest
+{
+    public partial class AppServerBuilder
+    {
+        public class AppServer
+        {
+            private readonly string _database;
+            private readonly string _baseUrl;
+            private Process _process;
+            private readonly ProcessStartInfo _startInfo;
+            private readonly string _dllPath;
+
+            internal AppServer(int port, string appName, IDictionary<string, string> environmentVariables,
+                string database)
+            {
+                _baseUrl = $"http://127.0.0.1:{port}";
+                _database = database;
+
+                var appPath = $"{AppContext.BaseDirectory}../../../../Applications/{appName}";
+                _dllPath = $"{appPath}/bin/Debug/netcoreapp2.0/{appName}.dll";
+
+                _startInfo = new ProcessStartInfo
+                {
+                    FileName = "dotnet",
+                    Arguments = $"\"{_dllPath}\" --urls {_baseUrl}",
+                    UseShellExecute = false,
+                    WorkingDirectory = appPath
+                };
+
+                foreach (var kv in environmentVariables)
+                {
+                    _startInfo.EnvironmentVariables[kv.Key] = kv.Value;
+                }
+
+                _startInfo.EnvironmentVariables["MYSQL__CLIENT__CONNECTIONSTRING"] =
+                    TestDatabaseSupport.ConnectionString(_database);
+            }
+
+            public string Url(string relativePath = "/") => $"{_baseUrl}{relativePath}";
+
+            public void Start()
+            {
+                if (!File.Exists(_dllPath))
+                {
+                    throw new InvalidOperationException($"File {_dllPath} does not exist. Run 'dotnet build' to rebuild the application.");
+                }
+
+                _process = Process.Start(_startInfo);
+
+                WaitUntilReady();
+
+                new TestDatabaseSupport(TestDatabaseSupport.ConnectionString(_database)).TruncateAllTables();
+            }
+
+            public void Stop()
+            {
+                _process.Kill();
+            }
+
+            private void WaitUntilReady()
+            {
+                const int retryThreshold = 6;
+                const int delay = 1000;
+                var httpClient = new HttpClient();
+
+                var tries = 0;
+                Exception failureReason = null;
+
+                while (tries < retryThreshold)
+                {
+                    try
+                    {
+                        var _ = httpClient.GetAsync(_baseUrl).Result;
+                        return;
+                    }
+                    catch (Exception ex) when(ex.GetBaseException().GetType() == typeof(HttpRequestException))
+                    {
+                        failureReason = ex;
+                        Thread.Sleep(delay);
+                    }
+
+                    tries++;
+                }
+
+                throw failureReason.GetBaseException();
+            }
+        }
+    }
+}
diff --git a/IntegrationTest/AppServerBuilder.cs b/IntegrationTest/AppServerBuilder.cs
new file mode 100644
index 0000000..a0c81ba
--- /dev/null
+++ b/IntegrationTest/AppServerBuilder.cs
@@ -0,0 +1,49 @@
+﻿using System;
+using System.Collections.Generic;
+
+namespace IntegrationTest
+{
+    public sealed partial class AppServerBuilder
+    {
+        private int? _port;
+        private string _appName;
+        private readonly IDictionary<string, string> _environmentVariables = new Dictionary<string, string>();
+        private string _database;
+
+        public static AppServerBuilder TestAppServerBuilder() => new AppServerBuilder();
+
+        public AppServerBuilder Port(int port)
+        {
+            _port = port;
+            return this;
+        }
+
+        public AppServerBuilder AppName(string appName)
+        {
+            _appName = appName;
+            return this;
+        }
+
+        public AppServerBuilder SetEnvironmentVariable(string key, string value)
+        {
+            _environmentVariables.Add(key, value);
+            return this;
+        }
+
+        public AppServerBuilder Database(string database)
+        {
+            _database = database;
+            return this;
+        }
+
+        public AppServer Build()
+        {
+            if (_port.HasValue && _appName != null && _database != null)
+            {
+                return new AppServer(_port.Value, _appName, _environmentVariables, _database);
+            }
+
+            throw new InvalidOperationException("AppServer object is fully configured.");
+        }
+    }
+}
\ No newline at end of file
diff --git a/IntegrationTest/FlowTest.cs b/IntegrationTest/FlowTest.cs
new file mode 100644
index 0000000..d091b2b
--- /dev/null
+++ b/IntegrationTest/FlowTest.cs
@@ -0,0 +1,194 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Net.Http;
+using System.Text;
+using Microsoft.Rest;
+using Newtonsoft.Json;
+using Newtonsoft.Json.Linq;
+using Xunit;
+using static IntegrationTest.AppServerBuilder;
+
+namespace IntegrationTest
+{
+    public class FlowTest : IDisposable
+    {
+        private readonly HttpClient _httpClient = new HttpClient();
+
+        private readonly AppServer _registrationServer;
+        private readonly AppServer _allocationsServer;
+        private readonly AppServer _backlogServer;
+        private readonly AppServer _timesheetsServer;
+
+        public FlowTest()
+        {
+            _registrationServer = TestAppServerBuilder()
+                .AppName("RegistrationServer")
+                .Port(8883)
+                .Database("tracker_registration_dotnet_test")
+                .Build();
+
+            _allocationsServer = TestAppServerBuilder()
+                .AppName("AllocationsServer")
+                .Port(8881)
+                .Database("tracker_allocations_dotnet_test")
+                .SetEnvironmentVariable("REGISTRATION_SERVER_ENDPOINT", _registrationServer.Url())
+                .Build();
+
+            _backlogServer = TestAppServerBuilder()
+                .AppName("BacklogServer")
+                .Port(8882)
+                .Database("tracker_backlog_dotnet_test")
+                .SetEnvironmentVariable("REGISTRATION_SERVER_ENDPOINT", _registrationServer.Url())
+                .Build();
+
+            _timesheetsServer = TestAppServerBuilder()
+                .AppName("TimesheetsServer")
+                .Port(8884)
+                .Database("tracker_timesheets_dotnet_test")
+                .SetEnvironmentVariable("REGISTRATION_SERVER_ENDPOINT", _registrationServer.Url())
+                .Build();
+        }
+
+        [Fact]
+        public void TestBasicFlow()
+        {
+            _allocationsServer.Start();
+            _registrationServer.Start();
+            _backlogServer.Start();
+            _timesheetsServer.Start();
+
+            HttpResponseMessage response;
+
+            response = _httpClient.Get(_registrationServer.Url());
+            Assert.Equal("Noop!", response.Content.AsString());
+
+            var createdUserId = _httpClient.Post(_registrationServer.Url("/registration"), new Dictionary<string, object>
+            {
+                {"name", "aUser"}
+            }).Content.FindId();
+            AssertGreaterThan(createdUserId, 0);
+
+            response = _httpClient.Get(_registrationServer.Url($"/users/{createdUserId}"));
+            AssertNotNullOrEmpty(response.Content.AsString());
+            Assert.True(response.IsSuccessStatusCode);
+
+            var createdAccountId = _httpClient.Get(_registrationServer.Url($"/accounts?ownerId={createdUserId}"))
+                .Content.FindId();
+            AssertGreaterThan(createdAccountId, 0);
+
+            var createdProjectId = _httpClient.Post(_registrationServer.Url("/projects"), new Dictionary<string, object>
+            {
+                {"accountId", createdAccountId},
+                {"name", "aProject"}
+            }).Content.FindId();
+            AssertGreaterThan(createdProjectId, 0);
+
+            response = _httpClient.Get(_registrationServer.Url($"/projects?accountId={createdAccountId}"));
+            AssertNotNullOrEmpty(response.Content.AsString());
+            Assert.True(response.IsSuccessStatusCode);
+
+            response = _httpClient.Get(_allocationsServer.Url());
+            Assert.Equal("Noop!", response.Content.AsString());
+
+            var createdAllocationId = _httpClient.Post( _allocationsServer.Url($"/allocations?projectId={createdProjectId}"), new Dictionary<string, object>
+            {
+                {"projectId", createdProjectId},
+                {"userId", createdUserId},
+                {"firstDay", "2015-05-17"},
+                {"lastDay", "2015-05-26"}
+            }).Content.FindId();
+            AssertGreaterThan(createdAllocationId, 0);
+
+            response = _httpClient.Get(_allocationsServer.Url($"/allocations?projectId={createdProjectId}"));
+            AssertNotNullOrEmpty(response.Content.AsString());
+            Assert.True(response.IsSuccessStatusCode);
+
+            response = _httpClient.Get(_backlogServer.Url());
+            Assert.Equal("Noop!", response.Content.AsString());
+
+            var createdStoryId = _httpClient.Post(_backlogServer.Url("/stories"), new Dictionary<string, object>
+            {
+                {"projectId", createdProjectId},
+                {"name", "A story"}
+            }).Content.FindId();
+            AssertGreaterThan(createdStoryId, 0);
+
+            response = _httpClient.Get(_backlogServer.Url($"/stories?projectId={createdProjectId}"));
+            AssertNotNullOrEmpty(response.Content.AsString());
+            Assert.True(response.IsSuccessStatusCode);
+
+            response = _httpClient.Get(_timesheetsServer.Url());
+            Assert.Equal("Noop!", response.Content.AsString());
+
+            var createdTimeEntryId = _httpClient.Post(_timesheetsServer.Url("/time-entries"), new Dictionary<string, object>
+            {
+                {"projectId", createdProjectId},
+                {"userId", createdUserId},
+                {"date", "2015-12-17"},
+                {"hours", 8}
+            }).Content.FindId();
+            AssertGreaterThan(createdTimeEntryId, 0);
+
+            response = _httpClient.Get(_timesheetsServer.Url($"/time-entries?projectId={createdProjectId}"));
+            AssertNotNullOrEmpty(response.Content.AsString());
+            Assert.True(response.IsSuccessStatusCode);
+        }
+
+        public void Dispose()
+        {
+            _allocationsServer.Stop();
+            _backlogServer.Stop();
+            _registrationServer.Stop();
+            _timesheetsServer.Stop();
+        }
+
+        private static void AssertNotNullOrEmpty(string str)
+        {
+            Assert.NotEqual("", str);
+            Assert.NotNull(str);
+        }
+
+        private static void AssertGreaterThan(long actual, long bound)
+        {
+            Assert.InRange(actual, bound + 1, long.MaxValue);
+        }
+    }
+
+    internal static class HttpClientExtensions
+    {
+        internal static HttpResponseMessage Get(this HttpClient client, string url) =>
+            client.GetAsync(url).Result;
+
+        internal static HttpResponseMessage Post(this HttpClient client, string url, IDictionary<string, object> data)
+        {
+            var json = JsonConvert.SerializeObject(data, Formatting.Indented);
+            return client.PostAsync(new Uri(url), new StringContent(json, Encoding.UTF8, "application/json")).Result;
+        }
+    }
+
+    internal static class HttpContentExtensions
+    {
+        internal static long FindId(this HttpContent content)
+        {
+            var body = JToken.Parse(content.ReadAsStringAsync().Result);
+            JToken id = null;
+
+            switch (body)
+            {
+                case JObject _:
+                    id = body.SelectToken("$.id");
+                    break;
+                case JArray _:
+                    id = body.SelectToken("$[0].id");
+                    break;
+            }
+
+            if (id == null)
+            {
+                Assert.True(false, $"Could not find id in response body. Response was: \n {body}");
+            }
+
+            return id.ToObject<long>();
+        }
+    }
+}
\ No newline at end of file
diff --git a/IntegrationTest/IntegrationTest.csproj b/IntegrationTest/IntegrationTest.csproj
new file mode 100644
index 0000000..32ceb5c
--- /dev/null
+++ b/IntegrationTest/IntegrationTest.csproj
@@ -0,0 +1,20 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+    <IsPackable>false</IsPackable>
+  </PropertyGroup>
+  <ItemGroup>
+    <ProjectReference Include="../Components/TestSupport/TestSupport.csproj" />
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.5.0" />
+    <PackageReference Include="xunit" Version="2.3.1" />
+    <PackageReference Include="xunit.runner.visualstudio" Version="2.3.1" />
+    <DotNetCliToolReference Include="dotnet-xunit" Version="2.3.1" />
+  </ItemGroup>
+  <!-- Ensure that the Applications are built before we run the integration tests -->
+  <ItemGroup>
+      <ProjectReference Include="../Applications/AllocationsServer/AllocationsServer.csproj" />
+      <ProjectReference Include="../Applications/BacklogServer/BacklogServer.csproj" />
+      <ProjectReference Include="../Applications/RegistrationServer/RegistrationServer.csproj" />
+      <ProjectReference Include="../Applications/TimesheetsServer/TimesheetsServer.csproj" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/PalTracker.sln b/PalTracker.sln
new file mode 100644
index 0000000..250fdc3
--- /dev/null
+++ b/PalTracker.sln
@@ -0,0 +1,310 @@
+﻿
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio 15
+VisualStudioVersion = 15.0.26124.0
+MinimumVisualStudioVersion = 15.0.26124.0
+Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Applications", "Applications", "{61F0A7C3-5DE2-4C07-AF32-C9BAE2560760}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "AllocationsServer", "Applications\AllocationsServer\AllocationsServer.csproj", "{115E2983-51A0-4722-BA01-75223ACC33F8}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "BacklogServer", "Applications\BacklogServer\BacklogServer.csproj", "{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "RegistrationServer", "Applications\RegistrationServer\RegistrationServer.csproj", "{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TimesheetsServer", "Applications\TimesheetsServer\TimesheetsServer.csproj", "{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}"
+EndProject
+Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Components", "Components", "{E5C501FF-2D6C-4F16-8C68-481B81335AC5}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Accounts", "Components\Accounts\Accounts.csproj", "{9779A47A-8012-48BC-A243-EA67EAD22564}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "AccountsTest", "Components\AccountsTest\AccountsTest.csproj", "{FA3DF435-CD0C-430A-83BC-DA495140A8F6}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Allocations", "Components\Allocations\Allocations.csproj", "{8C807867-2F10-494D-8564-1C2F91784D3F}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "AllocationsTest", "Components\AllocationsTest\AllocationsTest.csproj", "{176CA734-BEC2-47E2-94A3-C496F340A301}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Backlog", "Components\Backlog\Backlog.csproj", "{F3EF758B-B52F-49C2-919C-3BEF880B3756}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "BacklogTest", "Components\BacklogTest\BacklogTest.csproj", "{CFB30C9F-ED56-461C-BC66-B177AF421FB5}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Projects", "Components\Projects\Projects.csproj", "{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ProjectsTest", "Components\ProjectsTest\ProjectsTest.csproj", "{73A7B8A6-394C-43D2-A0B8-7A67546253B3}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TestSupport", "Components\TestSupport\TestSupport.csproj", "{7B9DFA7F-C927-4C34-BA47-5461508949B8}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Timesheets", "Components\Timesheets\Timesheets.csproj", "{940184A9-4AC9-4A10-964E-CD71E69F865D}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TimesheetsTest", "Components\TimesheetsTest\TimesheetsTest.csproj", "{F9AD5A42-6B97-4784-9207-E278AF7535CE}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Users", "Components\Users\Users.csproj", "{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "UsersTest", "Components\UsersTest\UsersTest.csproj", "{3251E09D-4C88-4489-9A0F-2FCE8011820A}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "DefaultRoute", "Components\DefaultRoute\DefaultRoute.csproj", "{4227E6F1-9913-4A2A-AC0E-2A975445086E}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "IntegrationTest", "IntegrationTest\IntegrationTest.csproj", "{5D1F334E-943C-4162-845F-81D960056748}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Debug|x64 = Debug|x64
+		Debug|x86 = Debug|x86
+		Release|Any CPU = Release|Any CPU
+		Release|x64 = Release|x64
+		Release|x86 = Release|x86
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Debug|x64.ActiveCfg = Debug|x64
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Debug|x64.Build.0 = Debug|x64
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Debug|x86.ActiveCfg = Debug|x86
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Debug|x86.Build.0 = Debug|x86
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Release|Any CPU.Build.0 = Release|Any CPU
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Release|x64.ActiveCfg = Release|x64
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Release|x64.Build.0 = Release|x64
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Release|x86.ActiveCfg = Release|x86
+		{115E2983-51A0-4722-BA01-75223ACC33F8}.Release|x86.Build.0 = Release|x86
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Debug|x64.ActiveCfg = Debug|x64
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Debug|x64.Build.0 = Debug|x64
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Debug|x86.ActiveCfg = Debug|x86
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Debug|x86.Build.0 = Debug|x86
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Release|Any CPU.Build.0 = Release|Any CPU
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Release|x64.ActiveCfg = Release|x64
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Release|x64.Build.0 = Release|x64
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Release|x86.ActiveCfg = Release|x86
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D}.Release|x86.Build.0 = Release|x86
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Debug|x64.ActiveCfg = Debug|x64
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Debug|x64.Build.0 = Debug|x64
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Debug|x86.ActiveCfg = Debug|x86
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Debug|x86.Build.0 = Debug|x86
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Release|Any CPU.Build.0 = Release|Any CPU
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Release|x64.ActiveCfg = Release|x64
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Release|x64.Build.0 = Release|x64
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Release|x86.ActiveCfg = Release|x86
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9}.Release|x86.Build.0 = Release|x86
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Debug|x64.ActiveCfg = Debug|x64
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Debug|x64.Build.0 = Debug|x64
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Debug|x86.ActiveCfg = Debug|x86
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Debug|x86.Build.0 = Debug|x86
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Release|Any CPU.Build.0 = Release|Any CPU
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Release|x64.ActiveCfg = Release|x64
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Release|x64.Build.0 = Release|x64
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Release|x86.ActiveCfg = Release|x86
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E}.Release|x86.Build.0 = Release|x86
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Debug|x64.ActiveCfg = Debug|x64
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Debug|x64.Build.0 = Debug|x64
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Debug|x86.ActiveCfg = Debug|x86
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Debug|x86.Build.0 = Debug|x86
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Release|Any CPU.Build.0 = Release|Any CPU
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Release|x64.ActiveCfg = Release|x64
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Release|x64.Build.0 = Release|x64
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Release|x86.ActiveCfg = Release|x86
+		{9779A47A-8012-48BC-A243-EA67EAD22564}.Release|x86.Build.0 = Release|x86
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Debug|x64.ActiveCfg = Debug|x64
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Debug|x64.Build.0 = Debug|x64
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Debug|x86.ActiveCfg = Debug|x86
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Debug|x86.Build.0 = Debug|x86
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Release|Any CPU.Build.0 = Release|Any CPU
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Release|x64.ActiveCfg = Release|x64
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Release|x64.Build.0 = Release|x64
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Release|x86.ActiveCfg = Release|x86
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6}.Release|x86.Build.0 = Release|x86
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Debug|x64.ActiveCfg = Debug|x64
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Debug|x64.Build.0 = Debug|x64
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Debug|x86.ActiveCfg = Debug|x86
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Debug|x86.Build.0 = Debug|x86
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Release|Any CPU.Build.0 = Release|Any CPU
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Release|x64.ActiveCfg = Release|x64
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Release|x64.Build.0 = Release|x64
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Release|x86.ActiveCfg = Release|x86
+		{8C807867-2F10-494D-8564-1C2F91784D3F}.Release|x86.Build.0 = Release|x86
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Debug|x64.ActiveCfg = Debug|x64
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Debug|x64.Build.0 = Debug|x64
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Debug|x86.ActiveCfg = Debug|x86
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Debug|x86.Build.0 = Debug|x86
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Release|Any CPU.Build.0 = Release|Any CPU
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Release|x64.ActiveCfg = Release|x64
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Release|x64.Build.0 = Release|x64
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Release|x86.ActiveCfg = Release|x86
+		{176CA734-BEC2-47E2-94A3-C496F340A301}.Release|x86.Build.0 = Release|x86
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Debug|x64.ActiveCfg = Debug|x64
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Debug|x64.Build.0 = Debug|x64
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Debug|x86.ActiveCfg = Debug|x86
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Debug|x86.Build.0 = Debug|x86
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Release|Any CPU.Build.0 = Release|Any CPU
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Release|x64.ActiveCfg = Release|x64
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Release|x64.Build.0 = Release|x64
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Release|x86.ActiveCfg = Release|x86
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756}.Release|x86.Build.0 = Release|x86
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Debug|x64.ActiveCfg = Debug|x64
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Debug|x64.Build.0 = Debug|x64
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Debug|x86.ActiveCfg = Debug|x86
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Debug|x86.Build.0 = Debug|x86
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Release|Any CPU.Build.0 = Release|Any CPU
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Release|x64.ActiveCfg = Release|x64
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Release|x64.Build.0 = Release|x64
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Release|x86.ActiveCfg = Release|x86
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5}.Release|x86.Build.0 = Release|x86
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Debug|x64.ActiveCfg = Debug|x64
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Debug|x64.Build.0 = Debug|x64
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Debug|x86.ActiveCfg = Debug|x86
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Debug|x86.Build.0 = Debug|x86
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Release|Any CPU.Build.0 = Release|Any CPU
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Release|x64.ActiveCfg = Release|x64
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Release|x64.Build.0 = Release|x64
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Release|x86.ActiveCfg = Release|x86
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5}.Release|x86.Build.0 = Release|x86
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Debug|x64.ActiveCfg = Debug|x64
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Debug|x64.Build.0 = Debug|x64
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Debug|x86.ActiveCfg = Debug|x86
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Debug|x86.Build.0 = Debug|x86
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Release|Any CPU.Build.0 = Release|Any CPU
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Release|x64.ActiveCfg = Release|x64
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Release|x64.Build.0 = Release|x64
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Release|x86.ActiveCfg = Release|x86
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3}.Release|x86.Build.0 = Release|x86
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Debug|x64.ActiveCfg = Debug|x64
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Debug|x64.Build.0 = Debug|x64
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Debug|x86.ActiveCfg = Debug|x86
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Debug|x86.Build.0 = Debug|x86
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Release|Any CPU.Build.0 = Release|Any CPU
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Release|x64.ActiveCfg = Release|x64
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Release|x64.Build.0 = Release|x64
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Release|x86.ActiveCfg = Release|x86
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8}.Release|x86.Build.0 = Release|x86
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Debug|x64.ActiveCfg = Debug|x64
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Debug|x64.Build.0 = Debug|x64
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Debug|x86.ActiveCfg = Debug|x86
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Debug|x86.Build.0 = Debug|x86
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Release|Any CPU.Build.0 = Release|Any CPU
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Release|x64.ActiveCfg = Release|x64
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Release|x64.Build.0 = Release|x64
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Release|x86.ActiveCfg = Release|x86
+		{940184A9-4AC9-4A10-964E-CD71E69F865D}.Release|x86.Build.0 = Release|x86
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Debug|x64.ActiveCfg = Debug|x64
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Debug|x64.Build.0 = Debug|x64
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Debug|x86.ActiveCfg = Debug|x86
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Debug|x86.Build.0 = Debug|x86
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Release|Any CPU.Build.0 = Release|Any CPU
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Release|x64.ActiveCfg = Release|x64
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Release|x64.Build.0 = Release|x64
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Release|x86.ActiveCfg = Release|x86
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE}.Release|x86.Build.0 = Release|x86
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Debug|x64.ActiveCfg = Debug|x64
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Debug|x64.Build.0 = Debug|x64
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Debug|x86.ActiveCfg = Debug|x86
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Debug|x86.Build.0 = Debug|x86
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Release|Any CPU.Build.0 = Release|Any CPU
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Release|x64.ActiveCfg = Release|x64
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Release|x64.Build.0 = Release|x64
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Release|x86.ActiveCfg = Release|x86
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15}.Release|x86.Build.0 = Release|x86
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Debug|x64.ActiveCfg = Debug|x64
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Debug|x64.Build.0 = Debug|x64
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Debug|x86.ActiveCfg = Debug|x86
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Debug|x86.Build.0 = Debug|x86
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Release|Any CPU.Build.0 = Release|Any CPU
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Release|x64.ActiveCfg = Release|x64
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Release|x64.Build.0 = Release|x64
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Release|x86.ActiveCfg = Release|x86
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A}.Release|x86.Build.0 = Release|x86
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Debug|x64.ActiveCfg = Debug|x64
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Debug|x64.Build.0 = Debug|x64
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Debug|x86.ActiveCfg = Debug|x86
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Debug|x86.Build.0 = Debug|x86
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Release|Any CPU.Build.0 = Release|Any CPU
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Release|x64.ActiveCfg = Release|x64
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Release|x64.Build.0 = Release|x64
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Release|x86.ActiveCfg = Release|x86
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E}.Release|x86.Build.0 = Release|x86
+		{5D1F334E-943C-4162-845F-81D960056748}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{5D1F334E-943C-4162-845F-81D960056748}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{5D1F334E-943C-4162-845F-81D960056748}.Debug|x64.ActiveCfg = Debug|x64
+		{5D1F334E-943C-4162-845F-81D960056748}.Debug|x64.Build.0 = Debug|x64
+		{5D1F334E-943C-4162-845F-81D960056748}.Debug|x86.ActiveCfg = Debug|x86
+		{5D1F334E-943C-4162-845F-81D960056748}.Debug|x86.Build.0 = Debug|x86
+		{5D1F334E-943C-4162-845F-81D960056748}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{5D1F334E-943C-4162-845F-81D960056748}.Release|Any CPU.Build.0 = Release|Any CPU
+		{5D1F334E-943C-4162-845F-81D960056748}.Release|x64.ActiveCfg = Release|x64
+		{5D1F334E-943C-4162-845F-81D960056748}.Release|x64.Build.0 = Release|x64
+		{5D1F334E-943C-4162-845F-81D960056748}.Release|x86.ActiveCfg = Release|x86
+		{5D1F334E-943C-4162-845F-81D960056748}.Release|x86.Build.0 = Release|x86
+	EndGlobalSection
+	GlobalSection(NestedProjects) = preSolution
+		{115E2983-51A0-4722-BA01-75223ACC33F8} = {61F0A7C3-5DE2-4C07-AF32-C9BAE2560760}
+		{272B1BD8-3773-4057-B816-DEFA1E5EEB0D} = {61F0A7C3-5DE2-4C07-AF32-C9BAE2560760}
+		{8FAA6DAC-821D-4F18-A90C-4BE64E61E3B9} = {61F0A7C3-5DE2-4C07-AF32-C9BAE2560760}
+		{22FCEDE6-6A8C-42BF-8475-9A2087A13B2E} = {61F0A7C3-5DE2-4C07-AF32-C9BAE2560760}
+		{9779A47A-8012-48BC-A243-EA67EAD22564} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{FA3DF435-CD0C-430A-83BC-DA495140A8F6} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{8C807867-2F10-494D-8564-1C2F91784D3F} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{176CA734-BEC2-47E2-94A3-C496F340A301} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{F3EF758B-B52F-49C2-919C-3BEF880B3756} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{CFB30C9F-ED56-461C-BC66-B177AF421FB5} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{C21D14D5-FA64-4A22-9A3F-586CAFE254A5} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{73A7B8A6-394C-43D2-A0B8-7A67546253B3} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{7B9DFA7F-C927-4C34-BA47-5461508949B8} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{940184A9-4AC9-4A10-964E-CD71E69F865D} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{F9AD5A42-6B97-4784-9207-E278AF7535CE} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{2CF35EC0-54A4-48FD-AF49-46A841EA9F15} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{3251E09D-4C88-4489-9A0F-2FCE8011820A} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+		{4227E6F1-9913-4A2A-AC0E-2A975445086E} = {E5C501FF-2D6C-4F16-8C68-481B81335AC5}
+	EndGlobalSection
+EndGlobal
diff --git a/PlatformServices/ConfigServer/build.gradle b/PlatformServices/ConfigServer/build.gradle
new file mode 100644
index 0000000..dab80da
--- /dev/null
+++ b/PlatformServices/ConfigServer/build.gradle
@@ -0,0 +1,3 @@
+dependencies {
+    compile "org.springframework.cloud:spring-cloud-config-server"
+}
diff --git a/PlatformServices/ConfigServer/src/main/java/io/pivotal/pal/tracker/configserver/App.java b/PlatformServices/ConfigServer/src/main/java/io/pivotal/pal/tracker/configserver/App.java
new file mode 100644
index 0000000..c5eb688
--- /dev/null
+++ b/PlatformServices/ConfigServer/src/main/java/io/pivotal/pal/tracker/configserver/App.java
@@ -0,0 +1,14 @@
+package io.pivotal.pal.tracker.configserver;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.config.server.EnableConfigServer;
+
+@EnableConfigServer
+@SpringBootApplication
+public class App {
+    public static void main(String[] args) {
+        SpringApplication.run(App.class, args);
+    }
+
+}
diff --git a/PlatformServices/ConfigServer/src/main/resources/application.properties b/PlatformServices/ConfigServer/src/main/resources/application.properties
new file mode 100644
index 0000000..6eeb4f1
--- /dev/null
+++ b/PlatformServices/ConfigServer/src/main/resources/application.properties
@@ -0,0 +1,3 @@
+server.application.name=config-server
+server.port=8777
+spring.cloud.config.server.git.uri=https://github.com/<your-github-username>/tracker-config.git
\ No newline at end of file
diff --git a/PlatformServices/EurekaServer/build.gradle b/PlatformServices/EurekaServer/build.gradle
new file mode 100644
index 0000000..591c148
--- /dev/null
+++ b/PlatformServices/EurekaServer/build.gradle
@@ -0,0 +1,4 @@
+dependencies {
+    compile "org.springframework.boot:spring-boot-starter-web"
+    compile "org.springframework.cloud:spring-cloud-starter-eureka-server"
+}
\ No newline at end of file
diff --git a/PlatformServices/EurekaServer/src/main/java/io/pivotal/pal/tracker/eurekaserver/App.java b/PlatformServices/EurekaServer/src/main/java/io/pivotal/pal/tracker/eurekaserver/App.java
new file mode 100644
index 0000000..d591a19
--- /dev/null
+++ b/PlatformServices/EurekaServer/src/main/java/io/pivotal/pal/tracker/eurekaserver/App.java
@@ -0,0 +1,14 @@
+package io.pivotal.pal.tracker.eurekaserver;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;
+
+@EnableEurekaServer
+@SpringBootApplication
+public class App {
+
+    public static void main(String[] args) {
+        SpringApplication.run(App.class, args);
+    }
+}
diff --git a/PlatformServices/EurekaServer/src/main/resources/application.properties b/PlatformServices/EurekaServer/src/main/resources/application.properties
new file mode 100644
index 0000000..d0657d2
--- /dev/null
+++ b/PlatformServices/EurekaServer/src/main/resources/application.properties
@@ -0,0 +1,3 @@
+server.application.name=eureka-server
+server.port=8761
+eureka.client.registerWithEureka=false
diff --git a/PlatformServices/HystrixDashboard/build.gradle b/PlatformServices/HystrixDashboard/build.gradle
new file mode 100644
index 0000000..27a9a63
--- /dev/null
+++ b/PlatformServices/HystrixDashboard/build.gradle
@@ -0,0 +1,4 @@
+dependencies {
+    compile "org.springframework.boot:spring-boot-starter-actuator"
+    compile "org.springframework.cloud:spring-cloud-starter-hystrix-dashboard"
+}
diff --git a/PlatformServices/HystrixDashboard/src/main/java/io/pivotal/pal/tracker/hystrixdashboard/App.java b/PlatformServices/HystrixDashboard/src/main/java/io/pivotal/pal/tracker/hystrixdashboard/App.java
new file mode 100644
index 0000000..44e90d9
--- /dev/null
+++ b/PlatformServices/HystrixDashboard/src/main/java/io/pivotal/pal/tracker/hystrixdashboard/App.java
@@ -0,0 +1,14 @@
+package io.pivotal.pal.tracker.hystrixdashboard;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;
+
+@EnableHystrixDashboard
+@SpringBootApplication
+public class App {
+
+    public static void main(String[] args) {
+        SpringApplication.run(App.class, args);
+    }
+}
diff --git a/PlatformServices/HystrixDashboard/src/main/resources/application.properties b/PlatformServices/HystrixDashboard/src/main/resources/application.properties
new file mode 100644
index 0000000..3c094ca
--- /dev/null
+++ b/PlatformServices/HystrixDashboard/src/main/resources/application.properties
@@ -0,0 +1,2 @@
+server.application.name=hystrix-dashboard
+server.port=7979
diff --git a/PlatformServices/OAuthServer/build.gradle b/PlatformServices/OAuthServer/build.gradle
new file mode 100644
index 0000000..33c09d2
--- /dev/null
+++ b/PlatformServices/OAuthServer/build.gradle
@@ -0,0 +1,5 @@
+dependencies {
+    compile "org.springframework.boot:spring-boot-starter-web"
+    compile "org.springframework.boot:spring-boot-starter-security"
+    compile "org.springframework.security.oauth:spring-security-oauth2"
+}
diff --git a/PlatformServices/OAuthServer/src/main/java/io/pivotal/pal/tracker/oauthserver/App.java b/PlatformServices/OAuthServer/src/main/java/io/pivotal/pal/tracker/oauthserver/App.java
new file mode 100644
index 0000000..40cdd36
--- /dev/null
+++ b/PlatformServices/OAuthServer/src/main/java/io/pivotal/pal/tracker/oauthserver/App.java
@@ -0,0 +1,33 @@
+package io.pivotal.pal.tracker.oauthserver;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
+import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
+import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
+import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
+
+@EnableAuthorizationServer
+@SpringBootApplication
+public class App extends AuthorizationServerConfigurerAdapter {
+    public static void main(String[] args) {
+        SpringApplication.run(App.class, args);
+    }
+
+    @Override
+    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
+        clients.inMemory()
+            .withClient("tracker-client")
+            .secret("supersecret")
+            .authorizedGrantTypes("client_credentials")
+            .scopes("openid");
+    }
+
+    @Override
+    public void configure(AuthorizationServerSecurityConfigurer oauthServer)
+        throws Exception {
+        oauthServer
+            .tokenKeyAccess("permitAll()")
+            .checkTokenAccess("isAuthenticated()");
+    }
+}
diff --git a/PlatformServices/OAuthServer/src/main/resources/application.properties b/PlatformServices/OAuthServer/src/main/resources/application.properties
new file mode 100644
index 0000000..8bf9ef0
--- /dev/null
+++ b/PlatformServices/OAuthServer/src/main/resources/application.properties
@@ -0,0 +1,2 @@
+server.application.name=oauth-server
+server.port=8999
diff --git a/PlatformServices/build.gradle b/PlatformServices/build.gradle
new file mode 100644
index 0000000..fb65c39
--- /dev/null
+++ b/PlatformServices/build.gradle
@@ -0,0 +1,31 @@
+buildscript {
+    ext {
+        springBootVersion = "1.5.3.RELEASE"
+        springCloudDependenciesVersion = "Camden.SR6"
+    }
+
+    repositories {
+        mavenCentral()
+        jcenter()
+    }
+
+    dependencies {
+        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
+    }
+}
+
+subprojects {
+    apply plugin: "org.springframework.boot"
+    apply plugin: "io.spring.dependency-management"
+
+    dependencyManagement {
+        imports {
+            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudDependenciesVersion"
+        }
+    }
+
+    repositories {
+        mavenCentral()
+        jcenter()
+    }
+}
diff --git a/PlatformServices/gradle/wrapper/gradle-wrapper.jar b/PlatformServices/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000000000000000000000000000000000000..758de960ec7947253b058ff79c88ce51f3abe08a
GIT binary patch
literal 54417
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

literal 0
HcmV?d00001

diff --git a/PlatformServices/gradle/wrapper/gradle-wrapper.properties b/PlatformServices/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000..2d80b69
--- /dev/null
+++ b/PlatformServices/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,5 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.8.1-bin.zip
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
diff --git a/PlatformServices/gradlew b/PlatformServices/gradlew
new file mode 100755
index 0000000..cccdd3d
--- /dev/null
+++ b/PlatformServices/gradlew
@@ -0,0 +1,172 @@
+#!/usr/bin/env sh
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=$(save "$@")
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
+
+exec "$JAVACMD" "$@"
diff --git a/PlatformServices/gradlew.bat b/PlatformServices/gradlew.bat
new file mode 100644
index 0000000..e95643d
--- /dev/null
+++ b/PlatformServices/gradlew.bat
@@ -0,0 +1,84 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/PlatformServices/settings.gradle b/PlatformServices/settings.gradle
new file mode 100644
index 0000000..4d92f21
--- /dev/null
+++ b/PlatformServices/settings.gradle
@@ -0,0 +1,6 @@
+rootProject.name = "PlatformServices"
+
+include "EurekaServer"
+include "OAuthServer"
+include "ConfigServer"
+include "HystrixDashboard"
diff --git a/after.PalTracker.sln.targets b/after.PalTracker.sln.targets
new file mode 100644
index 0000000..81ea6b3
--- /dev/null
+++ b/after.PalTracker.sln.targets
@@ -0,0 +1,5 @@
+<Project>
+    <Target Name="VSTest">
+        <MSBuild Projects="@(ProjectReference)" Targets="VSTestIfTestProject" />
+    </Target>
+</Project>
\ No newline at end of file
diff --git a/grh-config.json b/grh-config.json
new file mode 100644
index 0000000..79e94c9
--- /dev/null
+++ b/grh-config.json
@@ -0,0 +1,21 @@
+{
+    "branchToRevise": "solution",
+    "incrementCommits": [
+        {
+            "message": "Add security",
+            "tags": ["config-server"]
+        },
+        {
+            "message": "Enable circuit breaker",
+            "tags": ["security"]
+        },
+        {
+            "message": "Enable service discovery",
+            "tags": ["circuit-breaker"]
+        },
+        {
+            "message": "Initial commit",
+            "tags": ["distributed-system", "service-discovery"]
+        }
+    ]
+}
\ No newline at end of file
diff --git a/manifest-allocations.yml b/manifest-allocations.yml
new file mode 100644
index 0000000..35e90ae
--- /dev/null
+++ b/manifest-allocations.yml
@@ -0,0 +1,11 @@
+---
+applications:
+- name: tracker-allocations
+  instances: 1
+  memory: 256M
+  host: allocations-pal-INITIALS
+  path: Applications/AllocationsServer/bin/Release/netcoreapp2.0/publish
+  env:
+    REGISTRATION_SERVER_ENDPOINT: http://FILL_ME_IN/
+  services:
+  - tracker-allocations-database
\ No newline at end of file
diff --git a/manifest-backlog.yml b/manifest-backlog.yml
new file mode 100644
index 0000000..0e55f9f
--- /dev/null
+++ b/manifest-backlog.yml
@@ -0,0 +1,11 @@
+---
+applications:
+- name: tracker-backlog
+  instances: 1
+  memory: 256M
+  host: backlog-pal-INITIALS
+  path: Applications/BacklogServer/bin/Release/netcoreapp2.0/publish
+  env:
+    REGISTRATION_SERVER_ENDPOINT: http://FILL_ME_IN/
+  services:
+  - tracker-backlog-database
\ No newline at end of file
diff --git a/manifest-registration.yml b/manifest-registration.yml
new file mode 100644
index 0000000..b608180
--- /dev/null
+++ b/manifest-registration.yml
@@ -0,0 +1,9 @@
+---
+applications:
+- name: tracker-registration
+  instances: 1
+  memory: 256M
+  host: registration-pal-INITIALS
+  path: Applications/RegistrationServer/bin/Release/netcoreapp2.0/publish
+  services:
+  - tracker-registration-database
\ No newline at end of file
diff --git a/manifest-timesheets.yml b/manifest-timesheets.yml
new file mode 100644
index 0000000..998ed4f
--- /dev/null
+++ b/manifest-timesheets.yml
@@ -0,0 +1,11 @@
+---
+applications:
+- name: tracker-timesheets
+  instances: 1
+  memory: 256M
+  host: timesheets-pal-INITIALS
+  path: Applications/TimesheetsServer/bin/Release/netcoreapp2.0/publish
+  env:
+    REGISTRATION_SERVER_ENDPOINT: http://FILL_ME_IN/
+  services:
+  - tracker-timesheets-database
\ No newline at end of file
diff --git a/migrate-cf.sh b/migrate-cf.sh
new file mode 100755
index 0000000..9ce9d77
--- /dev/null
+++ b/migrate-cf.sh
@@ -0,0 +1,55 @@
+#!/usr/bin/env bash
+
+set -e
+
+cfMigrate() {
+    trap "kill 0" EXIT
+        appName=$1
+        migrationsPath=Databases/${appName/tracker-/}-database
+        
+        appGuid=$(cf app $1 --guid)
+        credentials=$(cf curl v2/apps/${appGuid}/env | jq -r .system_env_json'.VCAP_SERVICES["p-mysql"][].credentials')
+        
+        database=$(echo ${credentials} | jq -r .name)
+        username=$(echo ${credentials} | jq -r .username)
+        hostname=$(echo ${credentials} | jq -r .hostname)
+        password=$(echo ${credentials} | jq -r .password)
+    
+        openTunnel ${hostname} ${appName}
+        migrate ${username} ${password} ${database} ${migrationsPath}
+        closeTunnel $!
+    wait
+}
+
+function openTunnel() {
+    echo -e "\nOpening tunnel..."
+    local hostname=$1
+    local appName=$2
+    
+    cf ssh -N -L 63306:${hostname}:3306 ${appName} &
+    sleep 5
+}
+
+function closeTunnel() {
+    echo -e "\nClosing tunnel..."
+    kill -9 $1
+    wait $1 2>/dev/null
+}
+
+function migrate() {
+    echo -e "\nRunning migrations...\n"
+    local username=$1
+    local password=$2
+    local database=$3
+    local migrationsPath=$4
+    
+    flyway -user=${username} \
+        -password=${password} \
+        -url="jdbc:mysql://127.0.0.1:63306/${database}" \
+        -locations=filesystem:${migrationsPath} migrate
+}
+
+cfMigrate tracker-allocations &&
+cfMigrate tracker-backlog &&
+cfMigrate tracker-registration &&
+cfMigrate tracker-timesheets
diff --git a/migrate-local.sh b/migrate-local.sh
new file mode 100755
index 0000000..c9ca0d7
--- /dev/null
+++ b/migrate-local.sh
@@ -0,0 +1,23 @@
+#!/usr/bin/env bash
+
+set -e
+
+suffix=$(echo ${1} | tr '[:upper:]' '[:lower:]')
+
+if [[ $# != 1 || !(${suffix} == 'test' || ${suffix} == 'dev') ]]
+then
+    echo -e "\nusage:\n\n$0 test\n$0 dev\n"
+    exit 1
+fi
+
+for dir in Databases/*/
+do
+    dir=${dir%*/}
+    dir=${dir##*/}
+    dbName=tracker_${dir/-database/}_dotnet_${suffix}
+
+    flyway -user=tracker_dotnet \
+    -password=password \
+    -url="jdbc:mysql://localhost:3306/${dbName}" \
+    -locations=filesystem:Databases/${dir} migrate;
+done
diff --git a/references.sh b/references.sh
new file mode 100755
index 0000000..cc65b3f
--- /dev/null
+++ b/references.sh
@@ -0,0 +1,13 @@
+#!/usr/bin/env bash
+
+
+for topDir in Applications Components
+do
+    for subDir in ./${topDir}/*
+    do
+        subDir=${subDir%*/}
+        subDir=${subDir##*/}
+        echo -e "\n${subDir}"
+        dotnet list "./${topDir}/${subDir}/${subDir}.csproj" reference
+    done
+done
\ No newline at end of file
diff --git a/requests.http b/requests.http
new file mode 100644
index 0000000..052fbc3
--- /dev/null
+++ b/requests.http
@@ -0,0 +1,49 @@
+### Create user
+POST {{registrationUrl}}/registration
+Content-Type: application/json
+
+{"name": "Sally"}
+
+### Get user
+GET {{registrationUrl}}/users/USER-ID
+
+### Get account
+GET {{registrationUrl}}/accounts?ownerId=USER-ID
+
+### Create project
+POST {{registrationUrl}}/projects
+Content-Type: application/json
+
+{"name": "Basket Weaving III", "accountId": ACCOUNT-ID}
+
+### Get projects
+GET {{registrationUrl}}/projects?accountId=ACCOUNT-ID
+
+### Create allocation
+POST {{allocationsUrl}}/allocations
+Content-Type: application/json
+
+{"projectId": PROJECT-ID, "userId": USER-ID, "firstDay": "2015-05-17", "lastDay": "2015-05-18"}
+
+### Get allocations
+GET {{allocationsUrl}}/allocations?projectId=PROJECT-ID
+
+### Create story
+POST {{backlogUrl}}/stories
+Content-Type: application/json
+
+{"projectId": PROJECT-ID, "name": "Find some reeds"}
+
+### Get stories
+GET {{backlogUrl}}/stories?projectId=PROJECT-ID
+
+### Create timesheet
+POST {{timesheetsUrl}}/time-entries/
+Content-Type: application/json
+
+{"projectId": PROJECT-ID, "userId": USER-ID, "date": "2015-05-17", "hours": 6}
+
+### Get timesheets
+GET {{timesheetsUrl}}/time-entries?userId=USER-ID
+
+###
\ No newline at end of file
diff --git a/rest-client.env.json b/rest-client.env.json
new file mode 100644
index 0000000..c265099
--- /dev/null
+++ b/rest-client.env.json
@@ -0,0 +1,14 @@
+{
+  "production": {
+    "registrationUrl": "http://registration-pal-INITIALS.apps.FILLMEIN.pal.pivotal.io",
+    "allocationsUrl": "http://allocations-pal-INITIALS.apps.FILLMEIN.pal.pivotal.io",
+    "backlogUrl": "http://backlog-pal-INITIALS.apps.FILLMEIN.pal.pivotal.io",
+    "timesheetsUrl": "http://timesheets-pal-INITIALS.apps.FILLMEIN.pal.pivotal.io"
+  },
+  "development": {
+    "registrationUrl": "http://localhost:8883",
+    "allocationsUrl": "http://localhost:8881",
+    "backlogUrl": "http://localhost:8882",
+    "timesheetsUrl": "http://localhost:8884"
+  }
+}
diff --git a/scripts/build.sh b/scripts/build.sh
new file mode 100755
index 0000000..5c799d5
--- /dev/null
+++ b/scripts/build.sh
@@ -0,0 +1,37 @@
+#!/usr/bin/env bash
+set -ex
+
+build_output="/tmp/build-output"
+artifacts_path="./artifacts"
+version=$1
+
+mkdir -p $build_output
+mkdir -p $artifacts_path
+
+# compile apps 
+(cd Applications/AllocationsServer && dotnet publish  --configuration Release --output $build_output/allocations/Applications/AllocationsServer/bin/Release/netcoreapp2.0/publish)
+(cd Applications/BacklogServer && dotnet publish --configuration Release --output $build_output/backlog/Applications/BacklogServer/bin/Release/netcoreapp2.0/publish)
+(cd Applications/RegistrationServer && dotnet publish --configuration Release --output $build_output/registration/Applications/RegistrationServer/bin/Release/netcoreapp2.0/publish)
+(cd Applications/TimesheetsServer && dotnet publish --configuration Release --output $build_output/timesheets/Applications/TimesheetsServer/bin/Release/netcoreapp2.0/publish)
+
+# bundle cf manifest with app
+cp manifest-allocations.yml $build_output/allocations/
+cp manifest-backlog.yml $build_output/backlog/
+cp manifest-registration.yml $build_output/registration/
+cp manifest-timesheets.yml $build_output/timesheets/
+
+cp scripts/migrate-databases.sh $build_output/allocations/
+cp scripts/migrate-databases.sh $build_output/backlog/
+cp scripts/migrate-databases.sh $build_output/registration/
+cp scripts/migrate-databases.sh $build_output/timesheets/
+
+cp -r Databases/allocations-database/migrations $build_output/allocations/migrations
+cp -r Databases/backlog-database/migrations $build_output/backlog/migrations
+cp -r Databases/registration-database/migrations $build_output/registration/migrations
+cp -r Databases/timesheets-database/migrations $build_output/timesheets/migrations
+
+# build artifacts
+tar -cvzf $artifacts_path/allocations-server-$version.tgz --directory=$build_output/allocations --remove-files . 
+tar -cvzf $artifacts_path/backlog-server-$version.tgz --directory=$build_output/backlog --remove-files .
+tar -cvzf $artifacts_path/registration-server-$version.tgz --directory=$build_output/registration --remove-files .
+tar -cvzf $artifacts_path/timesheets-server-$version.tgz --directory=$build_output/timesheets --remove-files .
\ No newline at end of file
diff --git a/scripts/migrate-databases.sh b/scripts/migrate-databases.sh
new file mode 100755
index 0000000..ca07c28
--- /dev/null
+++ b/scripts/migrate-databases.sh
@@ -0,0 +1,23 @@
+#!/usr/bin/env bash
+set -e
+
+
+app_guid=`cf app $1 --guid`
+credentials=`cf curl /v2/apps/$app_guid/env | jq '.system_env_json.VCAP_SERVICES' | jq '.["p-mysql"][0].credentials'`
+
+ip_address=`echo $credentials | jq -r '.hostname'`
+db_name=`echo $credentials | jq -r '.name'`
+db_username=`echo $credentials | jq -r '.username'`
+db_password=`echo $credentials | jq -r '.password'`
+
+echo "Opening ssh tunnel to $ip_address"
+cf ssh -N -L 63306:$ip_address:3306 pal-tracker &
+cf_ssh_pid=$!
+
+echo "Waiting for tunnel"
+sleep 5
+
+# Passing this in as a param is a bit strage. Maybe put flyway on the path?
+$3/flyway-*/flyway -url="jdbc:mysql://127.0.0.1:63306/$db_name" -locations=filesystem:$2 -user=$db_username -password=$db_password migrate
+
+kill -STOP $cf_ssh_pid
diff --git a/start-server.sh b/start-server.sh
new file mode 100755
index 0000000..63e14b6
--- /dev/null
+++ b/start-server.sh
@@ -0,0 +1,38 @@
+#!/usr/bin/env bash
+
+set -e
+
+declare -a apps=( "Registration" "Allocations" "Backlog" "Timesheets" )
+declare -a ports=( 8883 8881 8882 8884 )
+
+function usage() {
+    echo -e "\nStarts a specific server or all servers if the name is omitted.\n\nUsage:\n\n$0 [$(join_by ' | ' "${apps[@]}")]\n"
+    exit 1
+}
+
+function join_by {
+    local d=$1
+    shift
+    echo -n "$1"
+    shift
+    printf "%s" "${@/#/$d}"
+}
+
+function start_server() {
+    dotnet run --project "Applications/${1}Server/${1}Server.csproj" --urls "http://*:${2}"
+}
+
+if [[ -n "$1" ]] && [[ ! " ${apps[@]} " =~ " ${1} " ]]
+    then usage
+fi
+
+trap "kill 0" EXIT
+    for i in ${!apps[@]}
+    do
+        app=${apps[$i]}
+        if [[ "$1" = "$app" ]] || [ -z "$1" ]
+        then
+            start_server "$app" "${ports[$i]}" &
+        fi
+    done
+wait
\ No newline at end of file
-- 
2.12.3

