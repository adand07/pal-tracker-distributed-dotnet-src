From d941be43a23ee5d194819ee07d09ef6ac2005394 Mon Sep 17 00:00:00 2001
From: Alex Sartan <asartan@pivotal.io>
Date: Thu, 17 May 2018 09:06:05 -0600
Subject: [PATCH 3/5] Enable circuit breaker

---
 Applications/AllocationsServer/Startup.cs       |  8 ++++++-
 Applications/AllocationsServer/appsettings.json | 13 +++++++++++
 Applications/BacklogServer/Startup.cs           |  8 ++++++-
 Applications/BacklogServer/appsettings.json     | 13 +++++++++++
 Applications/TimesheetsServer/Startup.cs        |  8 ++++++-
 Applications/TimesheetsServer/appsettings.json  | 13 +++++++++++
 Components/Allocations/Allocations.csproj       |  3 +++
 Components/Allocations/GetProjectCommand.cs     | 27 +++++++++++++++++++++++
 Components/Allocations/ProjectClient.cs         | 29 +++++++++++++++++++++----
 Components/Backlog/Backlog.csproj               |  3 +++
 Components/Backlog/GetProjectCommand.cs         | 27 +++++++++++++++++++++++
 Components/Backlog/ProjectClient.cs             | 29 +++++++++++++++++++++----
 Components/Timesheets/GetProjectCommand.cs      | 27 +++++++++++++++++++++++
 Components/Timesheets/ProjectClient.cs          | 29 +++++++++++++++++++++----
 Components/Timesheets/Timesheets.csproj         |  3 +++
 manifest-allocations.yml                        |  4 +++-
 manifest-backlog.yml                            |  4 +++-
 manifest-timesheets.yml                         |  4 +++-
 18 files changed, 234 insertions(+), 18 deletions(-)
 create mode 100644 Components/Allocations/GetProjectCommand.cs
 create mode 100644 Components/Backlog/GetProjectCommand.cs
 create mode 100644 Components/Timesheets/GetProjectCommand.cs

diff --git a/Applications/AllocationsServer/Startup.cs b/Applications/AllocationsServer/Startup.cs
index 088668f..d3cec56 100755
--- a/Applications/AllocationsServer/Startup.cs
+++ b/Applications/AllocationsServer/Startup.cs
@@ -7,6 +7,7 @@ using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.DependencyInjection;
 using Microsoft.Extensions.Logging;
 using Pivotal.Discovery.Client;
+using Steeltoe.CircuitBreaker.Hystrix;
 using Steeltoe.CloudFoundry.Connector.MySql.EFCore;
 using Steeltoe.Common.Discovery;
 
@@ -38,10 +39,13 @@ namespace AllocationsServer
                     BaseAddress = new Uri(Configuration.GetValue<string>("REGISTRATION_SERVER_ENDPOINT"))
                 };
 
-                return new ProjectClient(httpClient);
+                var logger = sp.GetService<ILogger<ProjectClient>>();
+
+                return new ProjectClient(httpClient, logger);
             });
 
             services.AddDiscoveryClient(Configuration);
+            services.AddHystrixMetricsStream(Configuration);
         }
 
         // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
@@ -52,6 +56,8 @@ namespace AllocationsServer
 
             app.UseMvc();
             app.UseDiscoveryClient();
+            app.UseHystrixMetricsStream();
+            app.UseHystrixRequestContext();
         }
     }
 }
\ No newline at end of file
diff --git a/Applications/AllocationsServer/appsettings.json b/Applications/AllocationsServer/appsettings.json
index 9a3e8b5..5a60487 100755
--- a/Applications/AllocationsServer/appsettings.json
+++ b/Applications/AllocationsServer/appsettings.json
@@ -17,5 +17,18 @@
             "shouldRegisterWithEureka": false,
             "shouldFetchRegistry": true
         }
+    },
+    "hystrix": {
+        "command": {
+            "default": {
+                "execution": {
+                    "isolation": {
+                        "thread": {
+                            "timeoutInMilliseconds": 5000
+                        }
+                    }
+                }
+            }
+        }
     }
 }
\ No newline at end of file
diff --git a/Applications/BacklogServer/Startup.cs b/Applications/BacklogServer/Startup.cs
index b9c2971..0f0fd80 100755
--- a/Applications/BacklogServer/Startup.cs
+++ b/Applications/BacklogServer/Startup.cs
@@ -7,6 +7,7 @@ using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.DependencyInjection;
 using Microsoft.Extensions.Logging;
 using Pivotal.Discovery.Client;
+using Steeltoe.CircuitBreaker.Hystrix;
 using Steeltoe.CloudFoundry.Connector.MySql.EFCore;
 using Steeltoe.Common.Discovery;
 
@@ -38,10 +39,13 @@ namespace BacklogServer
                     BaseAddress = new Uri(Configuration.GetValue<string>("REGISTRATION_SERVER_ENDPOINT"))
                 };
 
-                return new ProjectClient(httpClient);
+                var logger = sp.GetService<ILogger<ProjectClient>>();
+
+                return new ProjectClient(httpClient, logger);
             });
 
             services.AddDiscoveryClient(Configuration);
+            services.AddHystrixMetricsStream(Configuration);
         }
 
         // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
@@ -52,6 +56,8 @@ namespace BacklogServer
 
             app.UseMvc();
             app.UseDiscoveryClient();
+            app.UseHystrixMetricsStream();
+            app.UseHystrixRequestContext();
         }
     }
 }
\ No newline at end of file
diff --git a/Applications/BacklogServer/appsettings.json b/Applications/BacklogServer/appsettings.json
index 42dabfe..3ab96dc 100755
--- a/Applications/BacklogServer/appsettings.json
+++ b/Applications/BacklogServer/appsettings.json
@@ -17,5 +17,18 @@
             "shouldRegisterWithEureka": false,
             "shouldFetchRegistry": true
         }
+    },
+    "hystrix": {
+        "command": {
+            "default": {
+                "execution": {
+                    "isolation": {
+                        "thread": {
+                            "timeoutInMilliseconds": 5000
+                        }
+                    }
+                }
+            }
+        }
     }
 }
\ No newline at end of file
diff --git a/Applications/TimesheetsServer/Startup.cs b/Applications/TimesheetsServer/Startup.cs
index ebcc6a0..fa15337 100755
--- a/Applications/TimesheetsServer/Startup.cs
+++ b/Applications/TimesheetsServer/Startup.cs
@@ -6,6 +6,7 @@ using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.DependencyInjection;
 using Microsoft.Extensions.Logging;
 using Pivotal.Discovery.Client;
+using Steeltoe.CircuitBreaker.Hystrix;
 using Steeltoe.CloudFoundry.Connector.MySql.EFCore;
 using Steeltoe.Common.Discovery;
 using Timesheets;
@@ -38,10 +39,13 @@ namespace TimesheetsServer
                     BaseAddress = new Uri(Configuration.GetValue<string>("REGISTRATION_SERVER_ENDPOINT"))
                 };
 
-                return new ProjectClient(httpClient);
+                var logger = sp.GetService<ILogger<ProjectClient>>();
+
+                return new ProjectClient(httpClient, logger);
             });
 
             services.AddDiscoveryClient(Configuration);
+            services.AddHystrixMetricsStream(Configuration);
         }
 
         // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
@@ -52,6 +56,8 @@ namespace TimesheetsServer
 
             app.UseMvc();
             app.UseDiscoveryClient();
+            app.UseHystrixMetricsStream();
+            app.UseHystrixRequestContext();
         }
     }
 }
\ No newline at end of file
diff --git a/Applications/TimesheetsServer/appsettings.json b/Applications/TimesheetsServer/appsettings.json
index fa37511..372f7c9 100755
--- a/Applications/TimesheetsServer/appsettings.json
+++ b/Applications/TimesheetsServer/appsettings.json
@@ -17,5 +17,18 @@
             "shouldRegisterWithEureka": false,
             "shouldFetchRegistry": true
         }
+    },
+    "hystrix": {
+        "command": {
+            "default": {
+                "execution": {
+                    "isolation": {
+                        "thread": {
+                            "timeoutInMilliseconds": 5000
+                        }
+                    }
+                }
+            }
+        }
     }
 }
\ No newline at end of file
diff --git a/Components/Allocations/Allocations.csproj b/Components/Allocations/Allocations.csproj
index d970631..c3e9de4 100755
--- a/Components/Allocations/Allocations.csproj
+++ b/Components/Allocations/Allocations.csproj
@@ -5,6 +5,9 @@
   <ItemGroup>
     <PackageReference Include="Microsoft.EntityFrameworkCore" Version="2.0.1" />
     <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="2.0.1" />
+    <PackageReference Include="RabbitMQ.Client" Version="5.0.1" />
+    <PackageReference Include="Steeltoe.CircuitBreaker.Hystrix.MetricsStreamCore" Version="2.0.0" />
+    <PackageReference Include="Steeltoe.CircuitBreaker.HystrixCore" Version="2.0.0" />
   </ItemGroup>
   <ItemGroup>
     <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
diff --git a/Components/Allocations/GetProjectCommand.cs b/Components/Allocations/GetProjectCommand.cs
new file mode 100644
index 0000000..584a584
--- /dev/null
+++ b/Components/Allocations/GetProjectCommand.cs
@@ -0,0 +1,27 @@
+ï»¿using System;
+using System.Threading.Tasks;
+using Steeltoe.CircuitBreaker.Hystrix;
+
+namespace Allocations
+{
+    public class GetProjectCommand : HystrixCommand<ProjectInfo>
+    {
+        private readonly Func<long, Task<ProjectInfo>> _getProjectFn;
+        private readonly long _projectId;
+        private readonly Func<long, Task<ProjectInfo>> _getProjectFallbackFn;
+
+        public GetProjectCommand(
+            Func<long, Task<ProjectInfo>> getProjectFn,
+            Func<long, Task<ProjectInfo>> getProjectFallbackFn,
+            long projectId
+        ) : base(HystrixCommandGroupKeyDefault.AsKey("ProjectClientGroup"))
+        {
+            _getProjectFn = getProjectFn;
+            _projectId = projectId;
+            _getProjectFallbackFn = getProjectFallbackFn;
+        }
+
+        protected override async Task<ProjectInfo> RunAsync() => await _getProjectFn(_projectId);
+        protected override async Task<ProjectInfo> RunFallbackAsync() => await _getProjectFallbackFn(_projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/ProjectClient.cs b/Components/Allocations/ProjectClient.cs
index 3a141d7..f2c4ac1 100644
--- a/Components/Allocations/ProjectClient.cs
+++ b/Components/Allocations/ProjectClient.cs
@@ -1,25 +1,46 @@
-ï»¿using System.Net.Http;
+ï»¿using System.Collections.Generic;
+using System.Net.Http;
 using System.Runtime.Serialization.Json;
 using System.Threading.Tasks;
+using Microsoft.Extensions.Logging;
 
 namespace Allocations
 {
     public class ProjectClient : IProjectClient
     {
         private readonly HttpClient _client;
+        private readonly ILogger<ProjectClient> _logger;
+        private readonly IDictionary<long, ProjectInfo> _projectCache = new Dictionary<long, ProjectInfo>();
 
-        public ProjectClient(HttpClient client)
+        public ProjectClient(HttpClient client, ILogger<ProjectClient> logger)
         {
             _client = client;
+            _logger = logger;
         }
 
-        public async Task<ProjectInfo> Get(long projectId)
+        public async Task<ProjectInfo> Get(long projectId) =>
+            await new GetProjectCommand(DoGet, DoGetFromCache, projectId).ExecuteAsync();
+
+        private async Task<ProjectInfo> DoGet(long projectId)
         {
             _client.DefaultRequestHeaders.Accept.Clear();
             var streamTask = _client.GetStreamAsync($"project?projectId={projectId}");
 
+            _logger.LogInformation($"Attempting to fetch projectId: {projectId}");
+
             var serializer = new DataContractJsonSerializer(typeof(ProjectInfo));
-            return serializer.ReadObject(await streamTask) as ProjectInfo;
+            var project = serializer.ReadObject(await streamTask) as ProjectInfo;
+
+            _projectCache.Add(projectId, project);
+            _logger.LogInformation($"Caching projectId: {projectId}");
+
+            return project;
+        }
+
+        private Task<ProjectInfo> DoGetFromCache(long projectId)
+        {
+            _logger.LogInformation($"Retrieving from cache projectId: {projectId}");
+            return Task.FromResult(_projectCache[projectId]);
         }
     }
 }
\ No newline at end of file
diff --git a/Components/Backlog/Backlog.csproj b/Components/Backlog/Backlog.csproj
index d970631..c3e9de4 100755
--- a/Components/Backlog/Backlog.csproj
+++ b/Components/Backlog/Backlog.csproj
@@ -5,6 +5,9 @@
   <ItemGroup>
     <PackageReference Include="Microsoft.EntityFrameworkCore" Version="2.0.1" />
     <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="2.0.1" />
+    <PackageReference Include="RabbitMQ.Client" Version="5.0.1" />
+    <PackageReference Include="Steeltoe.CircuitBreaker.Hystrix.MetricsStreamCore" Version="2.0.0" />
+    <PackageReference Include="Steeltoe.CircuitBreaker.HystrixCore" Version="2.0.0" />
   </ItemGroup>
   <ItemGroup>
     <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
diff --git a/Components/Backlog/GetProjectCommand.cs b/Components/Backlog/GetProjectCommand.cs
new file mode 100644
index 0000000..74e78e1
--- /dev/null
+++ b/Components/Backlog/GetProjectCommand.cs
@@ -0,0 +1,27 @@
+ï»¿using System;
+using System.Threading.Tasks;
+using Steeltoe.CircuitBreaker.Hystrix;
+
+namespace Backlog
+{
+    public class GetProjectCommand : HystrixCommand<ProjectInfo>
+    {
+        private readonly Func<long, Task<ProjectInfo>> _getProjectFn;
+        private readonly long _projectId;
+        private readonly Func<long, Task<ProjectInfo>> _getProjectFallbackFn;
+
+        public GetProjectCommand(
+            Func<long, Task<ProjectInfo>> getProjectFn,
+            Func<long, Task<ProjectInfo>> getProjectFallbackFn,
+            long projectId
+        ) : base(HystrixCommandGroupKeyDefault.AsKey("ProjectClientGroup"))
+        {
+            _getProjectFn = getProjectFn;
+            _projectId = projectId;
+            _getProjectFallbackFn = getProjectFallbackFn;
+        }
+
+        protected override async Task<ProjectInfo> RunAsync() => await _getProjectFn(_projectId);
+        protected override async Task<ProjectInfo> RunFallbackAsync() => await _getProjectFallbackFn(_projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/ProjectClient.cs b/Components/Backlog/ProjectClient.cs
index 1017b3a..5f23836 100644
--- a/Components/Backlog/ProjectClient.cs
+++ b/Components/Backlog/ProjectClient.cs
@@ -1,25 +1,46 @@
-ï»¿using System.Net.Http;
+ï»¿using System.Collections.Generic;
+using System.Net.Http;
 using System.Runtime.Serialization.Json;
 using System.Threading.Tasks;
+using Microsoft.Extensions.Logging;
 
 namespace Backlog
 {
     public class ProjectClient : IProjectClient
     {
         private readonly HttpClient _client;
+        private readonly ILogger<ProjectClient> _logger;
+        private readonly IDictionary<long, ProjectInfo> _projectCache = new Dictionary<long, ProjectInfo>();
 
-        public ProjectClient(HttpClient client)
+        public ProjectClient(HttpClient client, ILogger<ProjectClient> logger)
         {
             _client = client;
+            _logger = logger;
         }
 
-        public async Task<ProjectInfo> Get(long projectId)
+        public async Task<ProjectInfo> Get(long projectId) =>
+            await new GetProjectCommand(DoGet, DoGetFromCache, projectId).ExecuteAsync();
+
+        private async Task<ProjectInfo> DoGet(long projectId)
         {
             _client.DefaultRequestHeaders.Accept.Clear();
             var streamTask = _client.GetStreamAsync($"project?projectId={projectId}");
 
+            _logger.LogInformation($"Attempting to fetch projectId: {projectId}");
+
             var serializer = new DataContractJsonSerializer(typeof(ProjectInfo));
-            return serializer.ReadObject(await streamTask) as ProjectInfo;
+            var project = serializer.ReadObject(await streamTask) as ProjectInfo;
+
+            _projectCache.Add(projectId, project);
+            _logger.LogInformation($"Caching projectId: {projectId}");
+
+            return project;
+        }
+
+        private Task<ProjectInfo> DoGetFromCache(long projectId)
+        {
+            _logger.LogInformation($"Retrieving from cache projectId: {projectId}");
+            return Task.FromResult(_projectCache[projectId]);
         }
     }
 }
\ No newline at end of file
diff --git a/Components/Timesheets/GetProjectCommand.cs b/Components/Timesheets/GetProjectCommand.cs
new file mode 100644
index 0000000..d6bad88
--- /dev/null
+++ b/Components/Timesheets/GetProjectCommand.cs
@@ -0,0 +1,27 @@
+ï»¿using System;
+using System.Threading.Tasks;
+using Steeltoe.CircuitBreaker.Hystrix;
+
+namespace Timesheets
+{
+    public class GetProjectCommand : HystrixCommand<ProjectInfo>
+    {
+        private readonly Func<long, Task<ProjectInfo>> _getProjectFn;
+        private readonly long _projectId;
+        private readonly Func<long, Task<ProjectInfo>> _getProjectFallbackFn;
+
+        public GetProjectCommand(
+            Func<long, Task<ProjectInfo>> getProjectFn,
+            Func<long, Task<ProjectInfo>> getProjectFallbackFn,
+            long projectId
+        ) : base(HystrixCommandGroupKeyDefault.AsKey("ProjectClientGroup"))
+        {
+            _getProjectFn = getProjectFn;
+            _projectId = projectId;
+            _getProjectFallbackFn = getProjectFallbackFn;
+        }
+
+        protected override async Task<ProjectInfo> RunAsync() => await _getProjectFn(_projectId);
+        protected override async Task<ProjectInfo> RunFallbackAsync() => await _getProjectFallbackFn(_projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/ProjectClient.cs b/Components/Timesheets/ProjectClient.cs
index a43eb0e..6752b50 100644
--- a/Components/Timesheets/ProjectClient.cs
+++ b/Components/Timesheets/ProjectClient.cs
@@ -1,25 +1,46 @@
-ï»¿using System.Net.Http;
+ï»¿using System.Collections.Generic;
+using System.Net.Http;
 using System.Runtime.Serialization.Json;
 using System.Threading.Tasks;
+using Microsoft.Extensions.Logging;
 
 namespace Timesheets
 {
     public class ProjectClient : IProjectClient
     {
         private readonly HttpClient _client;
+        private readonly ILogger<ProjectClient> _logger;
+        private readonly IDictionary<long, ProjectInfo> _projectCache = new Dictionary<long, ProjectInfo>();
 
-        public ProjectClient(HttpClient client)
+        public ProjectClient(HttpClient client, ILogger<ProjectClient> logger)
         {
             _client = client;
+            _logger = logger;
         }
 
-        public async Task<ProjectInfo> Get(long projectId)
+        public async Task<ProjectInfo> Get(long projectId) =>
+            await new GetProjectCommand(DoGet, DoGetFromCache, projectId).ExecuteAsync();
+
+        private async Task<ProjectInfo> DoGet(long projectId)
         {
             _client.DefaultRequestHeaders.Accept.Clear();
             var streamTask = _client.GetStreamAsync($"project?projectId={projectId}");
 
+            _logger.LogInformation($"Attempting to fetch projectId: {projectId}");
+
             var serializer = new DataContractJsonSerializer(typeof(ProjectInfo));
-            return serializer.ReadObject(await streamTask) as ProjectInfo;
+            var project = serializer.ReadObject(await streamTask) as ProjectInfo;
+
+            _projectCache.Add(projectId, project);
+            _logger.LogInformation($"Caching projectId: {projectId}");
+
+            return project;
+        }
+
+        private Task<ProjectInfo> DoGetFromCache(long projectId)
+        {
+            _logger.LogInformation($"Retrieving from cache projectId: {projectId}");
+            return Task.FromResult(_projectCache[projectId]);
         }
     }
 }
\ No newline at end of file
diff --git a/Components/Timesheets/Timesheets.csproj b/Components/Timesheets/Timesheets.csproj
index d970631..c3e9de4 100755
--- a/Components/Timesheets/Timesheets.csproj
+++ b/Components/Timesheets/Timesheets.csproj
@@ -5,6 +5,9 @@
   <ItemGroup>
     <PackageReference Include="Microsoft.EntityFrameworkCore" Version="2.0.1" />
     <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="2.0.1" />
+    <PackageReference Include="RabbitMQ.Client" Version="5.0.1" />
+    <PackageReference Include="Steeltoe.CircuitBreaker.Hystrix.MetricsStreamCore" Version="2.0.0" />
+    <PackageReference Include="Steeltoe.CircuitBreaker.HystrixCore" Version="2.0.0" />
   </ItemGroup>
   <ItemGroup>
     <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.3" />
diff --git a/manifest-allocations.yml b/manifest-allocations.yml
index 6abdd23..427d27b 100644
--- a/manifest-allocations.yml
+++ b/manifest-allocations.yml
@@ -7,4 +7,6 @@ applications:
   path: Applications/AllocationsServer/bin/Release/netcoreapp2.0/publish
   services:
   - tracker-allocations-database
-  - tracker-service-registry
\ No newline at end of file
+  - tracker-service-registry
+  - tracker-circuit-breaker-dashboard
+  - tracker-amqp
\ No newline at end of file
diff --git a/manifest-backlog.yml b/manifest-backlog.yml
index 377e87c..38800da 100644
--- a/manifest-backlog.yml
+++ b/manifest-backlog.yml
@@ -7,4 +7,6 @@ applications:
   path: Applications/BacklogServer/bin/Release/netcoreapp2.0/publish
   services:
   - tracker-backlog-database
-  - tracker-service-registry
\ No newline at end of file
+  - tracker-service-registry
+  - tracker-circuit-breaker-dashboard
+  - tracker-amqp
\ No newline at end of file
diff --git a/manifest-timesheets.yml b/manifest-timesheets.yml
index 9ef17d4..4cdde80 100644
--- a/manifest-timesheets.yml
+++ b/manifest-timesheets.yml
@@ -7,4 +7,6 @@ applications:
   path: Applications/TimesheetsServer/bin/Release/netcoreapp2.0/publish
   services:
   - tracker-timesheets-database
-  - tracker-service-registry
\ No newline at end of file
+  - tracker-service-registry
+  - tracker-circuit-breaker-dashboard
+  - tracker-amqp
\ No newline at end of file
-- 
2.12.3

