From 8d7fc6d1a6440fa0c67ca62c1367fe484148fc88 Mon Sep 17 00:00:00 2001
From: Alex Sartan <asartan@pivotal.io>
Date: Thu, 15 Feb 2018 15:49:55 -0700
Subject: [PATCH 3/5] Enable circuit breaker

---
 Applications/AllocationsServer/Startup.cs          |  9 +++++--
 Applications/AllocationsServer/appsettings.json    | 13 ++++++++++
 Applications/BacklogServer/Startup.cs              |  8 +++++-
 Applications/BacklogServer/appsettings.json        | 13 ++++++++++
 Applications/TimesheetsServer/Startup.cs           |  8 +++++-
 Applications/TimesheetsServer/appsettings.json     | 13 ++++++++++
 Components/Allocations/Allocations.csproj          |  3 +++
 Components/Allocations/GetProjectCommand.cs        | 27 ++++++++++++++++++++
 Components/Allocations/ProjectClient.cs            | 29 +++++++++++++++++++---
 .../AllocationsTest/AllocationsControllerTest.cs   |  3 ++-
 Components/Backlog/Backlog.csproj                  |  3 +++
 Components/Backlog/GetProjectCommand.cs            | 27 ++++++++++++++++++++
 Components/Backlog/ProjectClient.cs                | 29 +++++++++++++++++++---
 Components/BacklogTest/StoryControllerTest.cs      |  5 ++--
 Components/Timesheets/GetProjectCommand.cs         | 27 ++++++++++++++++++++
 Components/Timesheets/ProjectClient.cs             | 29 +++++++++++++++++++---
 Components/Timesheets/Timesheets.csproj            |  3 +++
 .../TimesheetsTest/TimeEntryControllerTest.cs      |  5 ++--
 manifest-allocations.yml                           |  4 ++-
 manifest-backlog.yml                               |  4 ++-
 manifest-timesheets.yml                            |  4 ++-
 21 files changed, 242 insertions(+), 24 deletions(-)
 create mode 100644 Components/Allocations/GetProjectCommand.cs
 create mode 100644 Components/Backlog/GetProjectCommand.cs
 create mode 100644 Components/Timesheets/GetProjectCommand.cs

diff --git a/Applications/AllocationsServer/Startup.cs b/Applications/AllocationsServer/Startup.cs
index 297e65c..726f433 100755
--- a/Applications/AllocationsServer/Startup.cs
+++ b/Applications/AllocationsServer/Startup.cs
@@ -8,6 +8,7 @@ using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.DependencyInjection;
 using Microsoft.Extensions.Logging;
 using Pivotal.Discovery.Client;
+using Steeltoe.CircuitBreaker.Hystrix;
 using Steeltoe.Common.Discovery;
 
 namespace AllocationsServer
@@ -35,15 +36,17 @@ namespace AllocationsServer
             {
                 var handler = new DiscoveryHttpClientHandler(sp.GetService<IDiscoveryClient>());
                 var httpClient = new HttpClient(handler, false)
-
                 {
                     BaseAddress = new Uri(Configuration.GetValue<string>("REGISTRATION_SERVER_ENDPOINT"))
                 };
 
-                return new ProjectClient(httpClient);
+                var logger = sp.GetService<ILogger<ProjectClient>>();
+
+                return new ProjectClient(httpClient, logger);
             });
 
             services.AddDiscoveryClient(Configuration);
+            services.AddHystrixMetricsStream(Configuration);
         }
 
         // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
@@ -54,6 +57,8 @@ namespace AllocationsServer
 
             app.UseMvc();
             app.UseDiscoveryClient();
+            app.UseHystrixMetricsStream();
+            app.UseHystrixRequestContext();
         }
     }
 }
\ No newline at end of file
diff --git a/Applications/AllocationsServer/appsettings.json b/Applications/AllocationsServer/appsettings.json
index 14a4e96..e581e67 100755
--- a/Applications/AllocationsServer/appsettings.json
+++ b/Applications/AllocationsServer/appsettings.json
@@ -12,5 +12,18 @@
             "shouldRegisterWithEureka": false,
             "shouldFetchRegistry": true
         }
+    },
+    "hystrix": {
+        "command": {
+            "default": {
+                "execution": {
+                    "isolation": {
+                        "thread": {
+                            "timeoutInMilliseconds": 5000
+                        }
+                    }
+                }
+            }
+        }
     }
 }
\ No newline at end of file
diff --git a/Applications/BacklogServer/Startup.cs b/Applications/BacklogServer/Startup.cs
index 12b81c3..acb5a66 100755
--- a/Applications/BacklogServer/Startup.cs
+++ b/Applications/BacklogServer/Startup.cs
@@ -8,6 +8,7 @@ using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.DependencyInjection;
 using Microsoft.Extensions.Logging;
 using Pivotal.Discovery.Client;
+using Steeltoe.CircuitBreaker.Hystrix;
 using Steeltoe.Common.Discovery;
 
 namespace BacklogServer
@@ -39,10 +40,13 @@ namespace BacklogServer
                     BaseAddress = new Uri(Configuration.GetValue<string>("REGISTRATION_SERVER_ENDPOINT"))
                 };
 
-                return new ProjectClient(httpClient);
+                var logger = sp.GetService<ILogger<ProjectClient>>();
+
+                return new ProjectClient(httpClient, logger);
             });
 
             services.AddDiscoveryClient(Configuration);
+            services.AddHystrixMetricsStream(Configuration);
         }
 
         // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
@@ -53,6 +57,8 @@ namespace BacklogServer
 
             app.UseMvc();
             app.UseDiscoveryClient();
+            app.UseHystrixMetricsStream();
+            app.UseHystrixRequestContext();
         }
     }
 }
\ No newline at end of file
diff --git a/Applications/BacklogServer/appsettings.json b/Applications/BacklogServer/appsettings.json
index 14a4e96..e581e67 100755
--- a/Applications/BacklogServer/appsettings.json
+++ b/Applications/BacklogServer/appsettings.json
@@ -12,5 +12,18 @@
             "shouldRegisterWithEureka": false,
             "shouldFetchRegistry": true
         }
+    },
+    "hystrix": {
+        "command": {
+            "default": {
+                "execution": {
+                    "isolation": {
+                        "thread": {
+                            "timeoutInMilliseconds": 5000
+                        }
+                    }
+                }
+            }
+        }
     }
 }
\ No newline at end of file
diff --git a/Applications/TimesheetsServer/Startup.cs b/Applications/TimesheetsServer/Startup.cs
index 6c3ba03..2d74717 100755
--- a/Applications/TimesheetsServer/Startup.cs
+++ b/Applications/TimesheetsServer/Startup.cs
@@ -7,6 +7,7 @@ using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.DependencyInjection;
 using Microsoft.Extensions.Logging;
 using Pivotal.Discovery.Client;
+using Steeltoe.CircuitBreaker.Hystrix;
 using Steeltoe.Common.Discovery;
 using Timesheets;
 
@@ -39,10 +40,13 @@ namespace TimesheetsServer
                     BaseAddress = new Uri(Configuration.GetValue<string>("REGISTRATION_SERVER_ENDPOINT"))
                 };
 
-                return new ProjectClient(httpClient);
+                var logger = sp.GetService<ILogger<ProjectClient>>();
+
+                return new ProjectClient(httpClient, logger);
             });
 
             services.AddDiscoveryClient(Configuration);
+            services.AddHystrixMetricsStream(Configuration);
         }
 
         // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
@@ -53,6 +57,8 @@ namespace TimesheetsServer
 
             app.UseMvc();
             app.UseDiscoveryClient();
+            app.UseHystrixMetricsStream();
+            app.UseHystrixRequestContext();
         }
     }
 }
\ No newline at end of file
diff --git a/Applications/TimesheetsServer/appsettings.json b/Applications/TimesheetsServer/appsettings.json
index 14a4e96..e581e67 100755
--- a/Applications/TimesheetsServer/appsettings.json
+++ b/Applications/TimesheetsServer/appsettings.json
@@ -12,5 +12,18 @@
             "shouldRegisterWithEureka": false,
             "shouldFetchRegistry": true
         }
+    },
+    "hystrix": {
+        "command": {
+            "default": {
+                "execution": {
+                    "isolation": {
+                        "thread": {
+                            "timeoutInMilliseconds": 5000
+                        }
+                    }
+                }
+            }
+        }
     }
 }
\ No newline at end of file
diff --git a/Components/Allocations/Allocations.csproj b/Components/Allocations/Allocations.csproj
index e7dac9d..15f756e 100755
--- a/Components/Allocations/Allocations.csproj
+++ b/Components/Allocations/Allocations.csproj
@@ -3,6 +3,9 @@
     <TargetFramework>netcoreapp2.0</TargetFramework>
   </PropertyGroup>
   <ItemGroup>
+    <PackageReference Include="RabbitMQ.Client" Version="5.0.1" />
+    <PackageReference Include="Steeltoe.CircuitBreaker.Hystrix.MetricsStreamCore" Version="2.0.0" />
+    <PackageReference Include="Steeltoe.CircuitBreaker.HystrixCore" Version="2.0.0" />
     <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj" />
     <PackageReference Include="MySqlConnector" Version="0.35.0" />
   </ItemGroup>
diff --git a/Components/Allocations/GetProjectCommand.cs b/Components/Allocations/GetProjectCommand.cs
new file mode 100644
index 0000000..584a584
--- /dev/null
+++ b/Components/Allocations/GetProjectCommand.cs
@@ -0,0 +1,27 @@
+ï»¿using System;
+using System.Threading.Tasks;
+using Steeltoe.CircuitBreaker.Hystrix;
+
+namespace Allocations
+{
+    public class GetProjectCommand : HystrixCommand<ProjectInfo>
+    {
+        private readonly Func<long, Task<ProjectInfo>> _getProjectFn;
+        private readonly long _projectId;
+        private readonly Func<long, Task<ProjectInfo>> _getProjectFallbackFn;
+
+        public GetProjectCommand(
+            Func<long, Task<ProjectInfo>> getProjectFn,
+            Func<long, Task<ProjectInfo>> getProjectFallbackFn,
+            long projectId
+        ) : base(HystrixCommandGroupKeyDefault.AsKey("ProjectClientGroup"))
+        {
+            _getProjectFn = getProjectFn;
+            _projectId = projectId;
+            _getProjectFallbackFn = getProjectFallbackFn;
+        }
+
+        protected override async Task<ProjectInfo> RunAsync() => await _getProjectFn(_projectId);
+        protected override async Task<ProjectInfo> RunFallbackAsync() => await _getProjectFallbackFn(_projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Allocations/ProjectClient.cs b/Components/Allocations/ProjectClient.cs
index 3a141d7..f2c4ac1 100644
--- a/Components/Allocations/ProjectClient.cs
+++ b/Components/Allocations/ProjectClient.cs
@@ -1,25 +1,46 @@
-ï»¿using System.Net.Http;
+ï»¿using System.Collections.Generic;
+using System.Net.Http;
 using System.Runtime.Serialization.Json;
 using System.Threading.Tasks;
+using Microsoft.Extensions.Logging;
 
 namespace Allocations
 {
     public class ProjectClient : IProjectClient
     {
         private readonly HttpClient _client;
+        private readonly ILogger<ProjectClient> _logger;
+        private readonly IDictionary<long, ProjectInfo> _projectCache = new Dictionary<long, ProjectInfo>();
 
-        public ProjectClient(HttpClient client)
+        public ProjectClient(HttpClient client, ILogger<ProjectClient> logger)
         {
             _client = client;
+            _logger = logger;
         }
 
-        public async Task<ProjectInfo> Get(long projectId)
+        public async Task<ProjectInfo> Get(long projectId) =>
+            await new GetProjectCommand(DoGet, DoGetFromCache, projectId).ExecuteAsync();
+
+        private async Task<ProjectInfo> DoGet(long projectId)
         {
             _client.DefaultRequestHeaders.Accept.Clear();
             var streamTask = _client.GetStreamAsync($"project?projectId={projectId}");
 
+            _logger.LogInformation($"Attempting to fetch projectId: {projectId}");
+
             var serializer = new DataContractJsonSerializer(typeof(ProjectInfo));
-            return serializer.ReadObject(await streamTask) as ProjectInfo;
+            var project = serializer.ReadObject(await streamTask) as ProjectInfo;
+
+            _projectCache.Add(projectId, project);
+            _logger.LogInformation($"Caching projectId: {projectId}");
+
+            return project;
+        }
+
+        private Task<ProjectInfo> DoGetFromCache(long projectId)
+        {
+            _logger.LogInformation($"Retrieving from cache projectId: {projectId}");
+            return Task.FromResult(_projectCache[projectId]);
         }
     }
 }
\ No newline at end of file
diff --git a/Components/AllocationsTest/AllocationsControllerTest.cs b/Components/AllocationsTest/AllocationsControllerTest.cs
index fe62485..152aad1 100644
--- a/Components/AllocationsTest/AllocationsControllerTest.cs
+++ b/Components/AllocationsTest/AllocationsControllerTest.cs
@@ -4,6 +4,7 @@ using System.Net.Http;
 using Allocations;
 using DatabaseSupport;
 using Microsoft.AspNetCore.Mvc;
+using Microsoft.Extensions.Logging;
 using TestSupport;
 using Xunit;
 using static TestSupport.TestServers;
@@ -30,7 +31,7 @@ namespace AllocationsTest
 
             var controller =
                 new AllocationController(new AllocationDataGateway(new DatabaseTemplate(_dataSourceConfig)),
-                    new ProjectClient(_client));
+                    new ProjectClient(_client, new LoggerFactory().CreateLogger<ProjectClient>()));
 
             var value = controller.Post(new AllocationInfo(-1, 55432, 4765, DateTime.Parse("2014-05-16"),
                 DateTime.Parse("2014-05-26"), ""));
diff --git a/Components/Backlog/Backlog.csproj b/Components/Backlog/Backlog.csproj
index e7dac9d..15f756e 100755
--- a/Components/Backlog/Backlog.csproj
+++ b/Components/Backlog/Backlog.csproj
@@ -3,6 +3,9 @@
     <TargetFramework>netcoreapp2.0</TargetFramework>
   </PropertyGroup>
   <ItemGroup>
+    <PackageReference Include="RabbitMQ.Client" Version="5.0.1" />
+    <PackageReference Include="Steeltoe.CircuitBreaker.Hystrix.MetricsStreamCore" Version="2.0.0" />
+    <PackageReference Include="Steeltoe.CircuitBreaker.HystrixCore" Version="2.0.0" />
     <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj" />
     <PackageReference Include="MySqlConnector" Version="0.35.0" />
   </ItemGroup>
diff --git a/Components/Backlog/GetProjectCommand.cs b/Components/Backlog/GetProjectCommand.cs
new file mode 100644
index 0000000..74e78e1
--- /dev/null
+++ b/Components/Backlog/GetProjectCommand.cs
@@ -0,0 +1,27 @@
+ï»¿using System;
+using System.Threading.Tasks;
+using Steeltoe.CircuitBreaker.Hystrix;
+
+namespace Backlog
+{
+    public class GetProjectCommand : HystrixCommand<ProjectInfo>
+    {
+        private readonly Func<long, Task<ProjectInfo>> _getProjectFn;
+        private readonly long _projectId;
+        private readonly Func<long, Task<ProjectInfo>> _getProjectFallbackFn;
+
+        public GetProjectCommand(
+            Func<long, Task<ProjectInfo>> getProjectFn,
+            Func<long, Task<ProjectInfo>> getProjectFallbackFn,
+            long projectId
+        ) : base(HystrixCommandGroupKeyDefault.AsKey("ProjectClientGroup"))
+        {
+            _getProjectFn = getProjectFn;
+            _projectId = projectId;
+            _getProjectFallbackFn = getProjectFallbackFn;
+        }
+
+        protected override async Task<ProjectInfo> RunAsync() => await _getProjectFn(_projectId);
+        protected override async Task<ProjectInfo> RunFallbackAsync() => await _getProjectFallbackFn(_projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Backlog/ProjectClient.cs b/Components/Backlog/ProjectClient.cs
index 1017b3a..5f23836 100644
--- a/Components/Backlog/ProjectClient.cs
+++ b/Components/Backlog/ProjectClient.cs
@@ -1,25 +1,46 @@
-ï»¿using System.Net.Http;
+ï»¿using System.Collections.Generic;
+using System.Net.Http;
 using System.Runtime.Serialization.Json;
 using System.Threading.Tasks;
+using Microsoft.Extensions.Logging;
 
 namespace Backlog
 {
     public class ProjectClient : IProjectClient
     {
         private readonly HttpClient _client;
+        private readonly ILogger<ProjectClient> _logger;
+        private readonly IDictionary<long, ProjectInfo> _projectCache = new Dictionary<long, ProjectInfo>();
 
-        public ProjectClient(HttpClient client)
+        public ProjectClient(HttpClient client, ILogger<ProjectClient> logger)
         {
             _client = client;
+            _logger = logger;
         }
 
-        public async Task<ProjectInfo> Get(long projectId)
+        public async Task<ProjectInfo> Get(long projectId) =>
+            await new GetProjectCommand(DoGet, DoGetFromCache, projectId).ExecuteAsync();
+
+        private async Task<ProjectInfo> DoGet(long projectId)
         {
             _client.DefaultRequestHeaders.Accept.Clear();
             var streamTask = _client.GetStreamAsync($"project?projectId={projectId}");
 
+            _logger.LogInformation($"Attempting to fetch projectId: {projectId}");
+
             var serializer = new DataContractJsonSerializer(typeof(ProjectInfo));
-            return serializer.ReadObject(await streamTask) as ProjectInfo;
+            var project = serializer.ReadObject(await streamTask) as ProjectInfo;
+
+            _projectCache.Add(projectId, project);
+            _logger.LogInformation($"Caching projectId: {projectId}");
+
+            return project;
+        }
+
+        private Task<ProjectInfo> DoGetFromCache(long projectId)
+        {
+            _logger.LogInformation($"Retrieving from cache projectId: {projectId}");
+            return Task.FromResult(_projectCache[projectId]);
         }
     }
 }
\ No newline at end of file
diff --git a/Components/BacklogTest/StoryControllerTest.cs b/Components/BacklogTest/StoryControllerTest.cs
index d027fad..650556d 100755
--- a/Components/BacklogTest/StoryControllerTest.cs
+++ b/Components/BacklogTest/StoryControllerTest.cs
@@ -3,6 +3,7 @@ using System.Net.Http;
 using Backlog;
 using DatabaseSupport;
 using Microsoft.AspNetCore.Mvc;
+using Microsoft.Extensions.Logging;
 using TestSupport;
 using Xunit;
 using static TestSupport.TestServers;
@@ -30,7 +31,7 @@ namespace BacklogTest
 
             var controller =
                 new StoryController(new StoryDataGateway(new DatabaseTemplate(_dataSourceConfig)),
-                    new ProjectClient(_client));
+                    new ProjectClient(_client, new LoggerFactory().CreateLogger<ProjectClient>()));
 
             var value = controller.Post(new StoryInfo(-1, 55432, "An epic story", ""));
             var actual = (StoryInfo) ((ObjectResult) value).Value;
@@ -48,7 +49,7 @@ namespace BacklogTest
 
             var controller =
                 new StoryController(new StoryDataGateway(new DatabaseTemplate(_dataSourceConfig)),
-                    new ProjectClient(_client));
+                    new ProjectClient(_client, new LoggerFactory().CreateLogger<ProjectClient>()));
             var result = controller.Get(55432);
 
             // todo...
diff --git a/Components/Timesheets/GetProjectCommand.cs b/Components/Timesheets/GetProjectCommand.cs
new file mode 100644
index 0000000..d6bad88
--- /dev/null
+++ b/Components/Timesheets/GetProjectCommand.cs
@@ -0,0 +1,27 @@
+ï»¿using System;
+using System.Threading.Tasks;
+using Steeltoe.CircuitBreaker.Hystrix;
+
+namespace Timesheets
+{
+    public class GetProjectCommand : HystrixCommand<ProjectInfo>
+    {
+        private readonly Func<long, Task<ProjectInfo>> _getProjectFn;
+        private readonly long _projectId;
+        private readonly Func<long, Task<ProjectInfo>> _getProjectFallbackFn;
+
+        public GetProjectCommand(
+            Func<long, Task<ProjectInfo>> getProjectFn,
+            Func<long, Task<ProjectInfo>> getProjectFallbackFn,
+            long projectId
+        ) : base(HystrixCommandGroupKeyDefault.AsKey("ProjectClientGroup"))
+        {
+            _getProjectFn = getProjectFn;
+            _projectId = projectId;
+            _getProjectFallbackFn = getProjectFallbackFn;
+        }
+
+        protected override async Task<ProjectInfo> RunAsync() => await _getProjectFn(_projectId);
+        protected override async Task<ProjectInfo> RunFallbackAsync() => await _getProjectFallbackFn(_projectId);
+    }
+}
\ No newline at end of file
diff --git a/Components/Timesheets/ProjectClient.cs b/Components/Timesheets/ProjectClient.cs
index a43eb0e..6752b50 100644
--- a/Components/Timesheets/ProjectClient.cs
+++ b/Components/Timesheets/ProjectClient.cs
@@ -1,25 +1,46 @@
-ï»¿using System.Net.Http;
+ï»¿using System.Collections.Generic;
+using System.Net.Http;
 using System.Runtime.Serialization.Json;
 using System.Threading.Tasks;
+using Microsoft.Extensions.Logging;
 
 namespace Timesheets
 {
     public class ProjectClient : IProjectClient
     {
         private readonly HttpClient _client;
+        private readonly ILogger<ProjectClient> _logger;
+        private readonly IDictionary<long, ProjectInfo> _projectCache = new Dictionary<long, ProjectInfo>();
 
-        public ProjectClient(HttpClient client)
+        public ProjectClient(HttpClient client, ILogger<ProjectClient> logger)
         {
             _client = client;
+            _logger = logger;
         }
 
-        public async Task<ProjectInfo> Get(long projectId)
+        public async Task<ProjectInfo> Get(long projectId) =>
+            await new GetProjectCommand(DoGet, DoGetFromCache, projectId).ExecuteAsync();
+
+        private async Task<ProjectInfo> DoGet(long projectId)
         {
             _client.DefaultRequestHeaders.Accept.Clear();
             var streamTask = _client.GetStreamAsync($"project?projectId={projectId}");
 
+            _logger.LogInformation($"Attempting to fetch projectId: {projectId}");
+
             var serializer = new DataContractJsonSerializer(typeof(ProjectInfo));
-            return serializer.ReadObject(await streamTask) as ProjectInfo;
+            var project = serializer.ReadObject(await streamTask) as ProjectInfo;
+
+            _projectCache.Add(projectId, project);
+            _logger.LogInformation($"Caching projectId: {projectId}");
+
+            return project;
+        }
+
+        private Task<ProjectInfo> DoGetFromCache(long projectId)
+        {
+            _logger.LogInformation($"Retrieving from cache projectId: {projectId}");
+            return Task.FromResult(_projectCache[projectId]);
         }
     }
 }
\ No newline at end of file
diff --git a/Components/Timesheets/Timesheets.csproj b/Components/Timesheets/Timesheets.csproj
index 4ff6bc1..9c754c1 100755
--- a/Components/Timesheets/Timesheets.csproj
+++ b/Components/Timesheets/Timesheets.csproj
@@ -4,6 +4,9 @@
   </PropertyGroup>
   
   <ItemGroup>
+    <PackageReference Include="RabbitMQ.Client" Version="5.0.1" />
+    <PackageReference Include="Steeltoe.CircuitBreaker.Hystrix.MetricsStreamCore" Version="2.0.0" />
+    <PackageReference Include="Steeltoe.CircuitBreaker.HystrixCore" Version="2.0.0" />
     <ProjectReference Include="../DatabaseSupport/DatabaseSupport.csproj" />
     <PackageReference Include="MySqlConnector" Version="0.35.0" />
   </ItemGroup>
diff --git a/Components/TimesheetsTest/TimeEntryControllerTest.cs b/Components/TimesheetsTest/TimeEntryControllerTest.cs
index 8e84106..3b172f2 100755
--- a/Components/TimesheetsTest/TimeEntryControllerTest.cs
+++ b/Components/TimesheetsTest/TimeEntryControllerTest.cs
@@ -3,6 +3,7 @@ using System.Collections.Generic;
 using System.Net.Http;
 using DatabaseSupport;
 using Microsoft.AspNetCore.Mvc;
+using Microsoft.Extensions.Logging;
 using TestSupport;
 using Timesheets;
 using Xunit;
@@ -31,7 +32,7 @@ namespace TimesheetsTest
 
             var controller =
                 new TimeEntryController(new TimeEntryDataGateway(new DatabaseTemplate(_dataSourceConfig)),
-                    new ProjectClient(_client));
+                    new ProjectClient(_client, new LoggerFactory().CreateLogger<ProjectClient>()));
 
             var value = controller.Post(new TimeEntryInfo(-1, 55432, 4765, DateTime.Parse("2015-05-17"), 8, ""));
             var actual = (TimeEntryInfo) ((ObjectResult) value).Value;
@@ -51,7 +52,7 @@ namespace TimesheetsTest
 
             var controller =
                 new TimeEntryController(new TimeEntryDataGateway(new DatabaseTemplate(_dataSourceConfig)),
-                    new ProjectClient(_client));
+                    new ProjectClient(_client, new LoggerFactory().CreateLogger<ProjectClient>()));
             var result = controller.Get(4765);
 
             // todo...
diff --git a/manifest-allocations.yml b/manifest-allocations.yml
index 3014783..5d7e6f6 100644
--- a/manifest-allocations.yml
+++ b/manifest-allocations.yml
@@ -8,4 +8,6 @@ applications:
   path: Applications/AllocationsServer/bin/Release/netcoreapp2.0/publish
   services:
   - tracker-allocations-database
-  - tracker-service-registry
\ No newline at end of file
+  - tracker-service-registry
+  - tracker-circuit-breaker-dashboard
+  - tracker-amqp
\ No newline at end of file
diff --git a/manifest-backlog.yml b/manifest-backlog.yml
index 7d5a4fc..96a443b 100644
--- a/manifest-backlog.yml
+++ b/manifest-backlog.yml
@@ -8,4 +8,6 @@ applications:
   path: Applications/BacklogServer/bin/Release/netcoreapp2.0/publish
   services:
   - tracker-backlog-database
-  - tracker-service-registry
\ No newline at end of file
+  - tracker-service-registry
+  - tracker-circuit-breaker-dashboard
+  - tracker-amqp
\ No newline at end of file
diff --git a/manifest-timesheets.yml b/manifest-timesheets.yml
index f9716a5..3c32a65 100644
--- a/manifest-timesheets.yml
+++ b/manifest-timesheets.yml
@@ -8,4 +8,6 @@ applications:
   path: Applications/TimesheetsServer/bin/Release/netcoreapp2.0/publish
   services:
   - tracker-timesheets-database
-  - tracker-service-registry
\ No newline at end of file
+  - tracker-service-registry
+  - tracker-circuit-breaker-dashboard
+  - tracker-amqp
\ No newline at end of file
-- 
2.14.3 (Apple Git-98)

